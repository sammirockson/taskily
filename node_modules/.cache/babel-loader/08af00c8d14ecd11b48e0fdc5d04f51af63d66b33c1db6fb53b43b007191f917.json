{"ast":null,"code":"import _defineProperty from \"/Users/samuelrockon/Desktop/Dev/taskily/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { Attributor, BlockBlot, ClassAttributor, EmbedBlot, Scope, StyleAttributor } from 'parchment';\nimport Delta from 'quill-delta';\nimport { BlockEmbed } from '../blots/block.js';\nimport logger from '../core/logger.js';\nimport Module from '../core/module.js';\nimport Quill from '../core/quill.js';\nimport { AlignAttribute, AlignStyle } from '../formats/align.js';\nimport { BackgroundStyle } from '../formats/background.js';\nimport CodeBlock from '../formats/code.js';\nimport { ColorStyle } from '../formats/color.js';\nimport { DirectionAttribute, DirectionStyle } from '../formats/direction.js';\nimport { FontStyle } from '../formats/font.js';\nimport { SizeStyle } from '../formats/size.js';\nimport { deleteRange } from './keyboard.js';\nimport normalizeExternalHTML from './normalizeExternalHTML/index.js';\nconst debug = logger('quill:clipboard');\nconst CLIPBOARD_CONFIG = [[Node.TEXT_NODE, matchText], [Node.TEXT_NODE, matchNewline], ['br', matchBreak], [Node.ELEMENT_NODE, matchNewline], [Node.ELEMENT_NODE, matchBlot], [Node.ELEMENT_NODE, matchAttributor], [Node.ELEMENT_NODE, matchStyles], ['li', matchIndent], ['ol, ul', matchList], ['pre', matchCodeBlock], ['tr', matchTable], ['b', createMatchAlias('bold')], ['i', createMatchAlias('italic')], ['strike', createMatchAlias('strike')], ['style', matchIgnore]];\nconst ATTRIBUTE_ATTRIBUTORS = [AlignAttribute, DirectionAttribute].reduce((memo, attr) => {\n  memo[attr.keyName] = attr;\n  return memo;\n}, {});\nconst STYLE_ATTRIBUTORS = [AlignStyle, BackgroundStyle, ColorStyle, DirectionStyle, FontStyle, SizeStyle].reduce((memo, attr) => {\n  memo[attr.keyName] = attr;\n  return memo;\n}, {});\nclass Clipboard extends Module {\n  constructor(quill, options) {\n    super(quill, options);\n    this.quill.root.addEventListener('copy', e => this.onCaptureCopy(e, false));\n    this.quill.root.addEventListener('cut', e => this.onCaptureCopy(e, true));\n    this.quill.root.addEventListener('paste', this.onCapturePaste.bind(this));\n    this.matchers = [];\n    CLIPBOARD_CONFIG.concat(this.options.matchers ?? []).forEach(_ref => {\n      let [selector, matcher] = _ref;\n      this.addMatcher(selector, matcher);\n    });\n  }\n  addMatcher(selector, matcher) {\n    this.matchers.push([selector, matcher]);\n  }\n  convert(_ref2) {\n    let {\n      html,\n      text\n    } = _ref2;\n    let formats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (formats[CodeBlock.blotName]) {\n      return new Delta().insert(text || '', {\n        [CodeBlock.blotName]: formats[CodeBlock.blotName]\n      });\n    }\n    if (!html) {\n      return new Delta().insert(text || '', formats);\n    }\n    const delta = this.convertHTML(html);\n    // Remove trailing newline\n    if (deltaEndsWith(delta, '\\n') && (delta.ops[delta.ops.length - 1].attributes == null || formats.table)) {\n      return delta.compose(new Delta().retain(delta.length() - 1).delete(1));\n    }\n    return delta;\n  }\n  normalizeHTML(doc) {\n    normalizeExternalHTML(doc);\n  }\n  convertHTML(html) {\n    const doc = new DOMParser().parseFromString(html, 'text/html');\n    this.normalizeHTML(doc);\n    const container = doc.body;\n    const nodeMatches = new WeakMap();\n    const [elementMatchers, textMatchers] = this.prepareMatching(container, nodeMatches);\n    return traverse(this.quill.scroll, container, elementMatchers, textMatchers, nodeMatches);\n  }\n  dangerouslyPasteHTML(index, html) {\n    let source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Quill.sources.API;\n    if (typeof index === 'string') {\n      const delta = this.convert({\n        html: index,\n        text: ''\n      });\n      // @ts-expect-error\n      this.quill.setContents(delta, html);\n      this.quill.setSelection(0, Quill.sources.SILENT);\n    } else {\n      const paste = this.convert({\n        html,\n        text: ''\n      });\n      this.quill.updateContents(new Delta().retain(index).concat(paste), source);\n      this.quill.setSelection(index + paste.length(), Quill.sources.SILENT);\n    }\n  }\n  onCaptureCopy(e) {\n    let isCut = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (e.defaultPrevented) return;\n    e.preventDefault();\n    const [range] = this.quill.selection.getRange();\n    if (range == null) return;\n    const {\n      html,\n      text\n    } = this.onCopy(range, isCut);\n    e.clipboardData?.setData('text/plain', text);\n    e.clipboardData?.setData('text/html', html);\n    if (isCut) {\n      deleteRange({\n        range,\n        quill: this.quill\n      });\n    }\n  }\n\n  /*\n   * https://www.iana.org/assignments/media-types/text/uri-list\n   */\n  normalizeURIList(urlList) {\n    return urlList.split(/\\r?\\n/)\n    // Ignore all comments\n    .filter(url => url[0] !== '#').join('\\n');\n  }\n  onCapturePaste(e) {\n    if (e.defaultPrevented || !this.quill.isEnabled()) return;\n    e.preventDefault();\n    const range = this.quill.getSelection(true);\n    if (range == null) return;\n    const html = e.clipboardData?.getData('text/html');\n    let text = e.clipboardData?.getData('text/plain');\n    if (!html && !text) {\n      const urlList = e.clipboardData?.getData('text/uri-list');\n      if (urlList) {\n        text = this.normalizeURIList(urlList);\n      }\n    }\n    const files = Array.from(e.clipboardData?.files || []);\n    if (!html && files.length > 0) {\n      this.quill.uploader.upload(range, files);\n      return;\n    }\n    if (html && files.length > 0) {\n      const doc = new DOMParser().parseFromString(html, 'text/html');\n      if (doc.body.childElementCount === 1 && doc.body.firstElementChild?.tagName === 'IMG') {\n        this.quill.uploader.upload(range, files);\n        return;\n      }\n    }\n    this.onPaste(range, {\n      html,\n      text\n    });\n  }\n  onCopy(range) {\n    const text = this.quill.getText(range);\n    const html = this.quill.getSemanticHTML(range);\n    return {\n      html,\n      text\n    };\n  }\n  onPaste(range, _ref3) {\n    let {\n      text,\n      html\n    } = _ref3;\n    const formats = this.quill.getFormat(range.index);\n    const pastedDelta = this.convert({\n      text,\n      html\n    }, formats);\n    debug.log('onPaste', pastedDelta, {\n      text,\n      html\n    });\n    const delta = new Delta().retain(range.index).delete(range.length).concat(pastedDelta);\n    this.quill.updateContents(delta, Quill.sources.USER);\n    // range.length contributes to delta.length()\n    this.quill.setSelection(delta.length() - range.length, Quill.sources.SILENT);\n    this.quill.scrollSelectionIntoView();\n  }\n  prepareMatching(container, nodeMatches) {\n    const elementMatchers = [];\n    const textMatchers = [];\n    this.matchers.forEach(pair => {\n      const [selector, matcher] = pair;\n      switch (selector) {\n        case Node.TEXT_NODE:\n          textMatchers.push(matcher);\n          break;\n        case Node.ELEMENT_NODE:\n          elementMatchers.push(matcher);\n          break;\n        default:\n          Array.from(container.querySelectorAll(selector)).forEach(node => {\n            if (nodeMatches.has(node)) {\n              const matches = nodeMatches.get(node);\n              matches?.push(matcher);\n            } else {\n              nodeMatches.set(node, [matcher]);\n            }\n          });\n          break;\n      }\n    });\n    return [elementMatchers, textMatchers];\n  }\n}\n_defineProperty(Clipboard, \"DEFAULTS\", {\n  matchers: []\n});\nfunction applyFormat(delta, format, value, scroll) {\n  if (!scroll.query(format)) {\n    return delta;\n  }\n  return delta.reduce((newDelta, op) => {\n    if (!op.insert) return newDelta;\n    if (op.attributes && op.attributes[format]) {\n      return newDelta.push(op);\n    }\n    const formats = value ? {\n      [format]: value\n    } : {};\n    return newDelta.insert(op.insert, {\n      ...formats,\n      ...op.attributes\n    });\n  }, new Delta());\n}\nfunction deltaEndsWith(delta, text) {\n  let endText = '';\n  for (let i = delta.ops.length - 1; i >= 0 && endText.length < text.length; --i // eslint-disable-line no-plusplus\n  ) {\n    const op = delta.ops[i];\n    if (typeof op.insert !== 'string') break;\n    endText = op.insert + endText;\n  }\n  return endText.slice(-1 * text.length) === text;\n}\nfunction isLine(node, scroll) {\n  if (!(node instanceof Element)) return false;\n  const match = scroll.query(node);\n  // @ts-expect-error\n  if (match && match.prototype instanceof EmbedBlot) return false;\n  return ['address', 'article', 'blockquote', 'canvas', 'dd', 'div', 'dl', 'dt', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'iframe', 'li', 'main', 'nav', 'ol', 'output', 'p', 'pre', 'section', 'table', 'td', 'tr', 'ul', 'video'].includes(node.tagName.toLowerCase());\n}\nfunction isBetweenInlineElements(node, scroll) {\n  return node.previousElementSibling && node.nextElementSibling && !isLine(node.previousElementSibling, scroll) && !isLine(node.nextElementSibling, scroll);\n}\nconst preNodes = new WeakMap();\nfunction isPre(node) {\n  if (node == null) return false;\n  if (!preNodes.has(node)) {\n    // @ts-expect-error\n    if (node.tagName === 'PRE') {\n      preNodes.set(node, true);\n    } else {\n      preNodes.set(node, isPre(node.parentNode));\n    }\n  }\n  return preNodes.get(node);\n}\nfunction traverse(scroll, node, elementMatchers, textMatchers, nodeMatches) {\n  // Post-order\n  if (node.nodeType === node.TEXT_NODE) {\n    return textMatchers.reduce((delta, matcher) => {\n      return matcher(node, delta, scroll);\n    }, new Delta());\n  }\n  if (node.nodeType === node.ELEMENT_NODE) {\n    return Array.from(node.childNodes || []).reduce((delta, childNode) => {\n      let childrenDelta = traverse(scroll, childNode, elementMatchers, textMatchers, nodeMatches);\n      if (childNode.nodeType === node.ELEMENT_NODE) {\n        childrenDelta = elementMatchers.reduce((reducedDelta, matcher) => {\n          return matcher(childNode, reducedDelta, scroll);\n        }, childrenDelta);\n        childrenDelta = (nodeMatches.get(childNode) || []).reduce((reducedDelta, matcher) => {\n          return matcher(childNode, reducedDelta, scroll);\n        }, childrenDelta);\n      }\n      return delta.concat(childrenDelta);\n    }, new Delta());\n  }\n  return new Delta();\n}\nfunction createMatchAlias(format) {\n  return (_node, delta, scroll) => {\n    return applyFormat(delta, format, true, scroll);\n  };\n}\nfunction matchAttributor(node, delta, scroll) {\n  const attributes = Attributor.keys(node);\n  const classes = ClassAttributor.keys(node);\n  const styles = StyleAttributor.keys(node);\n  const formats = {};\n  attributes.concat(classes).concat(styles).forEach(name => {\n    let attr = scroll.query(name, Scope.ATTRIBUTE);\n    if (attr != null) {\n      formats[attr.attrName] = attr.value(node);\n      if (formats[attr.attrName]) return;\n    }\n    attr = ATTRIBUTE_ATTRIBUTORS[name];\n    if (attr != null && (attr.attrName === name || attr.keyName === name)) {\n      formats[attr.attrName] = attr.value(node) || undefined;\n    }\n    attr = STYLE_ATTRIBUTORS[name];\n    if (attr != null && (attr.attrName === name || attr.keyName === name)) {\n      attr = STYLE_ATTRIBUTORS[name];\n      formats[attr.attrName] = attr.value(node) || undefined;\n    }\n  });\n  return Object.entries(formats).reduce((newDelta, _ref4) => {\n    let [name, value] = _ref4;\n    return applyFormat(newDelta, name, value, scroll);\n  }, delta);\n}\nfunction matchBlot(node, delta, scroll) {\n  const match = scroll.query(node);\n  if (match == null) return delta;\n  // @ts-expect-error\n  if (match.prototype instanceof EmbedBlot) {\n    const embed = {};\n    // @ts-expect-error\n    const value = match.value(node);\n    if (value != null) {\n      // @ts-expect-error\n      embed[match.blotName] = value;\n      // @ts-expect-error\n      return new Delta().insert(embed, match.formats(node, scroll));\n    }\n  } else {\n    // @ts-expect-error\n    if (match.prototype instanceof BlockBlot && !deltaEndsWith(delta, '\\n')) {\n      delta.insert('\\n');\n    }\n    if ('blotName' in match && 'formats' in match && typeof match.formats === 'function') {\n      return applyFormat(delta, match.blotName, match.formats(node, scroll), scroll);\n    }\n  }\n  return delta;\n}\nfunction matchBreak(node, delta) {\n  if (!deltaEndsWith(delta, '\\n')) {\n    delta.insert('\\n');\n  }\n  return delta;\n}\nfunction matchCodeBlock(node, delta, scroll) {\n  const match = scroll.query('code-block');\n  const language = match && 'formats' in match && typeof match.formats === 'function' ? match.formats(node, scroll) : true;\n  return applyFormat(delta, 'code-block', language, scroll);\n}\nfunction matchIgnore() {\n  return new Delta();\n}\nfunction matchIndent(node, delta, scroll) {\n  const match = scroll.query(node);\n  if (match == null ||\n  // @ts-expect-error\n  match.blotName !== 'list' || !deltaEndsWith(delta, '\\n')) {\n    return delta;\n  }\n  let indent = -1;\n  let parent = node.parentNode;\n  while (parent != null) {\n    // @ts-expect-error\n    if (['OL', 'UL'].includes(parent.tagName)) {\n      indent += 1;\n    }\n    parent = parent.parentNode;\n  }\n  if (indent <= 0) return delta;\n  return delta.reduce((composed, op) => {\n    if (!op.insert) return composed;\n    if (op.attributes && typeof op.attributes.indent === 'number') {\n      return composed.push(op);\n    }\n    return composed.insert(op.insert, {\n      indent,\n      ...(op.attributes || {})\n    });\n  }, new Delta());\n}\nfunction matchList(node, delta, scroll) {\n  const element = node;\n  let list = element.tagName === 'OL' ? 'ordered' : 'bullet';\n  const checkedAttr = element.getAttribute('data-checked');\n  if (checkedAttr) {\n    list = checkedAttr === 'true' ? 'checked' : 'unchecked';\n  }\n  return applyFormat(delta, 'list', list, scroll);\n}\nfunction matchNewline(node, delta, scroll) {\n  if (!deltaEndsWith(delta, '\\n')) {\n    if (isLine(node, scroll) && (node.childNodes.length > 0 || node instanceof HTMLParagraphElement)) {\n      return delta.insert('\\n');\n    }\n    if (delta.length() > 0 && node.nextSibling) {\n      let nextSibling = node.nextSibling;\n      while (nextSibling != null) {\n        if (isLine(nextSibling, scroll)) {\n          return delta.insert('\\n');\n        }\n        const match = scroll.query(nextSibling);\n        // @ts-expect-error\n        if (match && match.prototype instanceof BlockEmbed) {\n          return delta.insert('\\n');\n        }\n        nextSibling = nextSibling.firstChild;\n      }\n    }\n  }\n  return delta;\n}\nfunction matchStyles(node, delta, scroll) {\n  const formats = {};\n  const style = node.style || {};\n  if (style.fontStyle === 'italic') {\n    formats.italic = true;\n  }\n  if (style.textDecoration === 'underline') {\n    formats.underline = true;\n  }\n  if (style.textDecoration === 'line-through') {\n    formats.strike = true;\n  }\n  if (style.fontWeight?.startsWith('bold') ||\n  // @ts-expect-error Fix me later\n  parseInt(style.fontWeight, 10) >= 700) {\n    formats.bold = true;\n  }\n  delta = Object.entries(formats).reduce((newDelta, _ref5) => {\n    let [name, value] = _ref5;\n    return applyFormat(newDelta, name, value, scroll);\n  }, delta);\n  // @ts-expect-error\n  if (parseFloat(style.textIndent || 0) > 0) {\n    // Could be 0.5in\n    return new Delta().insert('\\t').concat(delta);\n  }\n  return delta;\n}\nfunction matchTable(node, delta, scroll) {\n  const table = node.parentElement?.tagName === 'TABLE' ? node.parentElement : node.parentElement?.parentElement;\n  if (table != null) {\n    const rows = Array.from(table.querySelectorAll('tr'));\n    const row = rows.indexOf(node) + 1;\n    return applyFormat(delta, 'table', row, scroll);\n  }\n  return delta;\n}\nfunction matchText(node, delta, scroll) {\n  // @ts-expect-error\n  let text = node.data;\n  // Word represents empty line with <o:p>&nbsp;</o:p>\n  if (node.parentElement?.tagName === 'O:P') {\n    return delta.insert(text.trim());\n  }\n  if (!isPre(node)) {\n    if (text.trim().length === 0 && text.includes('\\n') && !isBetweenInlineElements(node, scroll)) {\n      return delta;\n    }\n    const replacer = (collapse, match) => {\n      const replaced = match.replace(/[^\\u00a0]/g, ''); // \\u00a0 is nbsp;\n      return replaced.length < 1 && collapse ? ' ' : replaced;\n    };\n    text = text.replace(/\\r\\n/g, ' ').replace(/\\n/g, ' ');\n    text = text.replace(/\\s\\s+/g, replacer.bind(replacer, true)); // collapse whitespace\n    if (node.previousSibling == null && node.parentElement != null && isLine(node.parentElement, scroll) || node.previousSibling instanceof Element && isLine(node.previousSibling, scroll)) {\n      text = text.replace(/^\\s+/, replacer.bind(replacer, false));\n    }\n    if (node.nextSibling == null && node.parentElement != null && isLine(node.parentElement, scroll) || node.nextSibling instanceof Element && isLine(node.nextSibling, scroll)) {\n      text = text.replace(/\\s+$/, replacer.bind(replacer, false));\n    }\n  }\n  return delta.insert(text);\n}\nexport { Clipboard as default, matchAttributor, matchBlot, matchNewline, matchText, traverse };","map":{"version":3,"names":["Attributor","BlockBlot","ClassAttributor","EmbedBlot","Scope","StyleAttributor","Delta","BlockEmbed","logger","Module","Quill","AlignAttribute","AlignStyle","BackgroundStyle","CodeBlock","ColorStyle","DirectionAttribute","DirectionStyle","FontStyle","SizeStyle","deleteRange","normalizeExternalHTML","debug","CLIPBOARD_CONFIG","Node","TEXT_NODE","matchText","matchNewline","matchBreak","ELEMENT_NODE","matchBlot","matchAttributor","matchStyles","matchIndent","matchList","matchCodeBlock","matchTable","createMatchAlias","matchIgnore","ATTRIBUTE_ATTRIBUTORS","reduce","memo","attr","keyName","STYLE_ATTRIBUTORS","Clipboard","constructor","quill","options","root","addEventListener","e","onCaptureCopy","onCapturePaste","bind","matchers","concat","forEach","_ref","selector","matcher","addMatcher","push","convert","_ref2","html","text","formats","arguments","length","undefined","blotName","insert","delta","convertHTML","deltaEndsWith","ops","attributes","table","compose","retain","delete","normalizeHTML","doc","DOMParser","parseFromString","container","body","nodeMatches","WeakMap","elementMatchers","textMatchers","prepareMatching","traverse","scroll","dangerouslyPasteHTML","index","source","sources","API","setContents","setSelection","SILENT","paste","updateContents","isCut","defaultPrevented","preventDefault","range","selection","getRange","onCopy","clipboardData","setData","normalizeURIList","urlList","split","filter","url","join","isEnabled","getSelection","getData","files","Array","from","uploader","upload","childElementCount","firstElementChild","tagName","onPaste","getText","getSemanticHTML","_ref3","getFormat","pastedDelta","log","USER","scrollSelectionIntoView","pair","querySelectorAll","node","has","matches","get","set","_defineProperty","applyFormat","format","value","query","newDelta","op","endText","i","slice","isLine","Element","match","prototype","includes","toLowerCase","isBetweenInlineElements","previousElementSibling","nextElementSibling","preNodes","isPre","parentNode","nodeType","childNodes","childNode","childrenDelta","reducedDelta","_node","keys","classes","styles","name","ATTRIBUTE","attrName","Object","entries","_ref4","embed","language","indent","parent","composed","element","list","checkedAttr","getAttribute","HTMLParagraphElement","nextSibling","firstChild","style","fontStyle","italic","textDecoration","underline","strike","fontWeight","startsWith","parseInt","bold","_ref5","parseFloat","textIndent","parentElement","rows","row","indexOf","data","trim","replacer","collapse","replaced","replace","previousSibling","default"],"sources":["../../src/modules/clipboard.ts"],"sourcesContent":["import type { ScrollBlot } from 'parchment';\nimport {\n  Attributor,\n  BlockBlot,\n  ClassAttributor,\n  EmbedBlot,\n  Scope,\n  StyleAttributor,\n} from 'parchment';\nimport Delta from 'quill-delta';\nimport { BlockEmbed } from '../blots/block.js';\nimport type { EmitterSource } from '../core/emitter.js';\nimport logger from '../core/logger.js';\nimport Module from '../core/module.js';\nimport Quill from '../core/quill.js';\nimport type { Range } from '../core/selection.js';\nimport { AlignAttribute, AlignStyle } from '../formats/align.js';\nimport { BackgroundStyle } from '../formats/background.js';\nimport CodeBlock from '../formats/code.js';\nimport { ColorStyle } from '../formats/color.js';\nimport { DirectionAttribute, DirectionStyle } from '../formats/direction.js';\nimport { FontStyle } from '../formats/font.js';\nimport { SizeStyle } from '../formats/size.js';\nimport { deleteRange } from './keyboard.js';\nimport normalizeExternalHTML from './normalizeExternalHTML/index.js';\n\nconst debug = logger('quill:clipboard');\n\ntype Selector = string | Node['TEXT_NODE'] | Node['ELEMENT_NODE'];\ntype Matcher = (node: Node, delta: Delta, scroll: ScrollBlot) => Delta;\n\nconst CLIPBOARD_CONFIG: [Selector, Matcher][] = [\n  [Node.TEXT_NODE, matchText],\n  [Node.TEXT_NODE, matchNewline],\n  ['br', matchBreak],\n  [Node.ELEMENT_NODE, matchNewline],\n  [Node.ELEMENT_NODE, matchBlot],\n  [Node.ELEMENT_NODE, matchAttributor],\n  [Node.ELEMENT_NODE, matchStyles],\n  ['li', matchIndent],\n  ['ol, ul', matchList],\n  ['pre', matchCodeBlock],\n  ['tr', matchTable],\n  ['b', createMatchAlias('bold')],\n  ['i', createMatchAlias('italic')],\n  ['strike', createMatchAlias('strike')],\n  ['style', matchIgnore],\n];\n\nconst ATTRIBUTE_ATTRIBUTORS = [AlignAttribute, DirectionAttribute].reduce(\n  (memo: Record<string, Attributor>, attr) => {\n    memo[attr.keyName] = attr;\n    return memo;\n  },\n  {},\n);\n\nconst STYLE_ATTRIBUTORS = [\n  AlignStyle,\n  BackgroundStyle,\n  ColorStyle,\n  DirectionStyle,\n  FontStyle,\n  SizeStyle,\n].reduce((memo: Record<string, Attributor>, attr) => {\n  memo[attr.keyName] = attr;\n  return memo;\n}, {});\n\ninterface ClipboardOptions {\n  matchers: [Selector, Matcher][];\n}\n\nclass Clipboard extends Module<ClipboardOptions> {\n  static DEFAULTS: ClipboardOptions = {\n    matchers: [],\n  };\n\n  matchers: [Selector, Matcher][];\n\n  constructor(quill: Quill, options: Partial<ClipboardOptions>) {\n    super(quill, options);\n    this.quill.root.addEventListener('copy', (e) =>\n      this.onCaptureCopy(e, false),\n    );\n    this.quill.root.addEventListener('cut', (e) => this.onCaptureCopy(e, true));\n    this.quill.root.addEventListener('paste', this.onCapturePaste.bind(this));\n    this.matchers = [];\n    CLIPBOARD_CONFIG.concat(this.options.matchers ?? []).forEach(\n      ([selector, matcher]) => {\n        this.addMatcher(selector, matcher);\n      },\n    );\n  }\n\n  addMatcher(selector: Selector, matcher: Matcher) {\n    this.matchers.push([selector, matcher]);\n  }\n\n  convert(\n    { html, text }: { html?: string; text?: string },\n    formats: Record<string, unknown> = {},\n  ) {\n    if (formats[CodeBlock.blotName]) {\n      return new Delta().insert(text || '', {\n        [CodeBlock.blotName]: formats[CodeBlock.blotName],\n      });\n    }\n    if (!html) {\n      return new Delta().insert(text || '', formats);\n    }\n    const delta = this.convertHTML(html);\n    // Remove trailing newline\n    if (\n      deltaEndsWith(delta, '\\n') &&\n      (delta.ops[delta.ops.length - 1].attributes == null || formats.table)\n    ) {\n      return delta.compose(new Delta().retain(delta.length() - 1).delete(1));\n    }\n    return delta;\n  }\n\n  protected normalizeHTML(doc: Document) {\n    normalizeExternalHTML(doc);\n  }\n\n  protected convertHTML(html: string) {\n    const doc = new DOMParser().parseFromString(html, 'text/html');\n    this.normalizeHTML(doc);\n    const container = doc.body;\n    const nodeMatches = new WeakMap();\n    const [elementMatchers, textMatchers] = this.prepareMatching(\n      container,\n      nodeMatches,\n    );\n    return traverse(\n      this.quill.scroll,\n      container,\n      elementMatchers,\n      textMatchers,\n      nodeMatches,\n    );\n  }\n\n  dangerouslyPasteHTML(html: string, source?: EmitterSource): void;\n  dangerouslyPasteHTML(\n    index: number,\n    html: string,\n    source?: EmitterSource,\n  ): void;\n  dangerouslyPasteHTML(\n    index: number | string,\n    html?: string,\n    source: EmitterSource = Quill.sources.API,\n  ) {\n    if (typeof index === 'string') {\n      const delta = this.convert({ html: index, text: '' });\n      // @ts-expect-error\n      this.quill.setContents(delta, html);\n      this.quill.setSelection(0, Quill.sources.SILENT);\n    } else {\n      const paste = this.convert({ html, text: '' });\n      this.quill.updateContents(\n        new Delta().retain(index).concat(paste),\n        source,\n      );\n      this.quill.setSelection(index + paste.length(), Quill.sources.SILENT);\n    }\n  }\n\n  onCaptureCopy(e: ClipboardEvent, isCut = false) {\n    if (e.defaultPrevented) return;\n    e.preventDefault();\n    const [range] = this.quill.selection.getRange();\n    if (range == null) return;\n    const { html, text } = this.onCopy(range, isCut);\n    e.clipboardData?.setData('text/plain', text);\n    e.clipboardData?.setData('text/html', html);\n    if (isCut) {\n      deleteRange({ range, quill: this.quill });\n    }\n  }\n\n  /*\n   * https://www.iana.org/assignments/media-types/text/uri-list\n   */\n  private normalizeURIList(urlList: string) {\n    return (\n      urlList\n        .split(/\\r?\\n/)\n        // Ignore all comments\n        .filter((url) => url[0] !== '#')\n        .join('\\n')\n    );\n  }\n\n  onCapturePaste(e: ClipboardEvent) {\n    if (e.defaultPrevented || !this.quill.isEnabled()) return;\n    e.preventDefault();\n    const range = this.quill.getSelection(true);\n    if (range == null) return;\n    const html = e.clipboardData?.getData('text/html');\n    let text = e.clipboardData?.getData('text/plain');\n    if (!html && !text) {\n      const urlList = e.clipboardData?.getData('text/uri-list');\n      if (urlList) {\n        text = this.normalizeURIList(urlList);\n      }\n    }\n    const files = Array.from(e.clipboardData?.files || []);\n    if (!html && files.length > 0) {\n      this.quill.uploader.upload(range, files);\n      return;\n    }\n    if (html && files.length > 0) {\n      const doc = new DOMParser().parseFromString(html, 'text/html');\n      if (\n        doc.body.childElementCount === 1 &&\n        doc.body.firstElementChild?.tagName === 'IMG'\n      ) {\n        this.quill.uploader.upload(range, files);\n        return;\n      }\n    }\n    this.onPaste(range, { html, text });\n  }\n\n  onCopy(range: Range, isCut: boolean): { html: string; text: string };\n  onCopy(range: Range) {\n    const text = this.quill.getText(range);\n    const html = this.quill.getSemanticHTML(range);\n    return { html, text };\n  }\n\n  onPaste(range: Range, { text, html }: { text?: string; html?: string }) {\n    const formats = this.quill.getFormat(range.index);\n    const pastedDelta = this.convert({ text, html }, formats);\n    debug.log('onPaste', pastedDelta, { text, html });\n    const delta = new Delta()\n      .retain(range.index)\n      .delete(range.length)\n      .concat(pastedDelta);\n    this.quill.updateContents(delta, Quill.sources.USER);\n    // range.length contributes to delta.length()\n    this.quill.setSelection(\n      delta.length() - range.length,\n      Quill.sources.SILENT,\n    );\n    this.quill.scrollSelectionIntoView();\n  }\n\n  prepareMatching(container: Element, nodeMatches: WeakMap<Node, Matcher[]>) {\n    const elementMatchers: Matcher[] = [];\n    const textMatchers: Matcher[] = [];\n    this.matchers.forEach((pair) => {\n      const [selector, matcher] = pair;\n      switch (selector) {\n        case Node.TEXT_NODE:\n          textMatchers.push(matcher);\n          break;\n        case Node.ELEMENT_NODE:\n          elementMatchers.push(matcher);\n          break;\n        default:\n          Array.from(container.querySelectorAll(selector)).forEach((node) => {\n            if (nodeMatches.has(node)) {\n              const matches = nodeMatches.get(node);\n              matches?.push(matcher);\n            } else {\n              nodeMatches.set(node, [matcher]);\n            }\n          });\n          break;\n      }\n    });\n    return [elementMatchers, textMatchers];\n  }\n}\n\nfunction applyFormat(\n  delta: Delta,\n  format: string,\n  value: unknown,\n  scroll: ScrollBlot,\n): Delta {\n  if (!scroll.query(format)) {\n    return delta;\n  }\n\n  return delta.reduce((newDelta, op) => {\n    if (!op.insert) return newDelta;\n    if (op.attributes && op.attributes[format]) {\n      return newDelta.push(op);\n    }\n    const formats = value ? { [format]: value } : {};\n    return newDelta.insert(op.insert, { ...formats, ...op.attributes });\n  }, new Delta());\n}\n\nfunction deltaEndsWith(delta: Delta, text: string) {\n  let endText = '';\n  for (\n    let i = delta.ops.length - 1;\n    i >= 0 && endText.length < text.length;\n    --i // eslint-disable-line no-plusplus\n  ) {\n    const op = delta.ops[i];\n    if (typeof op.insert !== 'string') break;\n    endText = op.insert + endText;\n  }\n  return endText.slice(-1 * text.length) === text;\n}\n\nfunction isLine(node: Node, scroll: ScrollBlot) {\n  if (!(node instanceof Element)) return false;\n  const match = scroll.query(node);\n  // @ts-expect-error\n  if (match && match.prototype instanceof EmbedBlot) return false;\n\n  return [\n    'address',\n    'article',\n    'blockquote',\n    'canvas',\n    'dd',\n    'div',\n    'dl',\n    'dt',\n    'fieldset',\n    'figcaption',\n    'figure',\n    'footer',\n    'form',\n    'h1',\n    'h2',\n    'h3',\n    'h4',\n    'h5',\n    'h6',\n    'header',\n    'iframe',\n    'li',\n    'main',\n    'nav',\n    'ol',\n    'output',\n    'p',\n    'pre',\n    'section',\n    'table',\n    'td',\n    'tr',\n    'ul',\n    'video',\n  ].includes(node.tagName.toLowerCase());\n}\n\nfunction isBetweenInlineElements(node: HTMLElement, scroll: ScrollBlot) {\n  return (\n    node.previousElementSibling &&\n    node.nextElementSibling &&\n    !isLine(node.previousElementSibling, scroll) &&\n    !isLine(node.nextElementSibling, scroll)\n  );\n}\n\nconst preNodes = new WeakMap();\nfunction isPre(node: Node | null) {\n  if (node == null) return false;\n  if (!preNodes.has(node)) {\n    // @ts-expect-error\n    if (node.tagName === 'PRE') {\n      preNodes.set(node, true);\n    } else {\n      preNodes.set(node, isPre(node.parentNode));\n    }\n  }\n  return preNodes.get(node);\n}\n\nfunction traverse(\n  scroll: ScrollBlot,\n  node: ChildNode,\n  elementMatchers: Matcher[],\n  textMatchers: Matcher[],\n  nodeMatches: WeakMap<Node, Matcher[]>,\n): Delta {\n  // Post-order\n  if (node.nodeType === node.TEXT_NODE) {\n    return textMatchers.reduce((delta: Delta, matcher) => {\n      return matcher(node, delta, scroll);\n    }, new Delta());\n  }\n  if (node.nodeType === node.ELEMENT_NODE) {\n    return Array.from(node.childNodes || []).reduce((delta, childNode) => {\n      let childrenDelta = traverse(\n        scroll,\n        childNode,\n        elementMatchers,\n        textMatchers,\n        nodeMatches,\n      );\n      if (childNode.nodeType === node.ELEMENT_NODE) {\n        childrenDelta = elementMatchers.reduce((reducedDelta, matcher) => {\n          return matcher(childNode as HTMLElement, reducedDelta, scroll);\n        }, childrenDelta);\n        childrenDelta = (nodeMatches.get(childNode) || []).reduce(\n          (reducedDelta, matcher) => {\n            return matcher(childNode, reducedDelta, scroll);\n          },\n          childrenDelta,\n        );\n      }\n      return delta.concat(childrenDelta);\n    }, new Delta());\n  }\n  return new Delta();\n}\n\nfunction createMatchAlias(format: string) {\n  return (_node: Element, delta: Delta, scroll: ScrollBlot) => {\n    return applyFormat(delta, format, true, scroll);\n  };\n}\n\nfunction matchAttributor(node: HTMLElement, delta: Delta, scroll: ScrollBlot) {\n  const attributes = Attributor.keys(node);\n  const classes = ClassAttributor.keys(node);\n  const styles = StyleAttributor.keys(node);\n  const formats: Record<string, string | undefined> = {};\n  attributes\n    .concat(classes)\n    .concat(styles)\n    .forEach((name) => {\n      let attr = scroll.query(name, Scope.ATTRIBUTE) as Attributor;\n      if (attr != null) {\n        formats[attr.attrName] = attr.value(node);\n        if (formats[attr.attrName]) return;\n      }\n      attr = ATTRIBUTE_ATTRIBUTORS[name];\n      if (attr != null && (attr.attrName === name || attr.keyName === name)) {\n        formats[attr.attrName] = attr.value(node) || undefined;\n      }\n      attr = STYLE_ATTRIBUTORS[name];\n      if (attr != null && (attr.attrName === name || attr.keyName === name)) {\n        attr = STYLE_ATTRIBUTORS[name];\n        formats[attr.attrName] = attr.value(node) || undefined;\n      }\n    });\n\n  return Object.entries(formats).reduce(\n    (newDelta, [name, value]) => applyFormat(newDelta, name, value, scroll),\n    delta,\n  );\n}\n\nfunction matchBlot(node: Node, delta: Delta, scroll: ScrollBlot) {\n  const match = scroll.query(node);\n  if (match == null) return delta;\n  // @ts-expect-error\n  if (match.prototype instanceof EmbedBlot) {\n    const embed = {};\n    // @ts-expect-error\n    const value = match.value(node);\n    if (value != null) {\n      // @ts-expect-error\n      embed[match.blotName] = value;\n      // @ts-expect-error\n      return new Delta().insert(embed, match.formats(node, scroll));\n    }\n  } else {\n    // @ts-expect-error\n    if (match.prototype instanceof BlockBlot && !deltaEndsWith(delta, '\\n')) {\n      delta.insert('\\n');\n    }\n    if (\n      'blotName' in match &&\n      'formats' in match &&\n      typeof match.formats === 'function'\n    ) {\n      return applyFormat(\n        delta,\n        match.blotName,\n        match.formats(node, scroll),\n        scroll,\n      );\n    }\n  }\n  return delta;\n}\n\nfunction matchBreak(node: Node, delta: Delta) {\n  if (!deltaEndsWith(delta, '\\n')) {\n    delta.insert('\\n');\n  }\n  return delta;\n}\n\nfunction matchCodeBlock(node: Node, delta: Delta, scroll: ScrollBlot) {\n  const match = scroll.query('code-block');\n  const language =\n    match && 'formats' in match && typeof match.formats === 'function'\n      ? match.formats(node, scroll)\n      : true;\n  return applyFormat(delta, 'code-block', language, scroll);\n}\n\nfunction matchIgnore() {\n  return new Delta();\n}\n\nfunction matchIndent(node: Node, delta: Delta, scroll: ScrollBlot) {\n  const match = scroll.query(node);\n  if (\n    match == null ||\n    // @ts-expect-error\n    match.blotName !== 'list' ||\n    !deltaEndsWith(delta, '\\n')\n  ) {\n    return delta;\n  }\n  let indent = -1;\n  let parent = node.parentNode;\n  while (parent != null) {\n    // @ts-expect-error\n    if (['OL', 'UL'].includes(parent.tagName)) {\n      indent += 1;\n    }\n    parent = parent.parentNode;\n  }\n  if (indent <= 0) return delta;\n  return delta.reduce((composed, op) => {\n    if (!op.insert) return composed;\n    if (op.attributes && typeof op.attributes.indent === 'number') {\n      return composed.push(op);\n    }\n    return composed.insert(op.insert, { indent, ...(op.attributes || {}) });\n  }, new Delta());\n}\n\nfunction matchList(node: Node, delta: Delta, scroll: ScrollBlot) {\n  const element = node as Element;\n  let list = element.tagName === 'OL' ? 'ordered' : 'bullet';\n\n  const checkedAttr = element.getAttribute('data-checked');\n  if (checkedAttr) {\n    list = checkedAttr === 'true' ? 'checked' : 'unchecked';\n  }\n\n  return applyFormat(delta, 'list', list, scroll);\n}\n\nfunction matchNewline(node: Node, delta: Delta, scroll: ScrollBlot) {\n  if (!deltaEndsWith(delta, '\\n')) {\n    if (\n      isLine(node, scroll) &&\n      (node.childNodes.length > 0 || node instanceof HTMLParagraphElement)\n    ) {\n      return delta.insert('\\n');\n    }\n    if (delta.length() > 0 && node.nextSibling) {\n      let nextSibling: Node | null = node.nextSibling;\n      while (nextSibling != null) {\n        if (isLine(nextSibling, scroll)) {\n          return delta.insert('\\n');\n        }\n        const match = scroll.query(nextSibling);\n        // @ts-expect-error\n        if (match && match.prototype instanceof BlockEmbed) {\n          return delta.insert('\\n');\n        }\n        nextSibling = nextSibling.firstChild;\n      }\n    }\n  }\n  return delta;\n}\n\nfunction matchStyles(node: HTMLElement, delta: Delta, scroll: ScrollBlot) {\n  const formats: Record<string, unknown> = {};\n  const style: Partial<CSSStyleDeclaration> = node.style || {};\n  if (style.fontStyle === 'italic') {\n    formats.italic = true;\n  }\n  if (style.textDecoration === 'underline') {\n    formats.underline = true;\n  }\n  if (style.textDecoration === 'line-through') {\n    formats.strike = true;\n  }\n  if (\n    style.fontWeight?.startsWith('bold') ||\n    // @ts-expect-error Fix me later\n    parseInt(style.fontWeight, 10) >= 700\n  ) {\n    formats.bold = true;\n  }\n  delta = Object.entries(formats).reduce(\n    (newDelta, [name, value]) => applyFormat(newDelta, name, value, scroll),\n    delta,\n  );\n  // @ts-expect-error\n  if (parseFloat(style.textIndent || 0) > 0) {\n    // Could be 0.5in\n    return new Delta().insert('\\t').concat(delta);\n  }\n  return delta;\n}\n\nfunction matchTable(\n  node: HTMLTableRowElement,\n  delta: Delta,\n  scroll: ScrollBlot,\n) {\n  const table =\n    node.parentElement?.tagName === 'TABLE'\n      ? node.parentElement\n      : node.parentElement?.parentElement;\n  if (table != null) {\n    const rows = Array.from(table.querySelectorAll('tr'));\n    const row = rows.indexOf(node) + 1;\n    return applyFormat(delta, 'table', row, scroll);\n  }\n  return delta;\n}\n\nfunction matchText(node: HTMLElement, delta: Delta, scroll: ScrollBlot) {\n  // @ts-expect-error\n  let text = node.data;\n  // Word represents empty line with <o:p>&nbsp;</o:p>\n  if (node.parentElement?.tagName === 'O:P') {\n    return delta.insert(text.trim());\n  }\n  if (!isPre(node)) {\n    if (\n      text.trim().length === 0 &&\n      text.includes('\\n') &&\n      !isBetweenInlineElements(node, scroll)\n    ) {\n      return delta;\n    }\n    const replacer = (collapse: unknown, match: string) => {\n      const replaced = match.replace(/[^\\u00a0]/g, ''); // \\u00a0 is nbsp;\n      return replaced.length < 1 && collapse ? ' ' : replaced;\n    };\n    text = text.replace(/\\r\\n/g, ' ').replace(/\\n/g, ' ');\n    text = text.replace(/\\s\\s+/g, replacer.bind(replacer, true)); // collapse whitespace\n    if (\n      (node.previousSibling == null &&\n        node.parentElement != null &&\n        isLine(node.parentElement, scroll)) ||\n      (node.previousSibling instanceof Element &&\n        isLine(node.previousSibling, scroll))\n    ) {\n      text = text.replace(/^\\s+/, replacer.bind(replacer, false));\n    }\n    if (\n      (node.nextSibling == null &&\n        node.parentElement != null &&\n        isLine(node.parentElement, scroll)) ||\n      (node.nextSibling instanceof Element && isLine(node.nextSibling, scroll))\n    ) {\n      text = text.replace(/\\s+$/, replacer.bind(replacer, false));\n    }\n  }\n  return delta.insert(text);\n}\n\nexport {\n  Clipboard as default,\n  matchAttributor,\n  matchBlot,\n  matchNewline,\n  matchText,\n  traverse,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}