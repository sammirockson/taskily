{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { BASE_URL, PICKMORE_MERCHANT_KEY, SIDE_BAR_MENU_ITEM_KEY } from '@/config';\nimport { ref } from 'vue';\nimport axios from 'axios';\nimport { googleSdkLoaded } from \"vue3-google-login\";\nimport config from '@/config';\nimport CryptoJS from 'crypto-js';\nimport { USER_CACHE_KEY } from '@/config';\nimport APIService from '@/APIService';\nexport default {\n  props: {\n    isInvite: false\n  },\n  inject: [\"cryptojs\"],\n  setup() {\n    var email = ref(\"\");\n    var password = ref(\"\");\n    var isLogActivated = ref(false);\n    var showPassword = ref(false);\n    var googleUser = ref(null);\n    var viewPassword = ref(false);\n    return {\n      email,\n      password,\n      isLogActivated,\n      showPassword,\n      googleUser,\n      viewPassword\n    };\n  },\n  mounted() {\n    APIService.init();\n  },\n  computed: {\n    isInvite() {\n      get;\n    }\n  },\n  methods: {\n    handleNavToSignUp() {\n      if (this.isInvite) {\n        this.$emit(\"didTapNavToSignUp\");\n      } else {\n        this.$router.push({\n          path: \"/signup\"\n        });\n      }\n    },\n    viewPassword() {\n      this.showPassword = !this.showPassword;\n    },\n    async handleLogin() {\n      this.isLogActivated = true;\n      var params = {\n        phoneNumber: this.phoneNumber,\n        password: this.password\n      };\n      let userInfo = await APIService.login(params);\n      console.log(\"userInfo login info: \", userInfo);\n      if (userInfo.token.length > 0) {\n        userInfo.password = \"\";\n        let token = userInfo.token;\n        this.encryptAndNavigate(userInfo, token);\n      }\n    },\n    handleSignUpTapped() {\n      this.$emit('navToRegister', true);\n    },\n    async loginWithGoogle() {\n      googleSdkLoaded(google => {\n        google.accounts.oauth2.initCodeClient({\n          client_id: config.GOOGLE_AUTH_CLIENT_ID,\n          scope: \"email profile openid\",\n          redirect_uri: \"http://localhost:4000/auth/callback\",\n          callback: response => {\n            if (response.code) {\n              this.sendCodeToBackend(response.code);\n            }\n          }\n        }).requestCode();\n      });\n    },\n    async sendCodeToBackend(code) {\n      try {\n        const response = await axios.post(\"https://oauth2.googleapis.com/token\", {\n          code,\n          client_id: config.GOOGLE_AUTH_CLIENT_ID,\n          client_secret: config.GOOGLE_AUTH_CLEINT_SECRET,\n          redirect_uri: \"postmessage\",\n          grant_type: \"authorization_code\"\n        });\n        const accessToken = response.data.access_token;\n        // Fetch user details using the access token\n        const userResponse = await axios.get(\"https://www.googleapis.com/oauth2/v3/userinfo\", {\n          headers: {\n            Authorization: `Bearer ${accessToken}`\n          }\n        });\n        if (userResponse && userResponse.data) {\n          // Set the userDetails data property to the userResponse object\n          this.googleUser = userResponse.data;\n          console.log(\"user data: \", userResponse.data);\n          this.handleAuthGoogleUser();\n        } else {\n          // Handle the case where userResponse or userResponse.data is undefined\n          console.error(\"Failed to fetch user details.\");\n        }\n      } catch (error) {\n        console.error(\"Token exchange failed:\", error.response.data);\n      }\n    },\n    async handleAuthGoogleUser() {\n      if (this.googleUser == null) {\n        return;\n      }\n      let gUser = this.googleUser;\n      let params = {\n        email: gUser.email,\n        fullName: gUser.name,\n        password: gUser.sub,\n        picture: gUser.picture,\n        isEmailVerified: gUser.email_verified,\n        isViaGoogle: true,\n        id: Date.now()\n      };\n      let fullURL = BASE_URL + \"auth/googleAuth\";\n      console.log(\"full url: \", fullURL, \"params: \", params);\n      await axios.post(fullURL, params).then(response => {\n        if (response.data != null) {\n          let data = response.data;\n          if (data.statusCode == 200) {\n            let gUserInfo = data.resp;\n            console.log(\"gUserInfo signed up info: \", gUserInfo);\n            gUserInfo.password = \"\";\n            let token = gUserInfo.token;\n            this.encryptAndNavigate(gUserInfo, token);\n          } else {\n            alert(data.msg);\n          }\n        }\n      });\n    },\n    encryptAndNavigate(gUserInfo, token) {\n      let userDataStr = JSON.stringify(gUserInfo);\n      let encyrptedUserData = CryptoJS.AES.encrypt(userDataStr, token).toString();\n      let cacheData = {\n        token: token,\n        user: encyrptedUserData\n      };\n      console.log(\"encrypted data: \", cacheData);\n      localStorage.removeItem(USER_CACHE_KEY);\n      localStorage.setItem(USER_CACHE_KEY, JSON.stringify(cacheData));\n      if (this.isInvite) {\n        this.$emit(\"didLogIn\", gUserInfo);\n      } else {\n        this.$router.push({\n          path: \"/\"\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["BASE_URL","PICKMORE_MERCHANT_KEY","SIDE_BAR_MENU_ITEM_KEY","ref","axios","googleSdkLoaded","config","CryptoJS","USER_CACHE_KEY","APIService","props","isInvite","inject","setup","email","password","isLogActivated","showPassword","googleUser","viewPassword","mounted","init","computed","get","methods","handleNavToSignUp","$emit","$router","push","path","handleLogin","params","phoneNumber","userInfo","login","console","log","token","length","encryptAndNavigate","handleSignUpTapped","loginWithGoogle","google","accounts","oauth2","initCodeClient","client_id","GOOGLE_AUTH_CLIENT_ID","scope","redirect_uri","callback","response","code","sendCodeToBackend","requestCode","post","client_secret","GOOGLE_AUTH_CLEINT_SECRET","grant_type","accessToken","data","access_token","userResponse","headers","Authorization","handleAuthGoogleUser","error","gUser","fullName","name","sub","picture","isEmailVerified","email_verified","isViaGoogle","id","Date","now","fullURL","then","statusCode","gUserInfo","resp","alert","msg","userDataStr","JSON","stringify","encyrptedUserData","AES","encrypt","toString","cacheData","user","localStorage","removeItem","setItem"],"sources":["/Users/Sam.Agyemang/Desktop/Dev/taskily/src/views/LoginView.vue"],"sourcesContent":["<template>\n    <div class=\"authContentView\">\n      <div class=\"inputFieldContainer\">\n        <img src=\"@/assets/logo.png\" class=\"brandLogo\">\n            <v-text-field type=\"email\" prepend-inner-icon=\"mdi-email-outline\" class=\"emailField\" v-model=\"email\" variant=\"outlined\" label=\"Email Address\"></v-text-field>\n            <v-text-field\n            :type=\"showPassword ? 'text' : 'password'\"  prepend-inner-icon=\"mdi-lock-outline\" :append-inner-icon=\"showPassword ? 'mdi-eye' : 'mdi-eye-outline'\"\n             @click:append-inner=\"viewPassword\" class=\"passwordField\"  v-model=\"password\" label=\"Password\" variant=\"outlined\"></v-text-field>  \n             <label class=\"forgotTitleLabel\">Forgot password?</label>\n              <button v-if=\"isLogActivated\" class=\"login buttonload\">\n                  <i class=\"fa fa-circle-o-notch fa-spin\"></i> Logging in... \n              </button>\n              <button v-else @click=\"handleLogin\"  v-on:keyup.enter=\"handleLogin\">Log In</button>\n              <label class=\"forgotTitleLabel\" @click=\"handleNavToSignUp\">Don't have an account? <span>Sign Up</span></label>\n              <div class=\"lineContainer\">\n                <div class=\"leftLineView\"></div>\n                <label class=\"orLabel\">OR</label>\n                <div class=\"rightLineView\"></div>\n              </div>\n\n              <div class=\"googleButtonContainer\" @click=\"loginWithGoogle()\">\n                <img src=\"@/assets/google.png\" class=\"googleIcon\">\n                <label class=\"googleTitleLabel\">Continue with Google</label>\n              </div>\n      </div>\n      <!-- <label class=\"signUpLabel\" @click=\"handleSignUpTapped\">Don't have an account? <span class=\"signUpSpan\"> Register here</span></label> -->\n    </div>\n</template>\n<script>\nimport { BASE_URL, PICKMORE_MERCHANT_KEY, SIDE_BAR_MENU_ITEM_KEY } from '@/config';\nimport { ref } from 'vue'\nimport axios from 'axios';\nimport { googleSdkLoaded } from \"vue3-google-login\";\nimport config from '@/config';\nimport CryptoJS from 'crypto-js'\nimport { USER_CACHE_KEY } from '@/config'\nimport APIService from '@/APIService';\n\nexport default {\n  props: {\n    isInvite: false\n  },\n  inject: [\"cryptojs\"],\n  setup() {\n    var email = ref(\"\")\n    var password = ref(\"\")\n    var isLogActivated = ref(false)\n    var showPassword = ref(false)\n    var googleUser = ref(null)\n    var viewPassword = ref(false)\n    return { email, password, isLogActivated, showPassword, googleUser, viewPassword }\n  },\n  mounted() {\n    APIService.init()\n  },\n  computed: {\n    isInvite() {\n      get\n    }\n  },\n  methods: {\n      handleNavToSignUp() {\n        if (this.isInvite) {\n          this.$emit(\"didTapNavToSignUp\")\n        } else {\n          this.$router.push({path: \"/signup\"})\n        }\n      },\n      viewPassword() {\n        this.showPassword = !this.showPassword\n      },\n      async handleLogin() {\n         this.isLogActivated = true \n         var params = {\n            phoneNumber : this.phoneNumber, \n            password: this.password\n          }\n\n        let userInfo = await APIService.login(params)\n        console.log(\"userInfo login info: \", userInfo)\n        if (userInfo.token.length > 0) {\n          userInfo.password = \"\"\n          let token = userInfo.token\n          this.encryptAndNavigate(userInfo, token)\n        }\n      },\n      handleSignUpTapped() {\n        this.$emit('navToRegister', true)\n      }, \n     async loginWithGoogle() {\n      googleSdkLoaded(google => {\n        google.accounts.oauth2\n          .initCodeClient({\n            client_id: config.GOOGLE_AUTH_CLIENT_ID,\n            scope: \"email profile openid\",\n            redirect_uri: \"http://localhost:4000/auth/callback\",\n            callback: response => {\n              if (response.code) {\n                this.sendCodeToBackend(response.code);\n              }\n            }\n          })\n          .requestCode();\n      });\n    },\n    async sendCodeToBackend(code) {\n      try {\n        const response = await axios.post(\n          \"https://oauth2.googleapis.com/token\",\n          {\n            code,\n            client_id: config.GOOGLE_AUTH_CLIENT_ID,\n            client_secret: config.GOOGLE_AUTH_CLEINT_SECRET,\n            redirect_uri: \"postmessage\",\n            grant_type: \"authorization_code\"\n          }\n        );\n        const accessToken = response.data.access_token;\n        // Fetch user details using the access token\n        const userResponse = await axios.get(\n          \"https://www.googleapis.com/oauth2/v3/userinfo\",\n          {\n            headers: {\n              Authorization: `Bearer ${accessToken}`\n            }\n          }\n        );\n\n        if (userResponse && userResponse.data) {\n          // Set the userDetails data property to the userResponse object\n          this.googleUser = userResponse.data;\n          console.log(\"user data: \", userResponse.data)\n          this.handleAuthGoogleUser()\n        } else {\n          // Handle the case where userResponse or userResponse.data is undefined\n          console.error(\"Failed to fetch user details.\");\n        }\n      } catch (error) {\n        console.error(\"Token exchange failed:\", error.response.data);\n      }\n    }, \n   async handleAuthGoogleUser() {\n      if (this.googleUser == null) { return }\n      let gUser = this.googleUser\n      let params = {\n        email: gUser.email, \n        fullName: gUser.name, \n        password: gUser.sub, \n        picture: gUser.picture, \n        isEmailVerified: gUser.email_verified,\n        isViaGoogle: true, \n        id: Date.now()\n      }\n\n      let fullURL = BASE_URL + \"auth/googleAuth\"\n      console.log(\"full url: \", fullURL, \"params: \", params)\n      await axios.post(fullURL, params).then((response) => {\n        if (response.data != null) {\n          let data = response.data\n          if (data.statusCode == 200) {\n            let gUserInfo = data.resp \n            console.log(\"gUserInfo signed up info: \", gUserInfo)\n            gUserInfo.password = \"\"\n            let token = gUserInfo.token\n            this.encryptAndNavigate(gUserInfo, token)\n            } else {\n              alert(data.msg)\n            }\n          }\n        })\n    }, \n     encryptAndNavigate(gUserInfo, token) {\n        let userDataStr = JSON.stringify(gUserInfo)\n        let encyrptedUserData = CryptoJS.AES.encrypt(userDataStr, token).toString()\n        let cacheData = {\n            token: token, \n            user: encyrptedUserData\n        }\n        console.log(\"encrypted data: \", cacheData)\n        localStorage.removeItem(USER_CACHE_KEY)\n        localStorage.setItem(USER_CACHE_KEY, JSON.stringify(cacheData))\n        if (this.isInvite) {\n          this.$emit(\"didLogIn\", gUserInfo)\n        } else {\n          this.$router.push({path: \"/\"})\n        }\n     }\n   }\n}\n</script>\n<style scoped>\n.googleTitleLabel {\n  font-weight: 500;\n  font-size: 16px;\n  margin-top: auto;\n  margin-bottom: auto;\n}\n.googleIcon {\n  margin-left: 10px;\n  width: 40px;\n  height: 40px;\n  object-fit: contain;\n  margin-top: auto;\n  margin-bottom: auto;\n}\n.googleButtonContainer {\n  display: flex;\n  margin-top: 30px;\n  margin-right: auto;\n  margin-left: auto;\n  width: 340px;\n  height: 50px;\n  border: 1px solid var(--color-light);\n  border-radius: var(--border-radius-1);\n}\n.orLabel {\n  width: 30px;\n  height: 30px;\n  font-weight: 600;\n  margin-top: -12px;\n  color: var(--color-dark);\n  margin-left: 10px;\n}\n.leftLineView, .rightLineView {\n  width: 140px;\n  height: 1px;\n  background-color: var(--color-light);\n  margin-left: 30px;\n}\n\n.rightLineView {\n  margin-left: 10px;\n}\n\n.lineContainer {\n  display: flex;\n  margin-top: 50px;\n}\n.brandLogo {\n  width: 60px;\n  height: 60px;\n  margin-top: 30px;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.authContentView {\n  display: flex;\n  flex-direction: column;\n  background-color: var(--color-background);\n  width: 100vw;\n  height: 100vh;\n}\n.signUpLabel {\n  display: block;\n  margin-top: 130px;\n}\n\n.signUpSpan {\n  color: var(--color-blue);\n  font-weight: 600;\n}\n.inputFieldContainer button { \n  margin-top: 30px;\n  width: 340px;\n  height: 50px;\n  margin-right: auto;\n  margin-left: auto;\n  font-weight: 600;\n  font-size: 16px;\n  color: white;\n  background-color: var(--color-bar-dark);\n  border: 0px solid transparent;\n  border-radius: var(--border-radius-1);\n}\n\n.inputFieldContainer {\n  display: flex;\n  flex-direction: column;\n  background-color: white;\n  width: 400px;\n  height: 650px;\n  margin-right: auto;\n  margin-left: auto;\n  border-radius: var(--border-radius-2);\n  margin-top: 50px;\n}\n\n.passwordField, .emailField {\n  width: 340px;\n  max-height: 44px;\n  font-weight: 500;\n  font-size: 20px;\n  margin-right: auto;\n  margin-left: auto;\n  border: 0px solid var(--color-light-primary) !important;\n  border-color: var(--color-light-primary);\n}\n\n.emailField {\n  margin-top: 54px;\n}\n.passwordField {\n  margin-top: 30px;\n}\n\n.forgotTitleLabel {\n  font-weight: 600;\n  font-size: 14px;\n  color: var(--color-dark);\n  margin-top: 30px;\n  float: left;\n  text-align: left;\n  margin-left: 34px;\n}\n.subTitleLabel {\n  color: var(--color-light-primary);\n  font-weight: 300;\n  font-size: 14px;\n}\n\n.titleLabel {\n  display: block;\n  margin-top: 10px;\n  font-weight: 500;\n  font-size: 18px;\n  margin-top: 30px;\n}\n\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}