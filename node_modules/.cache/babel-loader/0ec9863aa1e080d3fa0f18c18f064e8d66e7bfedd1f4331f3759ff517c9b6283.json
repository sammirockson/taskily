{"ast":null,"code":"export default {\n  name: 'PopupWrap',\n  props: {\n    centered: {\n      default: true,\n      type: Boolean\n    },\n    focusElement: {\n      default: null,\n      type: Object\n    },\n    label: {\n      required: true,\n      type: String\n    }\n  },\n  mounted() {\n    const close = e => {\n      const ESC = 27;\n      if (e.keyCode !== ESC) return;\n      this.$emit('close');\n    };\n    document.addEventListener('keyup', close);\n    // this.$on('hook:destroyed', () => {\n    //   document.removeEventListener('keyup', close);\n    // });\n\n    this.activate();\n    // this.$on('hook:destroyed', () => {\n    //   this.deactivate();\n    // });\n  },\n  methods: {\n    activate() {\n      this.previousActiveElement = document.activeElement;\n      this.disableScrolling();\n      this.inert();\n      this.focusFirstDescendant();\n    },\n    async deactivate() {\n      this.enableScrolling();\n      await this.inert(false);\n      this.restoreFocus();\n    },\n    disableScrolling() {\n      this.scrollPosition = window.pageYOffset;\n\n      // Disable scrolling on all devices (including iOS).\n      const $body = document.querySelector('body');\n      $body.style.overflow = 'hidden';\n      $body.style.position = 'fixed';\n      $body.style.top = `-${this.scrollPosition}px`;\n      $body.style.width = '100%';\n    },\n    enableScrolling() {\n      const $body = document.querySelector('body');\n      $body.style.removeProperty('overflow');\n      $body.style.removeProperty('position');\n      $body.style.removeProperty('top');\n      $body.style.removeProperty('width');\n      window.scrollTo(0, this.scrollPosition);\n    },\n    async inert(status = true) {\n      await this.$nextTick();\n      // [...this.$root.$el.children].forEach((child) => {\n      //   if (child === this.$el || child.contains(this.$el)) return;\n      //   child.inert = status;\n      // });\n    },\n    focusFirstDescendant(element) {\n      // const focusable = this.$el.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])');\n      // if (focusable[0] && focusable[0].focus) focusable[0].focus();\n    },\n    restoreFocus() {\n      // const element = this.focusElement || this.previousActiveElement;\n\n      // if (element && element.focus) element.focus();\n    }\n  }\n};","map":{"version":3,"names":["name","props","centered","default","type","Boolean","focusElement","Object","label","required","String","mounted","close","e","ESC","keyCode","$emit","document","addEventListener","activate","methods","previousActiveElement","activeElement","disableScrolling","inert","focusFirstDescendant","deactivate","enableScrolling","restoreFocus","scrollPosition","window","pageYOffset","$body","querySelector","style","overflow","position","top","width","removeProperty","scrollTo","status","$nextTick","element"],"sources":["/Users/samuelrockon/Desktop/Dev/taskily/src/components/PopupBase.vue"],"sourcesContent":["<template>\n    <div\n      role=\"dialog\"\n      aria-modal=\"true\"\n      class=\"PopupWrap\" :class=\"{ 'PopupWrap--centered': centered }\">\n      <div class=\"PopupWrap__backdrop\" @click=\"$emit('close')\">\n        <slot name=\"backdrop\"/>\n      </div>\n      <slot/>\n    </div>\n  </template>\n  \n  <script>\n  export default {\n    name: 'PopupWrap',\n    props: {\n      centered: {\n        default: true,\n        type: Boolean\n      },\n      focusElement: {\n        default: null,\n        type: Object\n      },\n      label: {\n        required: true,\n        type: String\n      }\n    },\n    mounted() {\n      const close = (e) => {\n        const ESC = 27;\n        if (e.keyCode !== ESC) return;\n        this.$emit('close');\n      };\n      document.addEventListener('keyup', close);\n      // this.$on('hook:destroyed', () => {\n      //   document.removeEventListener('keyup', close);\n      // });\n  \n      this.activate();\n      // this.$on('hook:destroyed', () => {\n      //   this.deactivate();\n      // });\n    },\n    methods: {\n      activate() {\n        this.previousActiveElement = document.activeElement;\n  \n        this.disableScrolling();\n        this.inert();\n        this.focusFirstDescendant();\n      },\n      async deactivate() {\n        this.enableScrolling();\n        await this.inert(false);\n        this.restoreFocus();\n      },\n      disableScrolling() {\n        this.scrollPosition = window.pageYOffset;\n  \n        // Disable scrolling on all devices (including iOS).\n        const $body = document.querySelector('body');\n        $body.style.overflow = 'hidden';\n        $body.style.position = 'fixed';\n        $body.style.top = `-${this.scrollPosition}px`;\n        $body.style.width = '100%';\n      },\n      enableScrolling() {\n        const $body = document.querySelector('body');\n        $body.style.removeProperty('overflow');\n        $body.style.removeProperty('position');\n        $body.style.removeProperty('top');\n        $body.style.removeProperty('width');\n  \n        window.scrollTo(0, this.scrollPosition);\n      },\n      async inert(status = true) {\n        await this.$nextTick();\n        // [...this.$root.$el.children].forEach((child) => {\n        //   if (child === this.$el || child.contains(this.$el)) return;\n        //   child.inert = status;\n        // });\n      },\n      focusFirstDescendant(element) {\n        // const focusable = this.$el.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])');\n        // if (focusable[0] && focusable[0].focus) focusable[0].focus();\n      },\n      restoreFocus() {\n        // const element = this.focusElement || this.previousActiveElement;\n  \n        // if (element && element.focus) element.focus();\n      }\n    }\n  }\n  </script>\n  \n  <style>\n  .PopupWrap {\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n  }\n  \n  .PopupWrap--centered {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  \n  .PopupWrap__backdrop {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    z-index: -1;\n  }\n  </style>\n  "],"mappings":"AAaE,eAAe;EACbA,IAAI,EAAE,WAAW;EACjBC,KAAK,EAAE;IACLC,QAAQ,EAAE;MACRC,OAAO,EAAE,IAAI;MACbC,IAAI,EAAEC;IACR,CAAC;IACDC,YAAY,EAAE;MACZH,OAAO,EAAE,IAAI;MACbC,IAAI,EAAEG;IACR,CAAC;IACDC,KAAK,EAAE;MACLC,QAAQ,EAAE,IAAI;MACdL,IAAI,EAAEM;IACR;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,MAAMC,KAAI,GAAKC,CAAC,IAAK;MACnB,MAAMC,GAAE,GAAI,EAAE;MACd,IAAID,CAAC,CAACE,OAAM,KAAMD,GAAG,EAAE;MACvB,IAAI,CAACE,KAAK,CAAC,OAAO,CAAC;IACrB,CAAC;IACDC,QAAQ,CAACC,gBAAgB,CAAC,OAAO,EAAEN,KAAK,CAAC;IACzC;IACA;IACA;;IAEA,IAAI,CAACO,QAAQ,CAAC,CAAC;IACf;IACA;IACA;EACF,CAAC;EACDC,OAAO,EAAE;IACPD,QAAQA,CAAA,EAAG;MACT,IAAI,CAACE,qBAAoB,GAAIJ,QAAQ,CAACK,aAAa;MAEnD,IAAI,CAACC,gBAAgB,CAAC,CAAC;MACvB,IAAI,CAACC,KAAK,CAAC,CAAC;MACZ,IAAI,CAACC,oBAAoB,CAAC,CAAC;IAC7B,CAAC;IACD,MAAMC,UAAUA,CAAA,EAAG;MACjB,IAAI,CAACC,eAAe,CAAC,CAAC;MACtB,MAAM,IAAI,CAACH,KAAK,CAAC,KAAK,CAAC;MACvB,IAAI,CAACI,YAAY,CAAC,CAAC;IACrB,CAAC;IACDL,gBAAgBA,CAAA,EAAG;MACjB,IAAI,CAACM,cAAa,GAAIC,MAAM,CAACC,WAAW;;MAExC;MACA,MAAMC,KAAI,GAAIf,QAAQ,CAACgB,aAAa,CAAC,MAAM,CAAC;MAC5CD,KAAK,CAACE,KAAK,CAACC,QAAO,GAAI,QAAQ;MAC/BH,KAAK,CAACE,KAAK,CAACE,QAAO,GAAI,OAAO;MAC9BJ,KAAK,CAACE,KAAK,CAACG,GAAE,GAAI,IAAI,IAAI,CAACR,cAAc,IAAI;MAC7CG,KAAK,CAACE,KAAK,CAACI,KAAI,GAAI,MAAM;IAC5B,CAAC;IACDX,eAAeA,CAAA,EAAG;MAChB,MAAMK,KAAI,GAAIf,QAAQ,CAACgB,aAAa,CAAC,MAAM,CAAC;MAC5CD,KAAK,CAACE,KAAK,CAACK,cAAc,CAAC,UAAU,CAAC;MACtCP,KAAK,CAACE,KAAK,CAACK,cAAc,CAAC,UAAU,CAAC;MACtCP,KAAK,CAACE,KAAK,CAACK,cAAc,CAAC,KAAK,CAAC;MACjCP,KAAK,CAACE,KAAK,CAACK,cAAc,CAAC,OAAO,CAAC;MAEnCT,MAAM,CAACU,QAAQ,CAAC,CAAC,EAAE,IAAI,CAACX,cAAc,CAAC;IACzC,CAAC;IACD,MAAML,KAAKA,CAACiB,MAAK,GAAI,IAAI,EAAE;MACzB,MAAM,IAAI,CAACC,SAAS,CAAC,CAAC;MACtB;MACA;MACA;MACA;IACF,CAAC;IACDjB,oBAAoBA,CAACkB,OAAO,EAAE;MAC5B;MACA;IAAA,CACD;IACDf,YAAYA,CAAA,EAAG;MACb;;MAEA;IAAA;EAEJ;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}