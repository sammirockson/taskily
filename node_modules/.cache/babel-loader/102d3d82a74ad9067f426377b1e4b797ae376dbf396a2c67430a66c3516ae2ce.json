{"ast":null,"code":"import { ref } from 'vue';\nimport APIService from '@/APIService';\nimport MemberOverlayView from './MemberOverlayView.vue';\nexport default {\n  props: {\n    boardId: {\n      type: String\n    },\n    boardName: {\n      type: String,\n      default: ''\n    }\n  },\n  components: {\n    MemberOverlayView\n  },\n  setup() {\n    var isMemberVisible = ref(false);\n    var members = ref([]);\n    return {\n      isMemberVisible,\n      members\n    };\n  },\n  async mounted() {\n    this.fetchMembers();\n  },\n  methods: {\n    async fetchMembers() {\n      let params = {\n        boardId: this.boardId\n      };\n      let allMembers = await APIService.getBoardMembers(params);\n      this.members = allMembers;\n      console.log(\"allMembers: \", allMembers);\n    },\n    handleShowMembers() {\n      this.isMemberVisible = true;\n    }\n  }\n  // Invitation link will be baseURL + invitation + b + inviter\n  // https://trello.com/invite/b/5a168f578b36137f5cc81d7d/ATTI4c914267f82abd2db86a9a3da1405d3f5C34B7BA/ford-dst-tech-tasks\n  // https://wwww.zinlo.com/invitation/b/1722579902069/i/66a6f66276e1d70286f59bec\n  // b = boardId permissionType m for member, a for admin\n};","map":{"version":3,"names":["ref","APIService","MemberOverlayView","props","boardId","type","String","boardName","default","components","setup","isMemberVisible","members","mounted","fetchMembers","methods","params","allMembers","getBoardMembers","console","log","handleShowMembers"],"sources":["/Users/Sam.Agyemang/Desktop/Dev/taskily/src/components/BoardNavItemsView.vue"],"sourcesContent":["<template>\n    <div class=\"boardNavItems\">\n    <div class=\"leftContentView\">\n       <label class=\"boardNameLabel\">{{ boardName }}</label>\n       <div class=\"taskNotificationContainer\">\n            <button @click=\"handleCreateBoard()\">       \n            <span class=\"material-symbols-outlined\">add</span>\n            New Board</button>\n       </div>      \n       <v-overlay  v-model=\"isCreateBoard\" class=\"align-center justify-center\" contained>\n           <CreateNewBoardView @closeOverlay=\"handleCloseOverlay\"/>\n        </v-overlay>\n    </div>\n    <div class=\"search-container\">\n        <img src=\"../assets/search.png\" alt=\"\">\n        <input type=\"text\" placeholder=\"Search board\">\n    </div>\n    <div class=\"filter-container\">\n        <img src=\"../assets/filter.svg\" alt=\"\">\n        <label for=\"\">Filter</label>\n        <img src=\"../assets/arrow-down.png\" alt=\"\">\n    </div>\n    <div class=\"membersContainer\">\n         <div class=\"profile-cell\" v-for=\"(member, index) in members\" :key=\"index\">\n            <span class=\"profileIcon\"> <img :src=\"member.picture.length > 0 ? member.picture : require('@/assets/orange_default.png')\"></span>\n         </div>\n        <label for=\"\">+99</label>\n    </div>\n    <div class=\"inviteContentView\" @click=\"handleShowMembers\">\n        <img src=\"@/assets/membersDark.png\" class=\"memberIcon\">\n        <label for=\"\">Members</label>\n    </div>\n    <div class=\"themeToggler\" @click=\"handleThemeToggle\">\n        <span class=\"material-symbols-sharp active\" id=\"lightMode\">light_mode</span>\n        <span class=\"material-symbols-sharp\" id=\"darmMode\">dark_mode</span>\n    </div>\n    <img src=\"@/assets/notification.png\" class=\"notificationIcon\">\n    <v-overlay v-model=\"isMemberVisible\" class=\"align-top justify-end overLayContainer\"  contained>\n        <MemberOverlayView class=\"membersOverlayContainer\" :boardId=\"boardId\"></MemberOverlayView>\n    </v-overlay>\n   </div>\n</template>\n<script>\nimport { ref } from 'vue'\nimport APIService from '@/APIService';\nimport MemberOverlayView from './MemberOverlayView.vue';\nexport default {\n    props: {\n        boardId: {\n            type: String\n        }, \n        boardName: {\n            type: String, \n            default: ''\n        }\n    },\n    components: {\n        MemberOverlayView\n    },\n    setup() {\n        var isMemberVisible = ref(false)\n        var members = ref([])\n        return { isMemberVisible, members }\n    }, \n    async mounted() {\n        this.fetchMembers()\n    },\n    methods: {\n        async fetchMembers() {\n        let params = {\n            boardId: this.boardId\n         }\n         let allMembers = await APIService.getBoardMembers(params)\n         this.members = allMembers\n         console.log(\"allMembers: \", allMembers)\n        },\n        handleShowMembers() {\n            this.isMemberVisible = true    \n        }\n    }\n    // Invitation link will be baseURL + invitation + b + inviter\n    // https://trello.com/invite/b/5a168f578b36137f5cc81d7d/ATTI4c914267f82abd2db86a9a3da1405d3f5C34B7BA/ford-dst-tech-tasks\n    // https://wwww.zinlo.com/invitation/b/1722579902069/i/66a6f66276e1d70286f59bec\n    // b = boardId permissionType m for member, a for admin\n}\n</script>\n<style scoped>\n.profileImage {    \n    height: 40px;\n    width: 40px;\n    border-radius: 50%;\n    margin-top: auto;\n    margin-bottom: auto;\n    margin-right: 15px;\n}\n.themeToggler span.active {\n    background-color: var(--color-bar-dark);\n    color: white;\n    border-radius: var(--border-radius-1);\n}\n\n.themeToggler span {\n    height: 100%;\n    width: 50%;\n    padding-top: 8px;\n}\n\n.themeToggler {\n    display: flex;\n    margin-top: auto;\n    margin-bottom: auto;\n    margin-right: 20px;\n    width: 100px;\n    height: 38px;\n    border-radius: var(--border-radius-1);\n    background-color: var(--color-light);\n    justify-content: space-between;\n    align-items: center;\n    justify-content: center;\n}\n.taskNotificationContainer button {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    color: white;\n    padding-left: 15px;\n    margin-top: auto;\n    margin-bottom: auto;\n    font-weight: 500;\n}\n.notificationIcon {\n    width: 34px;\n    height: 34px;\n    border-radius: 4px;\n    margin-top: auto;\n    margin-bottom: auto;\n    margin-left: 15px;\n}\n.searchContainer {\n    width: calc(100% - 340px);\n    height: 50px;\n    padding-right: 400px;\n    padding-left: 20px;\n\n}\n.taskNotificationContainer {\n    width: 150px;\n    height: 44px;\n    display: flex;\n    flex-direction: row;\n    background-color: var(--color-bar-dark);\n    border-radius: var(--border-radius-2);\n    margin-right: 30px;\n    margin-top: auto;\n    margin-bottom: auto;\n}\n\n.search-container input {\n    font-weight: 400;\n    font-size: 14px;\n    width: 90%;\n    color: var(--color-dark-blue);\n}\n.search-container:focus, input:focus{\n    outline: none;\n}\n.filter-container, .search-container {\n    display: flex;\n    align-items: center;\n    height: 34px;\n    border-radius: var(--border-radius-1);\n    background-color: white;\n    gap: 8px;\n    padding-right: 8px;\n    padding-left: 8px;\n    margin-top: auto;\n    margin-bottom: auto;\n    margin-right: 20px;\n}\n.search-container {\n    width: 280px;\n    background-color: white;\n}\n.filter-container img, .search-container img {\n    object-fit: contain;\n    height: 20px;\n    width: 20px;\n}\n.filter-container {\n    justify-content: center;\n    width: 110px;\n}\n.defaultImage label {\n    color: white;\n    font-weight: 500;\n    font-size: 12px;\n}\n.defaultImage {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 28px;\n    width: 28px;\n    border-radius: 15px;\n    background-color: brown;\n    color: white;\n    margin-left: -12px;\n}\n.profileIcon img {\n  border-radius: 50%;\n  position: relative;\n  margin-left: -12px;\n  height: 28px;\n  width: 28px;\n  padding: 1px;\n  background-color: white;\n  margin-top: 4px;\n}\n.membersContainer {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 140px;\n    height: 100%;\n    float: right;\n    padding-right: 10px;\n    direction: ltr;  /* This is to get the stack with left on top */\n    padding-left: 20px;\n}\n\n.membersContainer label {\n    display: block;\n    font-weight: 500;\n    font-size: 13px;\n    margin-left: 4px;\n    color: white;\n}\n.boardNameLabel {\n    display: flex;\n    align-items: center;\n    color: white;\n    width: 200px;\n    height: 40px;\n    font-weight: 600;\n    font-size: 20px;\n    text-align: left;\n    margin-left: 10px;\n}\n.membersOverlayContainer {\n    display: flex;\n    flex-direction: column;\n    height: 700px;\n    width: 400px;\n    background-color: white;\n    border-radius: var(--border-radius-1);\n    margin-top: 110px;\n    margin-right: 8px;\n}\n.memberIcon {\n    width: 20px;\n    height: 20px;\n}\n.inviteContentView label {\n    font-weight: 500;\n    font-size: 14px;\n    color: var(--color-dark-blue);\n}\n.inviteContentView {\n    display: flex;\n    border-radius: 4px;\n    height: 34px;\n    width: 120px;\n    background-color: var(--color-card-background);\n    justify-content: center;\n    align-items: center;\n    gap: 8px;\n    row-gap: 8px;\n    margin-top: auto;\n    margin-bottom: auto;\n}\n.leftContentView {\n    display: flex;\n    align-items: center;\n    width: 40%;\n}\n.boardNavItems {\n    display: flex;\n    height: 100%;\n    width: 100%;\n    justify-content: space-between;\n    padding-right: 15px;\n    padding-left: 15px;\n}\n    \n</style>"],"mappings":"AA2CA,SAASA,GAAE,QAAS,KAAI;AACxB,OAAOC,UAAS,MAAO,cAAc;AACrC,OAAOC,iBAAgB,MAAO,yBAAyB;AACvD,eAAe;EACXC,KAAK,EAAE;IACHC,OAAO,EAAE;MACLC,IAAI,EAAEC;IACV,CAAC;IACDC,SAAS,EAAE;MACPF,IAAI,EAAEC,MAAM;MACZE,OAAO,EAAE;IACb;EACJ,CAAC;EACDC,UAAU,EAAE;IACRP;EACJ,CAAC;EACDQ,KAAKA,CAAA,EAAG;IACJ,IAAIC,eAAc,GAAIX,GAAG,CAAC,KAAK;IAC/B,IAAIY,OAAM,GAAIZ,GAAG,CAAC,EAAE;IACpB,OAAO;MAAEW,eAAe;MAAEC;IAAQ;EACtC,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACZ,IAAI,CAACC,YAAY,CAAC;EACtB,CAAC;EACDC,OAAO,EAAE;IACL,MAAMD,YAAYA,CAAA,EAAG;MACrB,IAAIE,MAAK,GAAI;QACTZ,OAAO,EAAE,IAAI,CAACA;MACjB;MACA,IAAIa,UAAS,GAAI,MAAMhB,UAAU,CAACiB,eAAe,CAACF,MAAM;MACxD,IAAI,CAACJ,OAAM,GAAIK,UAAS;MACxBE,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEH,UAAU;IACvC,CAAC;IACDI,iBAAiBA,CAAA,EAAG;MAChB,IAAI,CAACV,eAAc,GAAI,IAAG;IAC9B;EACJ;EACA;EACA;EACA;EACA;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}