{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport NavBar from '@/components/NavBarView.vue';\nimport CardDetailView from '@/components/PopOverCardView.vue';\nimport DraggableView from 'vuedraggable';\nimport CardView from '@/views/CardView.vue';\nimport { ref } from 'vue';\nimport { BASE_URL } from '@/config';\nimport axios from 'axios';\nexport default {\n  inject: [\"eventBus\"],\n  props: [\"isExpanded\"],\n  components: {\n    NavBar,\n    CardView,\n    CardDetailView,\n    DraggableView\n  },\n  setup() {\n    var isSideBarExpanded = ref(true);\n    var board = ref([]);\n    var isCardTapped = ref(false);\n    var newCardName = ref(\"\");\n    var newListName = ref(\"\");\n    var boardId = ref(\"\");\n    var selectedCard = ref(Object);\n    var selectedList = ref(Object);\n    var allCards = ref([]);\n    var isSavingCard = ref(false);\n    return {\n      isSideBarExpanded,\n      board,\n      newCardName,\n      newListName,\n      isCardTapped,\n      boardId,\n      selectedCard,\n      selectedList,\n      allCards,\n      isSavingCard\n    };\n  },\n  methods: {\n    listNameTextAreaGrow(listId) {\n      let element = document.getElementById(listId); // cardNameId\n      console.log(\"lstid: \", listId, \"element: \", element == null);\n      if (element != null) {\n        element.style.height = \"15px\";\n        element.style.height = element.scrollHeight + \"px\";\n      }\n    },\n    didEditListName(listName) {\n      console.log(\"didEditListName: \", listName);\n    },\n    sortedCards(cards) {\n      return cards.sort((a, b) => a.position - b.position);\n    },\n    async setListEmpty(listId) {\n      var params = {\n        listId: listId\n      };\n      var fullURL = BASE_URL + \"board/setEmptyList\";\n      await axios.post(fullURL, params).then(response => {\n        if (response.data != null) {\n          let data = response.data;\n          console.log(\"resp data: \", data);\n          if (data.statusCode == 200) {\n            console.log(\"list and card info updated: \", data.resp);\n          }\n        }\n      });\n    },\n    async updateBoardInfo(cards, cardIds, list_id, listId) {\n      var params = {\n        cards: cards,\n        cardIds: cardIds,\n        listId: listId,\n        list_id: list_id\n      };\n      var fullURL = BASE_URL + \"board/updateList\";\n      await axios.post(fullURL, params).then(response => {\n        if (response.data != null) {\n          let data = response.data;\n          if (data.statusCode == 200) {\n            console.log(\"list and card info updated: \", data.resp);\n          }\n        }\n      });\n    },\n    onCardMoved(e) {\n      console.log(\"onCardMoved: \", e);\n      let item = e.added || e.removed || e.moved;\n      if (e.removed != null) {\n        // Removed: removed from one list to another\n        for (var listIndex in this.board.lists) {\n          var list = this.board.lists[listIndex];\n          let list_id = list._id;\n          let listId = list.id;\n          if (list.cards.length > 0) {\n            var cards = [];\n            var cardIds = [];\n            for (var cardPosition in list.cards) {\n              let card = list.cards[cardPosition];\n              card.position = cardPosition;\n              cardIds.push(card.id);\n              cards.push({\n                id: card.id,\n                position: cardPosition\n              });\n            }\n            this.updateBoardInfo(cards, cardIds, list_id, listId);\n          } else {\n            // set list empty\n            this.setListEmpty(list_id);\n          }\n        }\n        // this.getBoardBy(this.boardId)\n      }\n      if (e.moved != null) {\n        // moved: moved within the same list\n        let listId = e.moved.element.listId;\n        console.log(\"moved: \", e.moved.element, \"listId: \", listId);\n        let listIndex = this.board.lists.findIndex(x => x.id === listId);\n        let list = this.board.lists[listIndex];\n        let list_id = list._id;\n        var cards = [];\n        var cardIds = [];\n        for (var cardPosition in list.cards) {\n          let card = list.cards[cardPosition];\n          card.position = cardPosition;\n          cardIds.push(card.id);\n          cards.push({\n            id: card.id,\n            position: cardPosition\n          });\n        }\n        this.updateBoardInfo(cards, cardIds, list_id, listId);\n      }\n    },\n    handleOverlayDismissed() {\n      this.isCardTapped = false;\n      // let path = \"/board/\" + this.boardId\n      // this.$router.push({path: path})\n      this.$router.go(-1);\n      // this.getBoardBy(this.boardId)\n    },\n    handleCardTapped(card, list) {\n      // this.isCardTapped = true \n      // this.eventBus.emit('cardOpened', card)\n      // this.selectedCard = card\n      // this.selectedList = list\n      // emitter.emit('cardOpened', card);\n      // EventBus.$emit('cardOpened', card);\n      // 'b/:id/c/:id'\n      let path = \"/b/\" + this.boardId;\n      this.$router.push({\n        path: path,\n        query: {\n          card: card._id\n        }\n      });\n    },\n    async createANewList(list, index) {\n      // Create List\n      var params = {\n        listName: this.newListName,\n        boardId: this.boardId,\n        isAddCard: true,\n        isCreateList: false,\n        headerType: \"showListName\",\n        id: Date.now(),\n        owner: \"1721545684258\"\n      };\n      var fullURL = BASE_URL + \"board/newList\";\n      console.log(\"full url: \", fullURL, \"params: \", params);\n      await axios.post(fullURL, params).then(response => {\n        if (response.data != null) {\n          let data = response.data;\n          console.log(\"resp data: \", data);\n          if (data.statusCode == 200) {\n            console.log(\"created new list: \", data.resp);\n            this.getBoardBy(this.boardId);\n          }\n        }\n      });\n      this.newListName = \"\";\n    },\n    handleAddList(list, index) {\n      list.isCreateList = true;\n      list.headerType = \"creatingList\";\n      this.board.lists[index] = list;\n    },\n    dynamicTextArea(index) {\n      let element = document.getElementById(\"createNewListField_id\");\n      element.style.height = \"15px\";\n      element.style.height = element.scrollHeight + \"px\";\n    },\n    autoGrow(index) {\n      let element = document.getElementById(`newCardField_` + index);\n      element.style.height = \"15px\";\n      element.style.height = element.scrollHeight + \"px\";\n    },\n    async handleCreateCard(list, index) {\n      var params = {\n        cardName: this.newCardName,\n        boardId: this.boardId,\n        listId: list.id,\n        id: Date.now(),\n        owner: \"1721545684258\"\n      };\n      var fullURL = BASE_URL + \"board/newCard\";\n      console.log(\"full url: \", fullURL, \"params: \", params);\n      await axios.post(fullURL, params).then(response => {\n        if (response.data != null) {\n          let data = response.data;\n          console.log(\"card resp data: \", data);\n          if (data.statusCode == 200) {\n            console.log(\"created new card: \", data.resp);\n            this.getBoardBy(this.boardId);\n          }\n        }\n      });\n      this.newCardName = \"\";\n    },\n    handleAddCard(list, index) {\n      list.isCreateCard = true;\n      this.board[index] = list;\n    },\n    async getBoardBy(boardId) {\n      var params = {\n        boardId: boardId\n      };\n      var fullURL = BASE_URL + \"board/byId\";\n      await axios.post(fullURL, params).then(response => {\n        if (response.data != null) {\n          let data = response.data;\n          if (data.statusCode == 200) {\n            let apiBoard = data.resp;\n            apiBoard.lists.push({\n              id: \"listPlaceholder\",\n              listName: \"Add New List\",\n              headerType: \"addList\",\n              footerType: \"add\",\n              isAddCard: false,\n              isCreateList: false,\n              cards: []\n            });\n            apiBoard.lists.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));\n            for (var listIndex in apiBoard.lists) {\n              let cards = this.sortedCards(apiBoard.lists[listIndex].cards);\n              apiBoard.lists[listIndex].cards = cards;\n              this.allCards.push(cards);\n            }\n            this.board = apiBoard;\n          }\n        }\n      });\n    },\n    async getCardBy(card_id) {\n      var params = {\n        card_id: card_id\n      };\n      var fullURL = BASE_URL + \"board/getCardDetail\";\n      await axios.post(fullURL, params).then(response => {\n        if (response.data != null) {\n          let data = response.data;\n          console.log(\"card data: \", data);\n          if (data.statusCode == 200) {\n            let resp = data.resp;\n            if (resp != null) {\n              this.selectedCard = resp.card;\n              this.selectedList = resp.list;\n              this.isCardTapped = true;\n              this.$emit('cardDetailInfo', resp);\n            }\n          }\n        }\n      });\n    }\n  },\n  watch: {\n    isExpanded: function (newVal, oldVal) {\n      console.log('Prop changed isSideBarExpanwded: ', newVal);\n      this.isSideBarExpanded = newVal;\n    },\n    '$route'() {\n      console.log(\"routed called\");\n    }\n  },\n  mounted() {\n    let query = this.$route.query;\n    let routeParams = this.$route.params;\n    console.log(\"routeParams: \", routeParams);\n    console.log(\"query: \", query);\n    this.boardId = routeParams.id;\n    this.getBoardBy(this.boardId);\n    if (query.card != null) {\n      // Fetch card info\n      this.getCardBy(query.card);\n    }\n  },\n  created() {\n    console.log(\"updated\");\n  },\n  updated() {\n    let query = this.$route.query;\n    console.log(\"updated\", this.$route.query);\n    if (query.card != null) {\n      // Fetch card info\n      this.getCardBy(query.card);\n    }\n  }\n};","map":{"version":3,"names":["NavBar","CardDetailView","DraggableView","CardView","ref","BASE_URL","axios","inject","props","components","setup","isSideBarExpanded","board","isCardTapped","newCardName","newListName","boardId","selectedCard","Object","selectedList","allCards","isSavingCard","methods","listNameTextAreaGrow","listId","element","document","getElementById","console","log","style","height","scrollHeight","didEditListName","listName","sortedCards","cards","sort","a","b","position","setListEmpty","params","fullURL","post","then","response","data","statusCode","resp","updateBoardInfo","cardIds","list_id","onCardMoved","e","item","added","removed","moved","listIndex","lists","list","_id","id","length","cardPosition","card","push","findIndex","x","handleOverlayDismissed","$router","go","handleCardTapped","path","query","createANewList","index","isAddCard","isCreateList","headerType","Date","now","owner","getBoardBy","handleAddList","dynamicTextArea","autoGrow","handleCreateCard","cardName","handleAddCard","isCreateCard","apiBoard","footerType","createdAt","getCardBy","card_id","$emit","watch","isExpanded","newVal","oldVal","$route","mounted","routeParams","created","updated"],"sources":["/Users/samuelrockon/Desktop/Dev/taskily/src/components/BoardContentView.vue"],"sourcesContent":["<template>\n    <div>\n        <NavBar :isExpanded=\"this.isSideBarExpanded\"/>\n        <div class=\"boardBNavBar\">\n\n        </div>\n        <div class=\"mainBoardConentView\">\n            <div class=\"boardListsContainer\">\n                 <div class=\"listContainer\" v-for=\"(list, index) in this.board.lists\" :key=\"list.id\">\n                    <div class=\"createNewList\" :style=\"{display: list.headerType ==  `creatingList` ? 'flex' : 'none'}\">\n                            <textarea name=\"text\" v-model=\"newListName\" @input=\"dynamicTextArea(index)\" placeholder=\"Create New List\" class=\"createNewListField\" id=\"createNewListField_id\"></textarea>\n                            <button v-if=\"isSavingCard\" class=\"addListBtn buttonload\">\n                               <i class=\"fa fa-circle-o-notch fa-spin\"></i> Creating... \n                            </button>\n                           <button v-else class=\"addListBtn\" @click=\"createANewList(list, index)\">Create List</button>\n                    </div>\n                    <div class=\"listFooterView\" @click=\"handleAddList(list, index)\" :style=\"{display: list.headerType ==  `addList` ? 'flex' : 'none'}\">\n                        <span id=\"addIcon\" class=\"material-symbols-outlined\">add</span>\n                        <div class=\"footerTitleContainer\">\n                            <button class=\"addCardLabel\">New List</button>\n                        </div>\n                     </div>\n                     <div class=\"listHeaderView\" :style=\"{display: list.headerType ==  `showListName` ? 'flex' : 'none'}\">\n                         <div class=\"badgeAndTitleContainer\">\n                            <div class=\"colorBadge\"></div>\n                            <textarea type=\"text\" v-on:blur=\"didEditListName(list.listName)\"  @input=\"listNameTextAreaGrow(list.id)\" class=\"cardNameField\" :id=\"list.listId\" v-model=\"list.listName\"></textarea>\n                            <!-- <label class=\"listNameLabel\">{{ list.listName }}</label> -->\n                         </div>\n                         <img src=\"@/assets/three_dots.png\" class=\"listNameLabel\"></img>\n                     </div>\n                     <div class=\"cardAndFooterContainer\">\n                        <DraggableView v-model=\"list.cards\" \n                             group=\"allCards\" \n                             item-key=\"id\"\n                             drag-class=\"drag\"\n                             ghost-class=\"ghost\"\n                             @change=\"onCardMoved\">\n                           <template #item=\"{element}\">\n                            <CardView :card=\"element\" @click=\"handleCardTapped(element, list)\"></CardView>\n                           </template>\n                       </DraggableView>\n                        <div v-if=\"list.isCreateCard == true\" class=\"createListContainer\">\n                            <textarea name=\"text\" v-model=\"newCardName\" @input=\"autoGrow(index)\" placeholder=\"Give your card a name\" class=\"addListInputField\" :id=\"`newCardField_` + index\"></textarea>\n                            <button v-if=\"isSavingCard\" class=\"addListBtn buttonload\">\n                               <i class=\"fa fa-circle-o-notch fa-spin\"></i> Adding... \n                            </button>\n                           <button v-else class=\"addListBtn\" @click=\"handleCreateCard(list, index)\">Add Card</button>\n                        </div>\n                      <div v-else v-if=\"list.cards != null && list.cards.length > 0 || list.isAddCard == true\" class=\"listFooterView\" @click=\"handleAddCard(list, index)\">\n                        <span id=\"addIcon\" class=\"material-symbols-outlined\">add</span>\n                        <div class=\"footerTitleContainer\">\n                            <button class=\"addCardLabel\">New Card</button>\n                        </div>\n                       </div>\n                      \n                    </div>\n                    \n                 </div>\n\n           </div>\n        </div>\n        <v-overlay v-model=\"isCardTapped\" class=\"align-center justify-center overLayContainer\" contained>\n            <CardDetailView :card=\"this.selectedCard\" :list=\"this.selectedList\" @overlayDismissed=\"handleOverlayDismissed\"/>\n        </v-overlay>\n    </div>\n</template>\n<script>\nimport NavBar from '@/components/NavBarView.vue'\nimport CardDetailView from '@/components/PopOverCardView.vue'\nimport DraggableView from 'vuedraggable'\nimport CardView from '@/views/CardView.vue'\nimport { ref } from 'vue'\nimport { BASE_URL } from '@/config'\nimport axios from 'axios';\n\nexport default {\n    inject: [\"eventBus\"],\n    props: [\"isExpanded\"],\n    components: {\n        NavBar, CardView, CardDetailView, DraggableView\n    }, \n    setup() {\n        var isSideBarExpanded = ref(true)\n        var board = ref([])\n        var isCardTapped = ref(false)\n        var newCardName = ref(\"\")\n        var newListName = ref(\"\")\n        var boardId = ref(\"\")\n        var selectedCard = ref(Object)\n        var selectedList = ref(Object)\n        var allCards = ref([])\n        var isSavingCard = ref(false)\n        return { isSideBarExpanded, board, newCardName, newListName, isCardTapped , boardId, selectedCard, selectedList, allCards, isSavingCard}\n    },\n    methods: {\n        listNameTextAreaGrow(listId) {\n            let element = document.getElementById(listId) // cardNameId\n            console.log(\"lstid: \", listId, \"element: \", element == null)\n            if (element != null) {\n                element.style.height = \"15px\";\n                element.style.height = (element.scrollHeight) + \"px\";\n            }\n        },\n        didEditListName(listName) {\n            console.log(\"didEditListName: \", listName)\n        },\n        sortedCards(cards) {\n            return cards.sort((a,b)=> a.position - b.position)\n        },\n        async setListEmpty(listId) {\n         var params = {\n            listId: listId\n        }\n        var fullURL = BASE_URL + \"board/setEmptyList\"\n        await axios.post(fullURL, params).then((response) => {\n          if (response.data != null) {\n            let data = response.data\n            console.log(\"resp data: \", data)\n            if (data.statusCode == 200) {\n                console.log(\"list and card info updated: \", data.resp)\n              }\n             }\n          })\n        },\n       async updateBoardInfo(cards, cardIds, list_id, listId) {\n        var params = {\n            cards: cards, \n            cardIds: cardIds, \n            listId: listId, \n            list_id: list_id\n        }\n        var fullURL = BASE_URL + \"board/updateList\"\n        await axios.post(fullURL, params).then((response) => {\n          if (response.data != null) {\n            let data = response.data\n            if (data.statusCode == 200) {\n                console.log(\"list and card info updated: \", data.resp)\n              }\n             }\n          })\n      },\n      onCardMoved(e) {\n       console.log(\"onCardMoved: \", e) \n       let item = e.added || e.removed || e.moved; \n       if (e.removed != null) { // Removed: removed from one list to another\n        for (var listIndex in this.board.lists) {\n          var list = this.board.lists[listIndex]\n          let list_id = list._id\n          let listId = list.id\n          if (list.cards.length > 0) {\n            var cards = []\n            var cardIds = []\n             for (var cardPosition in list.cards) {\n                let card = list.cards[cardPosition]\n                card.position = cardPosition\n                cardIds.push(card.id)\n                cards.push({id: card.id, position: cardPosition})\n             }\n             this.updateBoardInfo(cards, cardIds, list_id, listId)\n          } else {\n            // set list empty\n            this.setListEmpty(list_id)\n          }\n        }\n        // this.getBoardBy(this.boardId)\n      }\n\n      if (e.moved != null) { // moved: moved within the same list\n        let listId = e.moved.element.listId\n        console.log(\"moved: \", e.moved.element, \"listId: \", listId)\n        let listIndex = this.board.lists.findIndex(x => x.id === listId);\n        let list = this.board.lists[listIndex]\n        let list_id = list._id\n        var cards = []\n        var cardIds = []\n        for (var cardPosition in list.cards) {\n            let card = list.cards[cardPosition]\n            card.position = cardPosition\n            cardIds.push(card.id)\n            cards.push({id: card.id, position: cardPosition})\n        }\n        this.updateBoardInfo(cards, cardIds, list_id, listId)\n      }\n      \n\n    },\n        handleOverlayDismissed() {\n            this.isCardTapped = false \n            // let path = \"/board/\" + this.boardId\n            // this.$router.push({path: path})\n            this.$router.go(-1)\n            // this.getBoardBy(this.boardId)\n        },\n        handleCardTapped(card, list) {\n            // this.isCardTapped = true \n            // this.eventBus.emit('cardOpened', card)\n            // this.selectedCard = card\n            // this.selectedList = list\n            // emitter.emit('cardOpened', card);\n            // EventBus.$emit('cardOpened', card);\n            // 'b/:id/c/:id'\n            let path = \"/b/\" + this.boardId\n            this.$router.push(\n                {\n                    path: path, \n                    query: {\n                        card: card._id\n                    }\n                })\n\n        },\n      async createANewList(list, index) {\n        // Create List\n        var params = {\n          listName: this.newListName,\n          boardId: this.boardId,\n          isAddCard: true, \n          isCreateList: false,\n          headerType: \"showListName\",\n          id: Date.now(), \n          owner: \"1721545684258\"\n        }\n        var fullURL = BASE_URL + \"board/newList\"\n        console.log(\"full url: \", fullURL, \"params: \", params)\n        await axios.post(fullURL, params).then((response) => {\n          if (response.data != null) {\n            let data = response.data\n            console.log(\"resp data: \", data)\n            if (data.statusCode == 200) {\n                console.log(\"created new list: \", data.resp)\n                this.getBoardBy(this.boardId)\n              }\n             }\n          })\n          this.newListName = \"\"\n    },\n        handleAddList(list, index) {\n            list.isCreateList = true \n            list.headerType = \"creatingList\"\n            this.board.lists[index] = list\n        },\n        dynamicTextArea(index) {\n            let element = document.getElementById(\"createNewListField_id\")\n            element.style.height = \"15px\";\n            element.style.height = (element.scrollHeight) + \"px\";\n        },\n        autoGrow(index) {\n            let element = document.getElementById(`newCardField_` + index)\n            element.style.height = \"15px\";\n            element.style.height = (element.scrollHeight) + \"px\";\n        },\n       async handleCreateCard(list, index) {\n          var params = {\n             cardName: this.newCardName,\n             boardId: this.boardId,\n             listId: list.id,\n             id: Date.now(), \n             owner: \"1721545684258\"\n         }\n         var fullURL = BASE_URL + \"board/newCard\"\n         console.log(\"full url: \", fullURL, \"params: \", params)\n         await axios.post(fullURL, params).then((response) => {\n          if (response.data != null) {\n            let data = response.data\n            console.log(\"card resp data: \", data)\n            if (data.statusCode == 200) {\n                console.log(\"created new card: \", data.resp)\n                this.getBoardBy(this.boardId)\n              }\n             }\n          })\n          this.newCardName = \"\"\n        },\n        handleAddCard(list, index) {\n            list.isCreateCard = true \n            this.board[index] = list\n        }, \n     async getBoardBy(boardId) {\n        var params = {\n            boardId: boardId\n        }\n        var fullURL = BASE_URL + \"board/byId\"\n        await axios.post(fullURL, params).then((response) => {\n          if (response.data != null) {\n            let data = response.data\n            if (data.statusCode == 200) {\n                let apiBoard = data.resp\n                apiBoard.lists.push({ id: \"listPlaceholder\", listName: \"Add New List\", headerType: \"addList\", footerType: \"add\", isAddCard: false, isCreateList: false, cards: []})\n                apiBoard.lists.sort((a,b)=> new Date(a.createdAt) - new Date(b.createdAt))\n                for (var listIndex in apiBoard.lists) {\n                    let cards = this.sortedCards(apiBoard.lists[listIndex].cards)\n                    apiBoard.lists[listIndex].cards = cards\n                    this.allCards.push(cards)\n                }\n                this.board = apiBoard\n              }\n             }\n          })\n        }, \n     async getCardBy(card_id) {\n        var params = {\n            card_id: card_id\n        }\n        var fullURL = BASE_URL + \"board/getCardDetail\"\n        await axios.post(fullURL, params).then((response) => {\n          if (response.data != null) {\n            let data = response.data\n            console.log(\"card data: \", data)\n            if (data.statusCode == 200) {\n                let resp = data.resp\n                if (resp != null) {\n                   this.selectedCard = resp.card\n                   this.selectedList = resp.list\n                   this.isCardTapped = true \n                   this.$emit('cardDetailInfo', resp)\n                }\n                \n              }\n             }\n          })\n        }\n    },\n    watch: { \n        isExpanded: function(newVal, oldVal) {\n            console.log('Prop changed isSideBarExpanwded: ', newVal)\n            this.isSideBarExpanded = newVal\n        }, \n        '$route' () {\n          console.log(\"routed called\")\n        }\n    },  \n    mounted() {\n        let query = this.$route.query\n        let routeParams = this.$route.params\n        console.log(\"routeParams: \", routeParams)\n        console.log(\"query: \", query)\n        this.boardId = routeParams.id\n        this.getBoardBy(this.boardId)\n        if (query.card != null) {\n            // Fetch card info\n            this.getCardBy(query.card)\n        }\n    }, \n    created() {\n        console.log(\"updated\")\n    },\n    updated() {\n        let query = this.$route.query\n        console.log(\"updated\", this.$route.query)\n        if (query.card != null) {\n            // Fetch card info\n            this.getCardBy(query.card)\n        }\n    }\n}\n</script>\n<style scoped>\n.drag {\n  transform: rotate(5deg);\n}\n \n.ghost {\n  background: lightgray;\n  border-radius: 6px;\n}\n.ghost {\n  visibility: hidden;\n}\n\n.boardInfoView label {\n    font-weight: 500;\n    font-size: 10px;\n    margin-right: 8px;\n    margin-left: 1px;\n}\n.boardIcon {\n    width: 15px;\n    height: 15px;\n}\n.boardInfoView {\n    display: flex;\n    width: 120px;\n    height: 50px;\n    justify-content: space-evenly;\n    margin-top: 5px;\n}\n\n.cardNameLabel {\n    width: 200px;\n    margin-top: 8px;\n    margin-left: 10px;\n    margin-right: 10px;\n    font-weight: 700;\n    font-size: 13px;\n    text-align: left;\n    white-space: pre-wrap;\n}\n\n.footerTitleContainer {\n    width: auto;\n    height: 24px;\n    margin-top: 12px;\n    overflow: hidden;\n}\n#addIcon {\n    padding: 0;\n    margin: 0;\n    margin-top: 12px;\n    font-weight: 700;\n}\n\n.addCardLabel {\n    margin: 0;\n    padding: 0;\n    font-weight: 600;\n    font-size: 15px;\n    margin-left: 4px;\n}\n.cardAndFooterContainer {\n    height: 100%;\n    width: 100%;\n    overflow-y: scroll;\n    -webkit-overflow-scrolling: touch;\n    padding-bottom: 50px;\n    -ms-overflow-style: none;  /* Internet Explorer 10+ */\n    scrollbar-width: none;  /* Firefox */\n    padding-top: 8px;\n}\n.listFooterView {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    height: 50px;\n    width: 100%;\n    border-radius: var(--border-radius-1);\n    border: 1px solid var(--color-light);\n    z-index: 9999;\n    overflow: hidden;\n    background-color: white;\n    /* margin-top: -8px; */\n}\n\n.addListBtn {\n    display: block;\n    width: 100px;\n    height: 34px;\n    background-color: #FC6363;\n    color: white;\n    border-radius: var(--border-radius-1);\n    margin-left: 8px;\n    font-size: 14px;\n    font-weight: 600;\n    margin-top: 10px;\n    margin-bottom: 10px;\n}\n.addListInputField, .createNewListField {\n  padding: 8px;\n  width: 200px;\n  margin-left: 8px;\n  margin-right: 8px;\n  border: 1px solid var(--color-light);\n  border-radius: var(--border-radius-1);\n  text-align: left;\n  resize: none;\n  overflow: hidden;\n  height: 40px;\n  max-height: 500px;\n  max-lines: 200;\n  font-weight: 500;\n  font-size: 14px;\n}\n\n.createListContainer {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    /* height: 140px; */\n    width: 98%;\n    padding-top: 10px;\n    z-index: 9999;\n    overflow: hidden;\n    background-color: white;\n    align-items: center;\n    margin-top: 10px;\n    margin-right: auto;\n    margin-left: auto;\n    border-radius: var(--border-radius-1)\n}\n\n.createNewList {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    /* height: 140px; */\n    width: 98%;\n    padding-top: 10px;\n    z-index: 9999;\n    overflow: hidden;\n    background-color: white;\n    align-items: center;\n    margin-right: auto;\n    margin-left: auto;\n    border-radius: var(--border-radius-1)\n}\n\n\n.cardCell {\n    overflow: hidden;\n    width: 220px;\n    min-height: 50px;\n    margin-bottom: 10px;\n    border: 1px solid var(--color-light);\n    background-color: white;\n    display: flex;\n    flex-direction: column;\n    border-radius: var(--border-radius-1);\n    /* border-bottom-right-radius: var(--border-radius-2);\n    border-bottom-left-radius: var(--border-radius-2); */\n}\n\n.badgeAndTitleContainer {\n    display: flex;\n    flex-direction: row;\n}\n\n.badgeAndTitleContainer label {\n    margin-left: 10px;\n}\n\n.cardNameField {\n    display: flex;\n    width: 165px;\n    min-height: 20px;\n    margin-top: 13px;\n    font-size: 15px;\n    font-weight: 600;\n    resize: none;\n    color: var(--color-dark);\n    margin-bottom: 8px;\n    margin-left: 8px;\n}\n\n.listNameLabel {\n    height: 24px;\n    font-weight: 600;\n    font-size: 15px;\n    margin-top: auto;\n    margin-bottom: auto;\n}\n.colorBadge {\n    width: 4px;\n    height: 20px;\n    background-color: orange;\n    border-radius: var(--border-radius-1);\n    margin-top: auto;\n    margin-bottom: auto;\n    margin-left: 15px;\n}\n\n.listHeaderView {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    height: 50px;\n    width: 100%;\n    border-radius:  var(--border-radius-1);;\n    /* border-top-right-radius: var(--border-radius-2);\n    border-top-left-radius: var(--border-radius-2); */\n    border: 1px solid var(--color-light);\n    padding-right: 15px;\n    background-color: white;\n}\n\n\n.boardListsContainer {\n    width: 100%;\n    height: calc(100vh - 160px);\n    white-space: nowrap;\n    overflow-x: auto;\n    overflow-y: hidden;\n    -webkit-overflow-scrolling: touch;\n    padding-right: 20px;\n}\n\n.listContainer {\n    width: 220px;\n    /* background-color: #eee; */\n    float: none;\n    height: 100%;\n    margin: 0 0.50%;\n    display: inline-block;\n    zoom: 1;\n    /* overflow: hidden; */\n    /* overflow-y: scroll; */\n    overflow: hidden;\n}\n\n.mainBoardConentView {\n    width: calc(100% - 10px);\n    height: calc(100% - 130px);\n    margin-left: auto;\n    margin-right: auto;\n    padding-top: 20px;\n}\n\n.boardBNavBar {\n    width: calc(100% - 30px);\n    height: 50px;\n    background-color: white;\n    margin-left: auto;\n    margin-right: auto;\n    margin-top: 15px;\n    border-radius: var(--border-radius-1);\n}\n    \n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}