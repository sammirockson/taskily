{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, withCtx as _withCtx, createBlock as _createBlock, createVNode as _createVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nimport _imports_0 from '@/assets/board_placeholder.png';\nconst _withScopeId = n => (_pushScopeId(\"data-v-461bb5c9\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"allBoards\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, \"My Boards\", -1 /* HOISTED */));\nconst _hoisted_3 = {\n  class: \"boardContentView\"\n};\nconst _hoisted_4 = [\"onClick\"];\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"img\", {\n  src: _imports_0,\n  class: \"productCellImage\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_6 = {\n  class: \"productNameLabel\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_col = _resolveComponent(\"v-col\");\n  const _component_v_row = _resolveComponent(\"v-row\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"div\", _hoisted_3, [_createVNode(_component_v_row, {\n    style: {\n      \"overflow\": \"hidden\"\n    }\n  }, {\n    default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.boards, board => {\n      return _openBlock(), _createBlock(_component_v_col, {\n        key: board,\n        cols: \"auto\"\n      }, {\n        default: _withCtx(() => [_createElementVNode(\"div\", {\n          class: \"productGridCellWithBorder\",\n          onClick: $event => $options.handleBoardTapped(board)\n        }, [_hoisted_5, _createElementVNode(\"label\", _hoisted_6, _toDisplayString(board.name), 1 /* TEXT */)], 8 /* PROPS */, _hoisted_4)]),\n        _: 2 /* DYNAMIC */\n      }, 1024 /* DYNAMIC_SLOTS */);\n    }), 128 /* KEYED_FRAGMENT */))]),\n    _: 1 /* STABLE */\n  })])]);\n}","map":{"version":3,"names":["_imports_0","class","_createElementVNode","src","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_createVNode","_component_v_row","style","default","_withCtx","_Fragment","_renderList","$setup","boards","board","_createBlock","_component_v_col","key","cols","onClick","$event","$options","handleBoardTapped","_hoisted_5","_hoisted_6","_toDisplayString","name","_hoisted_4","_"],"sources":["/Users/Sam.Agyemang/Desktop/Dev/taskily/src/views/AllBoardsView.vue"],"sourcesContent":["<template>\n     <div class=\"allBoards\">\n     <label>My Boards</label>\n        <div class=\"boardContentView\">\n            <v-row style=\"overflow: hidden;\">\n             <v-col v-for=\"board in boards\" :key=\"board\" cols=\"auto\"> \n               <div class=\"productGridCellWithBorder\"  @click=\"handleBoardTapped(board)\">\n                  <img src=\"@/assets/board_placeholder.png\" class=\"productCellImage\">\n                  <label class=\"productNameLabel\">{{ board.name }}</label>\n               </div>\n              </v-col>\n            </v-row>\n           </div>\n        </div>\n</template>\n<script>\nimport { ref } from 'vue'\nimport CryptoJS from 'crypto-js'\nimport { BASE_URL, USER_CACHE_KEY } from '@/config'\nimport axios from 'axios';\n\nexport default {\n  inject: [\"cryptojs\"],\n    components: {\n        \n    }, \n    setup() {\n        var isSideBarExpanded = ref(false)\n        var selectedTaskBoardType = ref(\"All Team\")\n        var boards = ref([])\n        var currentUser = ref({})\n        return { isSideBarExpanded, boards, selectedTaskBoardType, currentUser}\n    },\n    methods: {\n      handleMount() {\n        let userCacheString = localStorage.getItem(USER_CACHE_KEY)\n        console.log(\"userCacheString: \", userCacheString)\n        if (userCacheString == null || userCacheString.length == 0) {\n              this.$router.push({path: \"/home\"})\n            } else {\n             let userCache = JSON.parse(userCacheString)\n             let decryptionToken = userCache.token\n             let encryptedUserData = userCache.user\n             let decryptedData = CryptoJS.AES.decrypt(encryptedUserData, decryptionToken).toString(CryptoJS.enc.Utf8)\n             let cacheInfoObject = JSON.parse(decryptedData)\n             this.currentUser = cacheInfoObject.user\n             console.log(\"parsed credentials: \", userCache)\n             this.fetchBoards()\n       }\n      },\n      handleBoardTapped(board) {\n        console.log(\"board: \", board)\n        let path = \"/b/\" + board.id\n        this.$router.push({path: path})\n      },\n      handleBoardTypeTapped(item) {\n        this.selectedTaskBoardType = item\n      },\n    watch: { \n        // isExpanded: function(newVal, oldVal) {\n        //     console.log('Prop changed isSideBarExpanwded: ', newVal)\n        //     this.isSideBarExpanded = newVal\n        // }\n    }, \n    async fetchBoards() {\n        var params = {\n            owner: this.currentUser.id\n        }\n        var fullURL = BASE_URL + \"board/my\"\n        console.log(\"full url: \", fullURL, \"params: \", params)\n        await axios.post(fullURL, params).then((response) => {\n          console.log(\"board response: \", response)\n          if (response.data != null) {\n            let data = response.data\n            console.log(\"resp data: \", data)\n            if (data.statusCode == 200) {\n                let allBoard = data.resp\n                console.log(\"boards: \", allBoard)\n                this.boards = allBoard\n              }\n             }\n          })\n        }\n    },\n    mounted() {\n      this.handleMount()\n    } \n}\n</script>\n<style scoped>\n    .productCellImage {\n    height: 200px;\n    width: 232px;\n    margin-right: auto;\n    margin-left: auto;\n    background-color: var(--color-light);\n    object-fit: cover;\n}\n\n.productGridCellWithBorder {\n    border: 2px solid var(--color-light);\n}\n.productGridCell, .productGridCellWithBorder {\n    display: block;\n    height: 280px;\n    overflow: hidden;\n    width: 232px;\n    background-color: white;\n    border-radius: var(--border-radius-2);\n}\n\n.boardContentView {\n    width: 80%;\n    height: 400px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin: auto;\n    padding: 30px;\n    background-color: orange;\n}\n\n.allBoards {\n    width: 100vw;\n    height: 100vh;\n    background-color: white;\n}\n</style>"],"mappings":";OAOuBA,UAAoC;;;EANjDC,KAAK,EAAC;AAAW;gEACtBC,mBAAA,CAAwB,eAAjB,WAAS;;EACRD,KAAK,EAAC;AAAkB;mBAHrC;gEAOkBC,mBAAA,CAAmE;EAA9DC,GAAoC,EAApCH,UAAoC;EAACC,KAAK,EAAC;;;EACzCA,KAAK,EAAC;AAAkB;;;;uBAP5CG,mBAAA,CAYS,OAZTC,UAYS,GAXTC,UAAwB,EACrBJ,mBAAA,CASS,OATTK,UASS,GARLC,YAAA,CAOQC,gBAAA;IAPDC,KAAyB,EAAzB;MAAA;IAAA;EAAyB;IAJ5CC,OAAA,EAAAC,QAAA,CAKoB,MAAuB,E,kBAA9BR,mBAAA,CAKSS,SAAA,QAVtBC,WAAA,CAKoCC,MAAA,CAAAC,MAAM,EAAfC,KAAK;2BAAnBC,YAAA,CAKSC,gBAAA;QALuBC,GAAG,EAAEH,KAAK;QAAEI,IAAI,EAAC;;QAL9DV,OAAA,EAAAC,QAAA,CAMe,MAGM,CAHNV,mBAAA,CAGM;UAHDD,KAAK,EAAC,2BAA2B;UAAGqB,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,iBAAiB,CAACR,KAAK;YACpES,UAAmE,EACnExB,mBAAA,CAAwD,SAAxDyB,UAAwD,EAAAC,gBAAA,CAArBX,KAAK,CAACY,IAAI,iB,iBAR/DC,UAAA,E;QAAAC,CAAA;;;IAAAA,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}