{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport NavBar from '@/components/NavBarView.vue';\nimport DraggableView from 'vuedraggable';\nimport CardView from '@/views/CardView.vue';\nimport BoardNavItemsView from './BoardNavItemsView.vue';\nimport APIService from '@/APIService';\nimport { ref } from 'vue';\nimport CryptoJS from 'crypto-js';\nimport { BASE_URL, USER_CACHE_KEY } from '@/config';\nimport axios from 'axios';\nexport default {\n  inject: [\"eventBus\", \"cryptojs\"],\n  props: [\"isExpanded\"],\n  components: {\n    NavBar,\n    CardView,\n    DraggableView,\n    BoardNavItemsView\n  },\n  setup() {\n    var isSideBarExpanded = ref(true);\n    var board = ref([]);\n    var isCardTapped = ref(false);\n    var newCardName = ref(\"\");\n    var newListName = ref(\"\");\n    var boardId = ref(\"\");\n    var selectedCard = ref(Object);\n    var selectedList = ref(Object);\n    var allCards = ref([]);\n    var isSavingCard = ref(false);\n    var allBoardTags = ref([]);\n    var isRefreshBoard = ref(true);\n    var currentUser = ref(null);\n    var searchLists = ref([]);\n    var allLists = ref([]);\n    return {\n      isSideBarExpanded,\n      board,\n      allLists,\n      searchLists,\n      newCardName,\n      newListName,\n      isCardTapped,\n      currentUser,\n      boardId,\n      selectedCard,\n      selectedList,\n      allCards,\n      isSavingCard,\n      allBoardTags,\n      isRefreshBoard\n    };\n  },\n  methods: {\n    handleSearchBoard(searchText) {\n      let results = this.board.lists;\n    },\n    isBtmViewVisible(list) {\n      return list.headerType == 'addList' || list.headerType == 'creatingList' ? false : true;\n    },\n    getCardTags(card) {\n      let tagIds = card.selectedTags;\n      return this.allBoardTags.filter(tag => tagIds.includes(tag.id));\n    },\n    listNameTextAreaGrow(listId) {\n      let element = document.getElementById(listId); // cardNameId\n      if (element != null) {\n        element.style.height = element.scrollHeight + \"px\";\n      }\n      let contId = \"headerMotherContainer_\" + listId;\n      let badgeAndTitleContainer = document.getElementById(contId);\n      if (badgeAndTitleContainer != null) {\n        badgeAndTitleContainer.style.height = element.scrollHeight + 30 + \"px\";\n      }\n    },\n    async didEditListName(listName, list_id, listId) {\n      console.log(\"didEditListName: \", listName);\n      var params = {\n        list_id: list_id,\n        listName: listName\n      };\n      var fullURL = BASE_URL + \"board/updateListName\";\n      await axios.post(fullURL, params).then(response => {\n        if (response.data != null) {\n          let data = response.data;\n          console.log(\"list update resp data: \", data);\n          let contId = \"headerMotherContainer_\" + listId;\n          let badgeAndTitleContainer = document.getElementById(contId);\n          console.log(\"lstid: \", contId, \"element: \", badgeAndTitleContainer == null);\n          if (badgeAndTitleContainer != null) {\n            badgeAndTitleContainer.style.height = \"60px\";\n          }\n        }\n      });\n    },\n    sortedCards(cards) {\n      return cards.sort((a, b) => a.position - b.position);\n    },\n    async setListEmpty(listId) {\n      var params = {\n        listId: listId\n      };\n      var fullURL = BASE_URL + \"board/setEmptyList\";\n      await axios.post(fullURL, params).then(response => {\n        if (response.data != null) {\n          let data = response.data;\n          console.log(\"resp data: \", data);\n          if (data.statusCode == 200) {\n            console.log(\"list and card info updated: \", data.resp);\n          }\n        }\n      });\n    },\n    async updateBoardInfo(cards, cardIds, list_id, listId) {\n      var params = {\n        cards: cards,\n        cardIds: cardIds,\n        listId: listId,\n        list_id: list_id\n      };\n      var fullURL = BASE_URL + \"board/updateList\";\n      await axios.post(fullURL, params).then(response => {\n        if (response.data != null) {\n          let data = response.data;\n          if (data.statusCode == 200) {\n            console.log(\"list and card info updated: \", data.resp);\n          }\n        }\n      });\n    },\n    onCardMoved(e) {\n      console.log(\"onCardMoved: \", e);\n      let item = e.added || e.removed || e.moved;\n      if (e.removed != null) {\n        // Removed: removed from one list to another\n        for (var listIndex in this.board.lists) {\n          var list = this.board.lists[listIndex];\n          let list_id = list._id;\n          let listId = list.id;\n          if (list.cards.length > 0) {\n            var cards = [];\n            var cardIds = [];\n            for (var cardPosition in list.cards) {\n              let card = list.cards[cardPosition];\n              card.position = cardPosition;\n              cardIds.push(card.id);\n              cards.push({\n                id: card.id,\n                position: cardPosition\n              });\n            }\n            this.updateBoardInfo(cards, cardIds, list_id, listId);\n          } else {\n            // set list empty\n            this.setListEmpty(list_id);\n          }\n        }\n        // this.getBoardBy(this.boardId)\n      }\n      if (e.moved != null) {\n        // moved: moved within the same list\n        let listId = e.moved.element.listId;\n        console.log(\"moved: \", e.moved.element, \"listId: \", listId);\n        let listIndex = this.board.lists.findIndex(x => x.id === listId);\n        let list = this.board.lists[listIndex];\n        let list_id = list._id;\n        var cards = [];\n        var cardIds = [];\n        for (var cardPosition in list.cards) {\n          let card = list.cards[cardPosition];\n          card.position = cardPosition;\n          cardIds.push(card.id);\n          cards.push({\n            id: card.id,\n            position: cardPosition\n          });\n        }\n        this.updateBoardInfo(cards, cardIds, list_id, listId);\n      }\n    },\n    handleOverlayDismissed() {\n      this.isRefreshBoard = true;\n      this.$router.go(-1);\n      // this.getBoardBy(this.boardId)\n    },\n    handleCardTapped(card, list) {\n      let path = \"/b/\" + this.boardId;\n      this.$router.push({\n        path: path,\n        query: {\n          card: card._id\n        }\n      });\n    },\n    async createANewList(list, index) {\n      // Create List\n      var params = {\n        listName: this.newListName,\n        boardId: this.boardId,\n        isAddCard: true,\n        isCreateList: false,\n        headerType: \"showListName\",\n        id: Date.now(),\n        owner: \"1721545684258\"\n      };\n      var fullURL = BASE_URL + \"board/newList\";\n      console.log(\"full url: \", fullURL, \"params: \", params);\n      await axios.post(fullURL, params).then(response => {\n        if (response.data != null) {\n          let data = response.data;\n          console.log(\"resp data: \", data);\n          if (data.statusCode == 200) {\n            console.log(\"created new list: \", data.resp);\n            this.getBoardBy(this.boardId);\n          }\n        }\n      });\n      this.newListName = \"\";\n    },\n    handleAddList(list, index) {\n      list.isCreateList = true;\n      list.headerType = \"creatingList\";\n      this.board.lists[index] = list;\n    },\n    dynamicTextArea(index) {\n      let element = document.getElementById(\"createNewListField_id\");\n      element.style.height = \"15px\";\n      element.style.height = element.scrollHeight + \"px\";\n    },\n    autoGrow(index, list) {\n      let element = document.getElementById(`newCardField_` + index);\n      element.style.height = \"15px\";\n      element.style.height = element.scrollHeight + \"px\";\n    },\n    async handleCreateCard(list, index) {\n      var params = {\n        cardName: this.newCardName,\n        boardId: this.boardId,\n        listId: list.id,\n        id: Date.now(),\n        owner: \"1721545684258\"\n      };\n      var fullURL = BASE_URL + \"board/newCard\";\n      console.log(\"full url: \", fullURL, \"params: \", params);\n      await axios.post(fullURL, params).then(response => {\n        if (response.data != null) {\n          let data = response.data;\n          console.log(\"card resp data: \", data);\n          if (data.statusCode == 200) {\n            console.log(\"created new card: \", data.resp);\n            this.getBoardBy(this.boardId);\n          }\n        }\n      });\n      this.newCardName = \"\";\n    },\n    handleAddCard(list, index) {\n      list.isCreateCard = true;\n      this.board[index] = list;\n\n      // let bottomViewId = 'bottomView_' + list._id\n      // let bottomView = document.getElementById(bottomViewId)\n      // let bottomViewHeight = element.scrollHeight + 100\n      // bottomView.style.height = (300) + \"px\";\n\n      setTimeout(() => {\n        let listBgViewId = \"listBgView\" + list._id;\n        var myDiv = document.getElementById(listBgViewId);\n        myDiv.scrollTop = myDiv.scrollHeight + 200;\n      }, 500);\n    },\n    async getBoardBy(boardId) {\n      console.log(\"current user: \", this.currentUser);\n      if (this.currentUser == null) {\n        this.$router.push({\n          path: '/login'\n        });\n      } else {\n        let userId = this.currentUser.id;\n        this.isCardTapped = false;\n        var params = {\n          boardId: boardId\n        };\n        let boardResp = await APIService.getBoardById(params);\n        let apiBoard = boardResp.board;\n        this.allBoardTags = boardResp.tags;\n        console.log(\"board: \", boardResp);\n        if (apiBoard != null) {\n          let members = apiBoard.members.filter(member => member == userId);\n          console.log(\"members: \", members, \"userId: \", userId);\n          if (members.length > 0) {\n            apiBoard.lists.push({\n              id: \"listPlaceholder\",\n              listName: \"Add New List\",\n              headerType: \"addList\",\n              footerType: \"add\",\n              isAddCard: false,\n              isCreateList: false,\n              cards: []\n            });\n            apiBoard.lists.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));\n            for (var listIndex in apiBoard.lists) {\n              let cards = this.sortedCards(apiBoard.lists[listIndex].cards);\n              apiBoard.lists[listIndex].cards = cards;\n              this.allCards.push(cards);\n            }\n            this.allLists = apiBoard.lists;\n            this.board = apiBoard;\n          } else {\n            console.log(\"You're not part of this board, request invitation from the owner\");\n            this.$router.push({\n              path: '/login'\n            });\n          }\n        } else {\n          this.$router.push({\n            path: '/login'\n          });\n        }\n      }\n    },\n    async getCardBy(card_id) {\n      var params = {\n        card_id: card_id\n      };\n      var fullURL = BASE_URL + \"board/getCardDetail\";\n      await axios.post(fullURL, params).then(response => {\n        if (response.data != null) {\n          let data = response.data;\n          console.log(\"card data: \", data);\n          if (data.statusCode == 200) {\n            let resp = data.resp;\n            if (resp != null) {\n              this.selectedCard = resp.card;\n              this.selectedList = resp.list;\n              this.cardTags = resp.tags;\n              this.isCardTapped = true;\n              this.$emit('cardDetailInfo', resp);\n            }\n          }\n        }\n      });\n    }\n  },\n  watch: {\n    '$route'() {\n      console.log(\"routed called\");\n      this.getBoardBy(this.boardId);\n    }\n  },\n  mounted() {\n    APIService.init();\n    let routeParams = this.$route.params;\n    console.log(\"main routeParams: \", routeParams);\n    let userCacheString = localStorage.getItem(USER_CACHE_KEY);\n    if (userCacheString != null && userCacheString.length > 0) {\n      let userCache = JSON.parse(userCacheString);\n      let decryptionToken = userCache.token;\n      let encryptedUserData = userCache.user;\n      let decryptedData = CryptoJS.AES.decrypt(encryptedUserData, decryptionToken).toString(CryptoJS.enc.Utf8);\n      let cacheInfoObject = JSON.parse(decryptedData);\n      this.currentUser = cacheInfoObject.user;\n    }\n    this.boardId = routeParams.boardId;\n    this.getBoardBy(this.boardId);\n  }\n};","map":{"version":3,"names":["NavBar","DraggableView","CardView","BoardNavItemsView","APIService","ref","CryptoJS","BASE_URL","USER_CACHE_KEY","axios","inject","props","components","setup","isSideBarExpanded","board","isCardTapped","newCardName","newListName","boardId","selectedCard","Object","selectedList","allCards","isSavingCard","allBoardTags","isRefreshBoard","currentUser","searchLists","allLists","methods","handleSearchBoard","searchText","results","lists","isBtmViewVisible","list","headerType","getCardTags","card","tagIds","selectedTags","filter","tag","includes","id","listNameTextAreaGrow","listId","element","document","getElementById","style","height","scrollHeight","contId","badgeAndTitleContainer","didEditListName","listName","list_id","console","log","params","fullURL","post","then","response","data","sortedCards","cards","sort","a","b","position","setListEmpty","statusCode","resp","updateBoardInfo","cardIds","onCardMoved","e","item","added","removed","moved","listIndex","_id","length","cardPosition","push","findIndex","x","handleOverlayDismissed","$router","go","handleCardTapped","path","query","createANewList","index","isAddCard","isCreateList","Date","now","owner","getBoardBy","handleAddList","dynamicTextArea","autoGrow","handleCreateCard","cardName","handleAddCard","isCreateCard","setTimeout","listBgViewId","myDiv","scrollTop","userId","boardResp","getBoardById","apiBoard","tags","members","member","footerType","createdAt","getCardBy","card_id","cardTags","$emit","watch","$route","mounted","init","routeParams","userCacheString","localStorage","getItem","userCache","JSON","parse","decryptionToken","token","encryptedUserData","user","decryptedData","AES","decrypt","toString","enc","Utf8","cacheInfoObject"],"sources":["/Users/Sam.Agyemang/Desktop/Dev/taskily/src/components/BoardContentView.vue"],"sourcesContent":["<template>\n    <div>\n        <!-- <NavBar :isExpanded=\"this.isSideBarExpanded\"/> -->\n        <BoardNavItemsView class=\"boardBNavBar\" :boardId=\"this.boardId\" :boardName=\"this.board.name\" @handleSearchBoard=\"handleSearchBoard\"></BoardNavItemsView>\n        <div class=\"mainBoardConentView\">\n            <div class=\"boardListsContainer\" id=\"boardListsContainer\">\n                 <div v-if=\"this.board != null\" class=\"listContainer\" id=\"listContainer\"v-for=\"(list, index) in this.board.lists\" :key=\"list.id\">\n                    <div class=\"createNewList\" :style=\"{display: list.headerType ==  `creatingList` ? 'flex' : 'none'}\">\n                            <textarea name=\"text\" v-model=\"newListName\" @input=\"dynamicTextArea(index)\" placeholder=\"Create New List\" class=\"createNewListField\" id=\"createNewListField_id\"></textarea>\n                            <button v-if=\"isSavingCard\" class=\"addListBtn buttonload\">\n                               <i class=\"fa fa-circle-o-notch fa-spin\"></i> Creating... \n                            </button>\n                           <button v-else class=\"addListBtn\" @click=\"createANewList(list, index)\">Create List</button>\n                    </div>\n                    <div class=\"listFooterView\" @click=\"handleAddList(list, index)\" :style=\"{display: list.headerType ==  `addList` ? 'flex' : 'none'}\">\n                        <span id=\"addIcon\" class=\"material-symbols-outlined\">add</span>\n                        <div class=\"footerTitleContainer\">\n                            <button class=\"addCardLabel\">New List</button>\n                        </div>\n                     </div>\n                     <div class=\"listHeaderView\" :id=\"`headerMotherContainer_` + list.id\" :style=\"{display: list.headerType ==  `showListName` ? 'flex' : 'none'}\">\n                         <div class=\"badgeAndTitleContainer\">\n                            <div class=\"colorBadge\"></div>\n                            <textarea type=\"text\" v-on:blur=\"didEditListName(list.listName, list._id, list.id)\"  @input=\"listNameTextAreaGrow(list.id)\" class=\"cardNameField\" :id=\"list.id\" v-model=\"list.listName\"></textarea>\n                         </div>\n                         <img src=\"@/assets/three_dots.png\" class=\"listNameLabel\"></img>\n                     </div>\n                     <div class=\"listBackgroundView\" :id=\"'listBgView' + list._id\" v-if=\"this.isBtmViewVisible(list)\">\n                     <div class=\"cardAndFooterContainer\">\n                        <!-- <RouterLink :to=\"`/b` + this.board._id + `/c` +  card._id\"  style=\"text-decoration: none; color: inherit;\"> -->\n                        <DraggableView v-model=\"list.cards\" \n                             group=\"allCards\" \n                             item-key=\"id\"\n                             drag-class=\"drag\"\n                             ghost-class=\"ghost\"\n                             @change=\"onCardMoved\">\n                           <template #item=\"{element}\">\n                            <CardView :card=\"element\" :boardId=\"this.board.id\" :tags=\"this.getCardTags(element)\"></CardView>\n                           </template>\n                       </DraggableView>\n                      <!-- </RouterLink> -->\n                        <div v-if=\"list.isCreateCard == true\" class=\"createListContainer\">\n                            <textarea name=\"text\" v-model=\"newCardName\" @input=\"autoGrow(index)\" placeholder=\"Give your card a name\" class=\"addListInputField\" :id=\"`newCardField_` + index\"></textarea>\n                            <button v-if=\"isSavingCard\" class=\"addListBtn buttonload\">\n                               <i class=\"fa fa-circle-o-notch fa-spin\"></i> Adding... \n                            </button>\n                           <button v-else class=\"addListBtn\" @click=\"handleCreateCard(list, index)\">Add Card</button>\n                        </div>\n                      <!-- <div v-else v-if=\"list.cards != null && list.cards.length > 0 || list.isAddCard == true\" class=\"listFooterView\" @click=\"handleAddCard(list, index)\">\n                        <span id=\"addIcon\" class=\"material-symbols-outlined\">add</span>\n                        <div class=\"footerTitleContainer\">\n                            <button class=\"addCardLabel\">New Card</button>\n                        </div>\n                       </div> -->\n                        \n                      \n                    </div>\n                    \n                 </div>\n                   <div class=\"bottomView\" :id=\"'bottomView_' + list._id\" v-if=\"this.isBtmViewVisible(list)\">\n                       <div v-if=\"list.isCreateCard == true\" class=\"createListTipFooterView\">\n                            <!-- <textarea name=\"text\" v-model=\"newCardName\" @input=\"autoGrow(index, list)\" placeholder=\"Give your card a name\" class=\"addListInputField\" :id=\"`newCardField_` + index\"></textarea>\n                            <button v-if=\"isSavingCard\" class=\"addListBtn buttonload\">\n                               <i class=\"fa fa-circle-o-notch fa-spin\"></i> Adding... \n                            </button>\n                           <button v-else class=\"addListBtn\" @click=\"handleCreateCard(list, index)\">Add Card</button> -->\n                        </div>\n                      <div v-else v-if=\"list.cards != null && list.cards.length > 0 || list.isAddCard == true || list.isCreateCard == true\" class=\"listFooterView\" @click=\"handleAddCard(list, index)\">\n                        <span id=\"addIcon\" class=\"material-symbols-outlined\">add</span>\n                        <div class=\"footerTitleContainer\">\n                            <button class=\"addCardLabel\">New Card</button>\n                        </div>\n                       </div>\n                   </div>\n                </div>\n\n                \n           </div>\n        </div>\n        <RouterView/>\n    </div>\n</template>\n<script>\nimport NavBar from '@/components/NavBarView.vue'\nimport DraggableView from 'vuedraggable'\nimport CardView from '@/views/CardView.vue'\nimport BoardNavItemsView from './BoardNavItemsView.vue'\nimport APIService from '@/APIService';\n\nimport { ref } from 'vue'\nimport CryptoJS from 'crypto-js'\nimport { BASE_URL, USER_CACHE_KEY } from '@/config'\nimport axios from 'axios';\n\nexport default {\n    inject: [\"eventBus\", \"cryptojs\"],\n    props: [\"isExpanded\"],\n    components: {\n        NavBar, CardView, DraggableView, BoardNavItemsView\n    }, \n    setup() {\n        var isSideBarExpanded = ref(true)\n        var board = ref([])\n        var isCardTapped = ref(false)\n        var newCardName = ref(\"\")\n        var newListName = ref(\"\")\n        var boardId = ref(\"\")\n        var selectedCard = ref(Object)\n        var selectedList = ref(Object)\n        var allCards = ref([])\n        var isSavingCard = ref(false)\n        var allBoardTags = ref([])\n        var isRefreshBoard = ref(true)\n        var currentUser = ref(null)\n        var searchLists = ref([])\n        var allLists = ref([])\n        return { \n            isSideBarExpanded, board, allLists, searchLists, newCardName, newListName, isCardTapped, currentUser,\n            boardId, selectedCard, selectedList, allCards, isSavingCard, allBoardTags, isRefreshBoard\n        }\n    },\n    methods: {\n        handleSearchBoard(searchText) {\n            let results = this.board.lists \n\n        },\n        isBtmViewVisible(list) {\n            return list.headerType ==  'addList'  || list.headerType == 'creatingList' ? false : true\n        },\n        getCardTags(card) {\n            let tagIds = card.selectedTags\n            return this.allBoardTags.filter( tag => tagIds.includes(tag.id));\n        },\n        listNameTextAreaGrow(listId) {\n            let element = document.getElementById(listId) // cardNameId\n            if (element != null) {\n                element.style.height = (element.scrollHeight) + \"px\";\n            }\n\n            let contId = \"headerMotherContainer_\" + listId\n            let badgeAndTitleContainer = document.getElementById(contId) \n            if (badgeAndTitleContainer != null ) {\n                badgeAndTitleContainer.style.height = (element.scrollHeight + 30) + \"px\";\n            }\n        },\n     async didEditListName(listName, list_id, listId) {\n        console.log(\"didEditListName: \", listName)\n        var params = {\n            list_id: list_id, \n            listName: listName, \n         }\n         var fullURL = BASE_URL + \"board/updateListName\"\n         await axios.post(fullURL, params).then((response) => {\n          if (response.data != null) {\n             let data = response.data\n             console.log(\"list update resp data: \", data)\n             let contId = \"headerMotherContainer_\" + listId\n            let badgeAndTitleContainer = document.getElementById(contId) \n            console.log(\"lstid: \", contId, \"element: \", badgeAndTitleContainer == null)\n            if (badgeAndTitleContainer != null ) {\n                badgeAndTitleContainer.style.height = \"60px\";\n            }\n            }\n          })\n        },\n        sortedCards(cards) {\n            return cards.sort((a,b)=> a.position - b.position)\n        },\n        async setListEmpty(listId) {\n         var params = {\n            listId: listId\n        }\n        var fullURL = BASE_URL + \"board/setEmptyList\"\n        await axios.post(fullURL, params).then((response) => {\n          if (response.data != null) {\n            let data = response.data\n            console.log(\"resp data: \", data)\n            if (data.statusCode == 200) {\n                console.log(\"list and card info updated: \", data.resp)\n              }\n             }\n          })\n        },\n       async updateBoardInfo(cards, cardIds, list_id, listId) {\n        var params = {\n            cards: cards, \n            cardIds: cardIds, \n            listId: listId, \n            list_id: list_id\n        }\n        var fullURL = BASE_URL + \"board/updateList\"\n        await axios.post(fullURL, params).then((response) => {\n          if (response.data != null) {\n            let data = response.data\n            if (data.statusCode == 200) {\n                console.log(\"list and card info updated: \", data.resp)\n              }\n             }\n          })\n      },\n      onCardMoved(e) {\n       console.log(\"onCardMoved: \", e) \n       let item = e.added || e.removed || e.moved; \n       if (e.removed != null) { // Removed: removed from one list to another\n        for (var listIndex in this.board.lists) {\n          var list = this.board.lists[listIndex]\n          let list_id = list._id\n          let listId = list.id\n          if (list.cards.length > 0) {\n            var cards = []\n            var cardIds = []\n             for (var cardPosition in list.cards) {\n                let card = list.cards[cardPosition]\n                card.position = cardPosition\n                cardIds.push(card.id)\n                cards.push({id: card.id, position: cardPosition})\n             }\n             this.updateBoardInfo(cards, cardIds, list_id, listId)\n          } else {\n            // set list empty\n            this.setListEmpty(list_id)\n          }\n        }\n        // this.getBoardBy(this.boardId)\n      }\n\n      if (e.moved != null) { // moved: moved within the same list\n        let listId = e.moved.element.listId\n        console.log(\"moved: \", e.moved.element, \"listId: \", listId)\n        let listIndex = this.board.lists.findIndex(x => x.id === listId);\n        let list = this.board.lists[listIndex]\n        let list_id = list._id\n        var cards = []\n        var cardIds = []\n        for (var cardPosition in list.cards) {\n            let card = list.cards[cardPosition]\n            card.position = cardPosition\n            cardIds.push(card.id)\n            cards.push({id: card.id, position: cardPosition})\n        }\n        this.updateBoardInfo(cards, cardIds, list_id, listId)\n      }\n    },\n        handleOverlayDismissed() {\n            this.isRefreshBoard = true\n            this.$router.go(-1)\n            // this.getBoardBy(this.boardId)\n        },\n        handleCardTapped(card, list) {\n            let path = \"/b/\" + this.boardId\n            this.$router.push(\n                {\n                    path: path, \n                    query: {\n                        card: card._id\n                    }\n                })\n        },\n      async createANewList(list, index) {\n        // Create List\n        var params = {\n          listName: this.newListName,\n          boardId: this.boardId,\n          isAddCard: true, \n          isCreateList: false,\n          headerType: \"showListName\",\n          id: Date.now(), \n          owner: \"1721545684258\"\n        }\n        var fullURL = BASE_URL + \"board/newList\"\n        console.log(\"full url: \", fullURL, \"params: \", params)\n        await axios.post(fullURL, params).then((response) => {\n          if (response.data != null) {\n            let data = response.data\n            console.log(\"resp data: \", data)\n            if (data.statusCode == 200) {\n                console.log(\"created new list: \", data.resp)\n                this.getBoardBy(this.boardId)\n              }\n             }\n          })\n          this.newListName = \"\"\n    },\n        handleAddList(list, index) {\n            list.isCreateList = true \n            list.headerType = \"creatingList\"\n            this.board.lists[index] = list\n        },\n        dynamicTextArea(index) {\n            let element = document.getElementById(\"createNewListField_id\")\n            element.style.height = \"15px\";\n            element.style.height = (element.scrollHeight) + \"px\";\n        },\n        autoGrow(index, list) {\n            let element = document.getElementById(`newCardField_` + index)\n            element.style.height = \"15px\";\n            element.style.height = (element.scrollHeight) + \"px\";\n        },\n       async handleCreateCard(list, index) {\n          var params = {\n             cardName: this.newCardName,\n             boardId: this.boardId,\n             listId: list.id,\n             id: Date.now(), \n             owner: \"1721545684258\"\n         }\n         var fullURL = BASE_URL + \"board/newCard\"\n         console.log(\"full url: \", fullURL, \"params: \", params)\n         await axios.post(fullURL, params).then((response) => {\n          if (response.data != null) {\n            let data = response.data\n            console.log(\"card resp data: \", data)\n            if (data.statusCode == 200) {\n                console.log(\"created new card: \", data.resp)\n                this.getBoardBy(this.boardId)\n              }\n             }\n          })\n          this.newCardName = \"\"\n        },\n        handleAddCard(list, index) {\n            list.isCreateCard = true \n            this.board[index] = list\n\n            // let bottomViewId = 'bottomView_' + list._id\n            // let bottomView = document.getElementById(bottomViewId)\n            // let bottomViewHeight = element.scrollHeight + 100\n            // bottomView.style.height = (300) + \"px\";\n\n            setTimeout(()=>{\n                let listBgViewId = \"listBgView\" + list._id\n                var myDiv = document.getElementById(listBgViewId);\n                myDiv.scrollTop = myDiv.scrollHeight + 200;\n            }, 500)\n        }, \n     async getBoardBy(boardId) {\n        console.log(\"current user: \", this.currentUser)\n        if (this.currentUser == null) {\n            this.$router.push({path: '/login'}) \n        } else {\n        let userId = this.currentUser.id\n        this.isCardTapped = false\n        var params = {\n            boardId: boardId\n        }\n        let boardResp = await APIService.getBoardById(params)\n        let apiBoard = boardResp.board\n        this.allBoardTags = boardResp.tags\n        console.log(\"board: \", boardResp)\n        if (apiBoard != null) {\n            let members = apiBoard.members.filter(member => member == userId)\n            console.log(\"members: \", members, \"userId: \", userId)\n            if (members.length > 0 ) {\n                apiBoard.lists.push({ id: \"listPlaceholder\", listName: \"Add New List\", headerType: \"addList\", footerType: \"add\", isAddCard: false, isCreateList: false, cards: []})\n                apiBoard.lists.sort((a,b)=> new Date(a.createdAt) - new Date(b.createdAt))\n               for (var listIndex in apiBoard.lists) {\n                 let cards = this.sortedCards(apiBoard.lists[listIndex].cards)\n                 apiBoard.lists[listIndex].cards = cards\n                 this.allCards.push(cards)\n                }\n                this.allLists = apiBoard.lists\n               this.board = apiBoard\n            } else {\n                console.log(\"You're not part of this board, request invitation from the owner\")\n                this.$router.push({path: '/login'}) \n            }\n        } else {\n            this.$router.push({path: '/login'}) \n        }\n      }\n    }, \n     async getCardBy(card_id) {\n        var params = {\n            card_id: card_id\n        }\n        var fullURL = BASE_URL + \"board/getCardDetail\"\n        await axios.post(fullURL, params).then((response) => {\n          if (response.data != null) {\n            let data = response.data\n            console.log(\"card data: \", data)\n            if (data.statusCode == 200) {\n                let resp = data.resp\n                if (resp != null) {\n                   this.selectedCard = resp.card\n                   this.selectedList = resp.list\n                   this.cardTags = resp.tags\n                   this.isCardTapped = true \n                   this.$emit('cardDetailInfo', resp)\n                }\n                \n              }\n             }\n          })\n        }\n    },\n    watch: { \n        '$route' () {\n          console.log(\"routed called\")\n          this.getBoardBy(this.boardId)\n        }\n    },  \n    mounted() {\n        APIService.init()\n        let routeParams = this.$route.params\n        console.log(\"main routeParams: \", routeParams)\n       let userCacheString = localStorage.getItem(USER_CACHE_KEY)\n       if (userCacheString != null && userCacheString.length > 0) {\n        let userCache = JSON.parse(userCacheString)\n        let decryptionToken = userCache.token\n        let encryptedUserData = userCache.user\n        let decryptedData = CryptoJS.AES.decrypt(encryptedUserData, decryptionToken).toString(CryptoJS.enc.Utf8)\n        let cacheInfoObject = JSON.parse(decryptedData)\n        this.currentUser = cacheInfoObject.user\n       }\n       \n        this.boardId = routeParams.boardId\n        this.getBoardBy(this.boardId)\n    },\n}\n</script>\n<style scoped>\n.drag {\n  transform: rotate(5deg);\n}\n \n.ghost {\n  background: lightgray;\n  border-radius: 6px;\n}\n.ghost {\n  visibility: hidden;\n}\n\n.boardInfoView label {\n    font-weight: 500;\n    font-size: 10px;\n    margin-right: 8px;\n    margin-left: 1px;\n}\n.boardIcon {\n    width: 15px;\n    height: 15px;\n}\n.boardInfoView {\n    display: flex;\n    width: 120px;\n    height: 50px;\n    justify-content: space-evenly;\n    margin-top: 5px;\n}\n\n.cardNameLabel {\n    width: 200px;\n    margin-top: 8px;\n    margin-left: 10px;\n    margin-right: 10px;\n    font-weight: 700;\n    font-size: 13px;\n    text-align: left;\n    white-space: pre-wrap;\n}\n\n.footerTitleContainer {\n    width: auto;\n    height: 24px;\n    margin-top: 12px;\n    overflow: hidden;\n}\n#addIcon {\n    padding: 0;\n    margin: 0;\n    margin-top: 12px;\n    font-weight: 700;\n    color: var(--color-card-title);\n}\n\n.addCardLabel {\n    margin: 0;\n    padding: 0;\n    font-weight: 600;\n    font-size: 15px;\n    margin-left: 4px;\n    color: var(--color-card-title);\n}\n.cardAndFooterContainer {\n    height: 100%;\n    width: 100%;\n    overflow-y: scroll;\n    -webkit-overflow-scrolling: touch;\n    /* padding-bottom: 50px; */\n    -ms-overflow-style: none;  /* Internet Explorer 10+ */\n    scrollbar-width: none;  /* Firefox */\n    padding-top: 8px;\n}\n.listFooterView {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    height: 50px;\n    width: 240px;\n    border-radius: var(--border-radius-2);\n    border: 1px solid var(--color-light);\n    z-index: 9999;\n    overflow: hidden;\n    background-color: var(--color-card-background);\n    /* margin-top: -8px; */\n}\n\n.addListBtn {\n    display: block;\n    width: 100px;\n    height: 34px;\n    background-color: #FC6363;\n    color: white;\n    border-radius: var(--border-radius-1);\n    margin-left: 8px;\n    font-size: 14px;\n    font-weight: 600;\n    margin-top: 10px;\n    margin-bottom: 10px;\n}\n.addListInputField, .createNewListField {\n  padding: 8px;\n  width: 200px;\n  margin-left: 8px;\n  margin-right: 8px;\n  border: 1px solid var(--color-light);\n  border-radius: var(--border-radius-1);\n  text-align: left;\n  resize: none;\n  overflow: hidden;\n  height: 40px;\n  max-height: 500px;\n  max-lines: 200;\n  font-weight: 500;\n  font-size: 14px;\n  color: var(--color-dark-blue);\n}\n\n.createListContainer  {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    /* height: 140px; */\n    width: 98%;\n    padding-top: 10px;\n    z-index: 9999;\n    overflow: hidden;\n    background-color: var(--color-card-background);\n    align-items: center;\n    margin-top: 10px;\n    margin-right: auto;\n    margin-left: auto;\n    border-radius: var(--border-radius-2)\n}\n\n.createNewList {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    /* height: 140px; */\n    width: 98%;\n    padding-top: 10px;\n    z-index: 999999;\n    overflow: hidden;\n    background-color: white;\n    align-items: center;\n    margin-right: auto;\n    margin-left: auto;\n    border-radius: var(--border-radius-2)\n}\n\n\n.cardCell {\n    overflow: hidden;\n    width: 220px;\n    min-height: 50px;\n    margin-bottom: 10px;\n    border: 1px solid var(--color-light);\n    background-color: white;\n    display: flex;\n    flex-direction: column;\n    border-radius: var(--border-radius-1);\n    /* border-bottom-right-radius: var(--border-radius-2);\n    border-bottom-left-radius: var(--border-radius-2); */\n}\n\n.badgeAndTitleContainer {\n    display: flex;\n    flex-direction: row;\n}\n\n.badgeAndTitleContainer label {\n    margin-left: 10px;\n}\n\n.cardNameField {\n    display: flex;\n    width: 165px;\n    min-height: 30px;\n    margin-top: 17px;\n    font-size: 15px;\n    font-weight: 600;\n    resize: none;\n    color: var(--color-dark);\n    margin-bottom: 20px;\n    margin-left: 8px;\n}\n\n.listNameLabel {\n    height: 24px;\n    font-weight: 600;\n    font-size: 15px;\n    margin-top: auto;\n    margin-bottom: auto;\n}\n.colorBadge {\n    width: 4px;\n    height: 20px;\n    background-color: orange;\n    border-radius: var(--border-radius-1);\n    margin-top: auto;\n    margin-bottom: auto;\n    margin-left: 15px;\n}\n\n.listHeaderView {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    height: 60px;\n    width: 100%;\n    border-radius:  var(--border-radius-2);;\n    /* border-top-right-radius: var(--border-radius-2);\n    border-top-left-radius: var(--border-radius-2); */\n    border: 1px solid var(--color-light);\n    padding-right: 15px;\n    background-color: var(--color-card-background);\n}\n\n\n.boardListsContainer {\n    width: 100%;\n    height: calc(100vh - 70px);\n    white-space: nowrap;\n    overflow-x: auto;\n    overflow-y: hidden;\n    -webkit-overflow-scrolling: touch;\n    padding-right: 20px;\n}\n\n.listContainer {\n    width: 220px;\n    float: none;\n    max-height: 100%;\n    position: relative;\n    margin: 0 0.50%;\n    display: inline-block;\n    zoom: 1;\n    overflow: hidden;\n\n    display: table-cell;\n    vertical-align: top;\n    padding-left: 15px;\n}\n\n.listBackgroundView {\n    width: 100%;\n    background-color: var(--color-background);\n    max-height: calc(100vh - 230px);\n    overflow-y: scroll;\n    margin-top: -10px;\n    /* border-bottom-left-radius: var(--border-radius-2);\n    border-bottom-right-radius: var(--border-radius-2); */\n}\n\n.bottomView {\n    min-height: 50px;\n    width: 100%;\n    background-color: var(--color-background);\n    border-bottom-left-radius: var(--border-radius-2);\n    border-bottom-right-radius: var(--border-radius-2);\n}\n\n.mainBoardConentView {\n    width: calc(100% - 10px);\n    height: calc(100% - 50px);\n    margin-left: auto;\n    margin-right: auto;\n    padding-top: 10px;\n}\n\n.boardBNavBar {\n    width: 100%;\n    height: 50px;\n    background-color: rgba(0, 0, 0, 0.2);\n}\n    \n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}