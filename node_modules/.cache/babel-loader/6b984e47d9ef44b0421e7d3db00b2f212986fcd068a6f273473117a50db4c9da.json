{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_tiptap = _resolveComponent(\"el-tiptap\");\n  return _ctx.isEditable ? (_openBlock(), _createBlock(_component_el_tiptap, {\n    key: 0,\n    extensions: _ctx.extensions,\n    onOnUpdate: $options.onEditorUpdate,\n    enableCharCount: false,\n    content: $props.content,\n    placeholder: \"Write something ...\"\n  }, null, 8 /* PROPS */, [\"extensions\", \"onOnUpdate\", \"content\"])) : (_openBlock(), _createBlock(_component_el_tiptap, {\n    key: 1,\n    extensions: _ctx.readOnlyExtension,\n    onOnUpdate: $options.onEditorUpdate,\n    enableCharCount: false,\n    readonly: \"\",\n    content: $props.content,\n    placeholder: \"Write something ...\"\n  }, null, 8 /* PROPS */, [\"extensions\", \"onOnUpdate\", \"content\"]));\n}","map":{"version":3,"names":["_ctx","isEditable","_createBlock","_component_el_tiptap","key","extensions","onOnUpdate","$options","onEditorUpdate","enableCharCount","content","$props","placeholder","readOnlyExtension","readonly"],"sources":["/Users/Sam.Agyemang/Desktop/Dev/taskily/src/components/Editor.vue"],"sourcesContent":["\n<template>\n    <el-tiptap v-if=\"isEditable\" :extensions=\"extensions\" @onUpdate=\"onEditorUpdate\" :enableCharCount=\"false\" :content=\"content\" placeholder=\"Write something ...\"/>\n    <el-tiptap v-else :extensions=\"readOnlyExtension\" @onUpdate=\"onEditorUpdate\" :enableCharCount=\"false\" readonly :content=\"content\" placeholder=\"Write something ...\"/>\n  </template>\n  \n  <script>\n  import {\n    Document,\n    Text,\n    Paragraph,\n    Heading,\n    Bold,\n    Italic,\n    Strike,\n    Underline,\n    Link,\n    Image,\n    Blockquote,\n    ListItem,\n    BulletList, // use with ListItem\n    OrderedList, // use with ListItem\n    TodoItem,\n    TodoList, // use with TodoItem\n    TextAlign,\n    Indent,\n    HorizontalRule,\n    HardBreak,\n    History,\n    Fullscreen,\n    CodeView\n    // SelectAll,\n  } from \"element-tiptap\";\n\n  export default {\n    name: \"Editor\",\n    props: {\n        isReadonly: {\n            type: Boolean, \n            default: false \n        }, \n        content: {\n            type: String, \n            default: ''\n        }\n    },\n    data: () => ({\n      extensions: [\n        Document,\n        Text,\n        Paragraph,\n        // new Heading({ level: 5 }),\n        Bold,\n        Italic,\n        Underline,\n        Strike,\n        TextAlign,\n        Link,\n        Image,\n        Text,\n        OrderedList        \n        // new Blockquote(),\n        // new TextAlign(),\n        // new BulletList({ bubble: true }),\n        // new OrderedList({ bubble: true }),\n        // new Indent(),\n        // new HardBreak(),\n        // new HorizontalRule({ bubble: true }),\n        // new Fullscreen(),\n        // new CodeView({\n        //   codemirror,\n        //   codemirrorOptions: {\n        //     styleActiveLine: true,\n        //     autoCloseTags: true\n        //   }\n        // }),\n        // History\n      ],\n      readOnlyExtension: [\n        Document,\n        Text,\n        Paragraph\n      ],\n      isEditable: true\n    }), \n    methods: {\n        onEditorUpdate(updatedContent) {\n            console.warn('editor updated: ', updatedContent)\n            this.$emit('didUpdateEditor', updatedContent)\n        }\n    }\n  };\n  </script>\n  \n\n<style lang=\"scss\">\n// .el-tiptap-editor__menu-bar:before {\n//     background-color: transparent !important;\n// }\n\n</style>"],"mappings":";;;SAEqBA,IAAA,CAAAC,UAAU,I,cAA3BC,YAAA,CAAgKC,oBAAA;IAFpKC,GAAA;IAEkCC,UAAU,EAAEL,IAAA,CAAAK,UAAU;IAAGC,UAAQ,EAAEC,QAAA,CAAAC,cAAc;IAAGC,eAAe,EAAE,KAAK;IAAGC,OAAO,EAAEC,MAAA,CAAAD,OAAO;IAAEE,WAAW,EAAC;qFACzIV,YAAA,CAAqKC,oBAAA;IAHzKC,GAAA;IAGuBC,UAAU,EAAEL,IAAA,CAAAa,iBAAiB;IAAGP,UAAQ,EAAEC,QAAA,CAAAC,cAAc;IAAGC,eAAe,EAAE,KAAK;IAAEK,QAAQ,EAAR,EAAQ;IAAEJ,OAAO,EAAEC,MAAA,CAAAD,OAAO;IAAEE,WAAW,EAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}