{"ast":null,"code":"import { ref } from 'vue';\nimport { usePrimeVue } from 'primevue/config';\n// import { useToast } from \"primevue/usetoast\";\n\nexport default {\n  __name: 'DragAndDropFileView',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const $primevue = usePrimeVue();\n    // const toast = useToast();\n\n    const totalSize = ref(0);\n    const totalSizePercent = ref(0);\n    const files = ref([]);\n    const onRemoveTemplatingFile = (file, removeFileCallback, index) => {\n      removeFileCallback(index);\n      totalSize.value -= parseInt(formatSize(file.size));\n      totalSizePercent.value = totalSize.value / 10;\n    };\n    const onClearTemplatingUpload = clear => {\n      clear();\n      totalSize.value = 0;\n      totalSizePercent.value = 0;\n    };\n    const onSelectedFiles = event => {\n      files.value = event.files;\n      files.value.forEach(file => {\n        totalSize.value += parseInt(formatSize(file.size));\n      });\n    };\n    const uploadEvent = callback => {\n      totalSizePercent.value = totalSize.value / 10;\n      callback();\n    };\n    const onTemplatedUpload = () => {\n      // toast.add({ severity: \"info\", summary: \"Success\", detail: \"File Uploaded\", life: 3000 });\n    };\n    const formatSize = bytes => {\n      const k = 1024;\n      const dm = 3;\n      const sizes = $primevue.config.locale.fileSizeTypes;\n      if (bytes === 0) {\n        return `0 ${sizes[0]}`;\n      }\n      const i = Math.floor(Math.log(bytes) / Math.log(k));\n      const formattedSize = parseFloat((bytes / Math.pow(k, i)).toFixed(dm));\n      return `${formattedSize} ${sizes[i]}`;\n    };\n    const __returned__ = {\n      $primevue,\n      totalSize,\n      totalSizePercent,\n      files,\n      onRemoveTemplatingFile,\n      onClearTemplatingUpload,\n      onSelectedFiles,\n      uploadEvent,\n      onTemplatedUpload,\n      formatSize,\n      ref,\n      get usePrimeVue() {\n        return usePrimeVue;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","usePrimeVue","$primevue","totalSize","totalSizePercent","files","onRemoveTemplatingFile","file","removeFileCallback","index","value","parseInt","formatSize","size","onClearTemplatingUpload","clear","onSelectedFiles","event","forEach","uploadEvent","callback","onTemplatedUpload","bytes","k","dm","sizes","config","locale","fileSizeTypes","i","Math","floor","log","formattedSize","parseFloat","pow","toFixed"],"sources":["/Users/Sam.Agyemang/Desktop/Dev/taskily/src/components/DragAndDropFileView.vue"],"sourcesContent":["\n<template>\n    <div class=\"card\">\n        <!-- <Toast /> -->\n        <FileUpload name=\"demo[]\" url=\"/api/upload\" @upload=\"onTemplatedUpload($event)\" :multiple=\"true\" accept=\"image/*\" :maxFileSize=\"1000000\" @select=\"onSelectedFiles\">\n            <template #header=\"{ chooseCallback, uploadCallback, clearCallback, files }\">\n                <div class=\"flex flex-wrap justify-between items-center flex-1 gap-4\">\n                    <div class=\"flex gap-2\">\n                        <Button @click=\"chooseCallback()\" icon=\"pi pi-images\" rounded outlined severity=\"secondary\"></Button>\n                        <Button @click=\"uploadEvent(uploadCallback)\" icon=\"pi pi-cloud-upload\" rounded outlined severity=\"success\" :disabled=\"!files || files.length === 0\"></Button>\n                        <Button @click=\"clearCallback()\" icon=\"pi pi-times\" rounded outlined severity=\"danger\" :disabled=\"!files || files.length === 0\"></Button>\n                    </div>\n                    <ProgressBar :value=\"totalSizePercent\" :showValue=\"false\" class=\"md:w-20rem h-1 w-full md:ml-auto\">\n                        <span class=\"whitespace-nowrap\">{{ totalSize }}B / 1Mb</span>\n                    </ProgressBar>\n                </div>\n            </template>\n            <template #content=\"{ files, uploadedFiles, removeUploadedFileCallback, removeFileCallback }\">\n                <div class=\"flex flex-col gap-8 pt-4\">\n                    <div v-if=\"files.length > 0\">\n                        <h5>Pending</h5>\n                        <div class=\"flex flex-wrap gap-4\">\n                            <div v-for=\"(file, index) of files\" :key=\"file.name + file.type + file.size\" class=\"p-8 rounded-border flex flex-col border border-surface items-center gap-4\">\n                                <div>\n                                    <img role=\"presentation\" :alt=\"file.name\" :src=\"file.objectURL\" width=\"100\" height=\"50\" />\n                                </div>\n                                <span class=\"font-semibold text-ellipsis max-w-60 whitespace-nowrap overflow-hidden\">{{ file.name }}</span>\n                                <div>{{ formatSize(file.size) }}</div>\n                                <Badge value=\"Pending\" severity=\"warn\" />\n                                <Button icon=\"pi pi-times\" @click=\"onRemoveTemplatingFile(file, removeFileCallback, index)\" outlined rounded severity=\"danger\" />\n                            </div>\n                        </div>\n                    </div>\n\n                    <div v-if=\"uploadedFiles.length > 0\">\n                        <h5>Completed</h5>\n                        <div class=\"flex flex-wrap gap-4\">\n                            <div v-for=\"(file, index) of uploadedFiles\" :key=\"file.name + file.type + file.size\" class=\"p-8 rounded-border flex flex-col border border-surface items-center gap-4\">\n                                <div>\n                                    <img role=\"presentation\" :alt=\"file.name\" :src=\"file.objectURL\" width=\"100\" height=\"50\" />\n                                </div>\n                                <span class=\"font-semibold text-ellipsis max-w-60 whitespace-nowrap overflow-hidden\">{{ file.name }}</span>\n                                <div>{{ formatSize(file.size) }}</div>\n                                <Badge value=\"Completed\" class=\"mt-4\" severity=\"success\" />\n                                <Button icon=\"pi pi-times\" @click=\"removeUploadedFileCallback(index)\" outlined rounded severity=\"danger\" />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </template>\n            <template #empty>\n                <div class=\"flex items-center justify-center flex-col\">\n                    <i class=\"pi pi-cloud-upload !border-2 !rounded-full !p-8 !text-4xl !text-muted-color\" />\n                    <p class=\"mt-6 mb-0\">Drag and drop files to here to upload.</p>\n                </div>\n            </template>\n        </FileUpload>\n    </div>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\nimport { usePrimeVue } from 'primevue/config';\n// import { useToast } from \"primevue/usetoast\";\n\nconst $primevue = usePrimeVue();\n// const toast = useToast();\n\nconst totalSize = ref(0);\nconst totalSizePercent = ref(0);\nconst files = ref([]);\n\nconst onRemoveTemplatingFile = (file, removeFileCallback, index) => {\n    removeFileCallback(index);\n    totalSize.value -= parseInt(formatSize(file.size));\n    totalSizePercent.value = totalSize.value / 10;\n};\n\nconst onClearTemplatingUpload = (clear) => {\n    clear();\n    totalSize.value = 0;\n    totalSizePercent.value = 0;\n};\n\nconst onSelectedFiles = (event) => {\n    files.value = event.files;\n    files.value.forEach((file) => {\n        totalSize.value += parseInt(formatSize(file.size));\n    });\n};\n\nconst uploadEvent = (callback) => {\n    totalSizePercent.value = totalSize.value / 10;\n    callback();\n};\n\nconst onTemplatedUpload = () => {\n    // toast.add({ severity: \"info\", summary: \"Success\", detail: \"File Uploaded\", life: 3000 });\n};\n\nconst formatSize = (bytes) => {\n    const k = 1024;\n    const dm = 3;\n    const sizes = $primevue.config.locale.fileSizeTypes;\n\n    if (bytes === 0) {\n        return `0 ${sizes[0]}`;\n    }\n\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    const formattedSize = parseFloat((bytes / Math.pow(k, i)).toFixed(dm));\n\n    return `${formattedSize} ${sizes[i]}`;\n};\n</script>\n"],"mappings":"AA6DA,SAASA,GAAG,QAAQ,KAAK;AACzB,SAASC,WAAW,QAAQ,iBAAiB;AAC7C;;;;;;;;IAEA,MAAMC,SAAS,GAAGD,WAAW,CAAC,CAAC;IAC/B;;IAEA,MAAME,SAAS,GAAGH,GAAG,CAAC,CAAC,CAAC;IACxB,MAAMI,gBAAgB,GAAGJ,GAAG,CAAC,CAAC,CAAC;IAC/B,MAAMK,KAAK,GAAGL,GAAG,CAAC,EAAE,CAAC;IAErB,MAAMM,sBAAsB,GAAGA,CAACC,IAAI,EAAEC,kBAAkB,EAAEC,KAAK,KAAK;MAChED,kBAAkB,CAACC,KAAK,CAAC;MACzBN,SAAS,CAACO,KAAK,IAAIC,QAAQ,CAACC,UAAU,CAACL,IAAI,CAACM,IAAI,CAAC,CAAC;MAClDT,gBAAgB,CAACM,KAAK,GAAGP,SAAS,CAACO,KAAK,GAAG,EAAE;IACjD,CAAC;IAED,MAAMI,uBAAuB,GAAIC,KAAK,IAAK;MACvCA,KAAK,CAAC,CAAC;MACPZ,SAAS,CAACO,KAAK,GAAG,CAAC;MACnBN,gBAAgB,CAACM,KAAK,GAAG,CAAC;IAC9B,CAAC;IAED,MAAMM,eAAe,GAAIC,KAAK,IAAK;MAC/BZ,KAAK,CAACK,KAAK,GAAGO,KAAK,CAACZ,KAAK;MACzBA,KAAK,CAACK,KAAK,CAACQ,OAAO,CAAEX,IAAI,IAAK;QAC1BJ,SAAS,CAACO,KAAK,IAAIC,QAAQ,CAACC,UAAU,CAACL,IAAI,CAACM,IAAI,CAAC,CAAC;MACtD,CAAC,CAAC;IACN,CAAC;IAED,MAAMM,WAAW,GAAIC,QAAQ,IAAK;MAC9BhB,gBAAgB,CAACM,KAAK,GAAGP,SAAS,CAACO,KAAK,GAAG,EAAE;MAC7CU,QAAQ,CAAC,CAAC;IACd,CAAC;IAED,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;MAC5B;IAAA,CACH;IAED,MAAMT,UAAU,GAAIU,KAAK,IAAK;MAC1B,MAAMC,CAAC,GAAG,IAAI;MACd,MAAMC,EAAE,GAAG,CAAC;MACZ,MAAMC,KAAK,GAAGvB,SAAS,CAACwB,MAAM,CAACC,MAAM,CAACC,aAAa;MAEnD,IAAIN,KAAK,KAAK,CAAC,EAAE;QACb,OAAO,KAAKG,KAAK,CAAC,CAAC,CAAC,EAAE;MAC1B;MAEA,MAAMI,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,GAAG,CAACV,KAAK,CAAC,GAAGQ,IAAI,CAACE,GAAG,CAACT,CAAC,CAAC,CAAC;MACnD,MAAMU,aAAa,GAAGC,UAAU,CAAC,CAACZ,KAAK,GAAGQ,IAAI,CAACK,GAAG,CAACZ,CAAC,EAAEM,CAAC,CAAC,EAAEO,OAAO,CAACZ,EAAE,CAAC,CAAC;MAEtE,OAAO,GAAGS,aAAa,IAAIR,KAAK,CAACI,CAAC,CAAC,EAAE;IACzC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}