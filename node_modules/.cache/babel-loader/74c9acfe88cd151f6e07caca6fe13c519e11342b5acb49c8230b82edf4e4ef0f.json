{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelText as _vModelText, withDirectives as _withDirectives, createTextVNode as _createTextVNode, createCommentVNode as _createCommentVNode, normalizeStyle as _normalizeStyle, withCtx as _withCtx, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nimport _imports_0 from '@/assets/three_dots.png';\nconst _withScopeId = n => (_pushScopeId(\"data-v-48804fb0\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"boardBNavBar\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_2 = {\n  class: \"mainBoardConentView\"\n};\nconst _hoisted_3 = {\n  class: \"boardListsContainer\"\n};\nconst _hoisted_4 = [\"onInput\"];\nconst _hoisted_5 = {\n  key: 0,\n  class: \"addListBtn buttonload\"\n};\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa fa-circle-o-notch fa-spin\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_7 = [\"onClick\"];\nconst _hoisted_8 = [\"onClick\"];\nconst _hoisted_9 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", {\n  id: \"addIcon\",\n  class: \"material-symbols-outlined\"\n}, \"add\", -1 /* HOISTED */));\nconst _hoisted_10 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"footerTitleContainer\"\n}, [/*#__PURE__*/_createElementVNode(\"button\", {\n  class: \"addCardLabel\"\n}, \"New List\")], -1 /* HOISTED */));\nconst _hoisted_11 = [_hoisted_9, _hoisted_10];\nconst _hoisted_12 = [\"id\"];\nconst _hoisted_13 = {\n  class: \"badgeAndTitleContainer\"\n};\nconst _hoisted_14 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"colorBadge\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_15 = [\"onBlur\", \"onInput\", \"id\", \"onUpdate:modelValue\"];\nconst _hoisted_16 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"img\", {\n  src: _imports_0,\n  class: \"listNameLabel\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_17 = {\n  class: \"cardAndFooterContainer\"\n};\nconst _hoisted_18 = {\n  key: 0,\n  class: \"createListContainer\"\n};\nconst _hoisted_19 = [\"onInput\", \"id\"];\nconst _hoisted_20 = {\n  key: 0,\n  class: \"addListBtn buttonload\"\n};\nconst _hoisted_21 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa fa-circle-o-notch fa-spin\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_22 = [\"onClick\"];\nconst _hoisted_23 = [\"onClick\"];\nconst _hoisted_24 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", {\n  id: \"addIcon\",\n  class: \"material-symbols-outlined\"\n}, \"add\", -1 /* HOISTED */));\nconst _hoisted_25 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"footerTitleContainer\"\n}, [/*#__PURE__*/_createElementVNode(\"button\", {\n  class: \"addCardLabel\"\n}, \"New Card\")], -1 /* HOISTED */));\nconst _hoisted_26 = [_hoisted_24, _hoisted_25];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_NavBar = _resolveComponent(\"NavBar\");\n  const _component_CardView = _resolveComponent(\"CardView\");\n  const _component_DraggableView = _resolveComponent(\"DraggableView\");\n  const _component_CardDetailView = _resolveComponent(\"CardDetailView\");\n  const _component_v_overlay = _resolveComponent(\"v-overlay\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_NavBar, {\n    isExpanded: this.isSideBarExpanded\n  }, null, 8 /* PROPS */, [\"isExpanded\"]), _hoisted_1, _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [this.board != null ? (_openBlock(true), _createElementBlock(_Fragment, {\n    key: 0\n  }, _renderList(this.board.lists, (list, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"listContainer\",\n      key: list.id\n    }, [_createElementVNode(\"div\", {\n      class: \"createNewList\",\n      style: _normalizeStyle({\n        display: list.headerType == `creatingList` ? 'flex' : 'none'\n      })\n    }, [_withDirectives(_createElementVNode(\"textarea\", {\n      name: \"text\",\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.newListName = $event),\n      onInput: $event => $options.dynamicTextArea(index),\n      placeholder: \"Create New List\",\n      class: \"createNewListField\",\n      id: \"createNewListField_id\"\n    }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_4), [[_vModelText, $setup.newListName]]), $setup.isSavingCard ? (_openBlock(), _createElementBlock(\"button\", _hoisted_5, [_hoisted_6, _createTextVNode(\" Creating... \")])) : (_openBlock(), _createElementBlock(\"button\", {\n      key: 1,\n      class: \"addListBtn\",\n      onClick: $event => $options.createANewList(list, index)\n    }, \"Create List\", 8 /* PROPS */, _hoisted_7))], 4 /* STYLE */), _createElementVNode(\"div\", {\n      class: \"listFooterView\",\n      onClick: $event => $options.handleAddList(list, index),\n      style: _normalizeStyle({\n        display: list.headerType == `addList` ? 'flex' : 'none'\n      })\n    }, [..._hoisted_11], 12 /* STYLE, PROPS */, _hoisted_8), _createElementVNode(\"div\", {\n      class: \"listHeaderView\",\n      id: `headerMotherContainer_` + list.id,\n      style: _normalizeStyle({\n        display: list.headerType == `showListName` ? 'flex' : 'none'\n      })\n    }, [_createElementVNode(\"div\", _hoisted_13, [_hoisted_14, _withDirectives(_createElementVNode(\"textarea\", {\n      type: \"text\",\n      onBlur: $event => $options.didEditListName(list.listName, list._id, list.id),\n      onInput: $event => $options.listNameTextAreaGrow(list.id),\n      class: \"cardNameField\",\n      id: list.id,\n      \"onUpdate:modelValue\": $event => list.listName = $event\n    }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_15), [[_vModelText, list.listName]]), _createCommentVNode(\" <label class=\\\"listNameLabel\\\">{{ list.listName }}</label> \")]), _hoisted_16], 12 /* STYLE, PROPS */, _hoisted_12), _createElementVNode(\"div\", _hoisted_17, [_createVNode(_component_DraggableView, {\n      modelValue: list.cards,\n      \"onUpdate:modelValue\": $event => list.cards = $event,\n      group: \"allCards\",\n      \"item-key\": \"id\",\n      \"drag-class\": \"drag\",\n      \"ghost-class\": \"ghost\",\n      onChange: $options.onCardMoved\n    }, {\n      item: _withCtx(({\n        element\n      }) => [_createVNode(_component_CardView, {\n        card: element,\n        onClick: $event => $options.handleCardTapped(element, list)\n      }, null, 8 /* PROPS */, [\"card\", \"onClick\"])]),\n      _: 2 /* DYNAMIC */\n    }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"modelValue\", \"onUpdate:modelValue\", \"onChange\"]), list.isCreateCard == true ? (_openBlock(), _createElementBlock(\"div\", _hoisted_18, [_withDirectives(_createElementVNode(\"textarea\", {\n      name: \"text\",\n      \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.newCardName = $event),\n      onInput: $event => $options.autoGrow(index),\n      placeholder: \"Give your card a name\",\n      class: \"addListInputField\",\n      id: `newCardField_` + index\n    }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_19), [[_vModelText, $setup.newCardName]]), $setup.isSavingCard ? (_openBlock(), _createElementBlock(\"button\", _hoisted_20, [_hoisted_21, _createTextVNode(\" Adding... \")])) : (_openBlock(), _createElementBlock(\"button\", {\n      key: 1,\n      class: \"addListBtn\",\n      onClick: $event => $options.handleCreateCard(list, index)\n    }, \"Add Card\", 8 /* PROPS */, _hoisted_22))])) : (_openBlock(), _createElementBlock(_Fragment, {\n      key: 1\n    }, [list.cards != null && list.cards.length > 0 || list.isAddCard == true ? (_openBlock(), _createElementBlock(\"div\", {\n      key: 0,\n      class: \"listFooterView\",\n      onClick: $event => $options.handleAddCard(list, index)\n    }, [..._hoisted_26], 8 /* PROPS */, _hoisted_23)) : _createCommentVNode(\"v-if\", true)], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))])]);\n  }), 128 /* KEYED_FRAGMENT */)) : _createCommentVNode(\"v-if\", true)])]), _createVNode(_component_v_overlay, {\n    modelValue: $setup.isCardTapped,\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $setup.isCardTapped = $event),\n    class: \"align-center justify-center overLayContainer\",\n    contained: \"\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_CardDetailView, {\n      card: this.selectedCard,\n      list: this.selectedList,\n      onOverlayDismissed: $options.handleOverlayDismissed\n    }, null, 8 /* PROPS */, [\"card\", \"list\", \"onOverlayDismissed\"])]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"])]);\n}","map":{"version":3,"names":["_imports_0","_createElementVNode","class","key","id","_hoisted_9","_hoisted_10","src","_hoisted_24","_hoisted_25","_createElementBlock","_createVNode","_component_NavBar","isExpanded","isSideBarExpanded","_hoisted_1","_hoisted_2","_hoisted_3","board","_Fragment","_renderList","lists","list","index","style","_normalizeStyle","display","headerType","name","_cache","$event","$setup","newListName","onInput","$options","dynamicTextArea","placeholder","_hoisted_4","isSavingCard","_hoisted_5","_hoisted_6","_createTextVNode","onClick","createANewList","_hoisted_7","handleAddList","_hoisted_11","_hoisted_8","_hoisted_13","_hoisted_14","type","onBlur","didEditListName","listName","_id","listNameTextAreaGrow","_hoisted_15","_createCommentVNode","_hoisted_16","_hoisted_12","_hoisted_17","_component_DraggableView","modelValue","cards","group","onChange","onCardMoved","item","_withCtx","element","_component_CardView","card","handleCardTapped","_","isCreateCard","_hoisted_18","newCardName","autoGrow","_hoisted_19","_hoisted_20","_hoisted_21","handleCreateCard","_hoisted_22","length","isAddCard","handleAddCard","_hoisted_26","_hoisted_23","_component_v_overlay","isCardTapped","contained","default","_component_CardDetailView","selectedCard","selectedList","onOverlayDismissed","handleOverlayDismissed"],"sources":["/Users/samuelrockon/Desktop/Dev/taskily/src/components/BoardContentView.vue"],"sourcesContent":["<template>\n    <div>\n        <NavBar :isExpanded=\"this.isSideBarExpanded\"/>\n        <div class=\"boardBNavBar\">\n\n        </div>\n        <div class=\"mainBoardConentView\">\n            <div class=\"boardListsContainer\">\n                 <div v-if=\"this.board != null\" class=\"listContainer\" v-for=\"(list, index) in this.board.lists\" :key=\"list.id\">\n                    <div class=\"createNewList\" :style=\"{display: list.headerType ==  `creatingList` ? 'flex' : 'none'}\">\n                            <textarea name=\"text\" v-model=\"newListName\" @input=\"dynamicTextArea(index)\" placeholder=\"Create New List\" class=\"createNewListField\" id=\"createNewListField_id\"></textarea>\n                            <button v-if=\"isSavingCard\" class=\"addListBtn buttonload\">\n                               <i class=\"fa fa-circle-o-notch fa-spin\"></i> Creating... \n                            </button>\n                           <button v-else class=\"addListBtn\" @click=\"createANewList(list, index)\">Create List</button>\n                    </div>\n                    <div class=\"listFooterView\" @click=\"handleAddList(list, index)\" :style=\"{display: list.headerType ==  `addList` ? 'flex' : 'none'}\">\n                        <span id=\"addIcon\" class=\"material-symbols-outlined\">add</span>\n                        <div class=\"footerTitleContainer\">\n                            <button class=\"addCardLabel\">New List</button>\n                        </div>\n                     </div>\n                     <div class=\"listHeaderView\" :id=\"`headerMotherContainer_` + list.id\" :style=\"{display: list.headerType ==  `showListName` ? 'flex' : 'none'}\">\n                         <div class=\"badgeAndTitleContainer\">\n                            <div class=\"colorBadge\"></div>\n                            <textarea type=\"text\" v-on:blur=\"didEditListName(list.listName, list._id, list.id)\"  @input=\"listNameTextAreaGrow(list.id)\" class=\"cardNameField\" :id=\"list.id\" v-model=\"list.listName\"></textarea>\n                            <!-- <label class=\"listNameLabel\">{{ list.listName }}</label> -->\n                         </div>\n                         <img src=\"@/assets/three_dots.png\" class=\"listNameLabel\"></img>\n                     </div>\n                     <div class=\"cardAndFooterContainer\">\n                        <DraggableView v-model=\"list.cards\" \n                             group=\"allCards\" \n                             item-key=\"id\"\n                             drag-class=\"drag\"\n                             ghost-class=\"ghost\"\n                             @change=\"onCardMoved\">\n                           <template #item=\"{element}\">\n                            <CardView :card=\"element\" @click=\"handleCardTapped(element, list)\"></CardView>\n                           </template>\n                       </DraggableView>\n                        <div v-if=\"list.isCreateCard == true\" class=\"createListContainer\">\n                            <textarea name=\"text\" v-model=\"newCardName\" @input=\"autoGrow(index)\" placeholder=\"Give your card a name\" class=\"addListInputField\" :id=\"`newCardField_` + index\"></textarea>\n                            <button v-if=\"isSavingCard\" class=\"addListBtn buttonload\">\n                               <i class=\"fa fa-circle-o-notch fa-spin\"></i> Adding... \n                            </button>\n                           <button v-else class=\"addListBtn\" @click=\"handleCreateCard(list, index)\">Add Card</button>\n                        </div>\n                      <div v-else v-if=\"list.cards != null && list.cards.length > 0 || list.isAddCard == true\" class=\"listFooterView\" @click=\"handleAddCard(list, index)\">\n                        <span id=\"addIcon\" class=\"material-symbols-outlined\">add</span>\n                        <div class=\"footerTitleContainer\">\n                            <button class=\"addCardLabel\">New Card</button>\n                        </div>\n                       </div>\n                      \n                    </div>\n                    \n                 </div>\n\n           </div>\n        </div>\n        <v-overlay v-model=\"isCardTapped\" class=\"align-center justify-center overLayContainer\" contained>\n            <CardDetailView :card=\"this.selectedCard\" :list=\"this.selectedList\" @overlayDismissed=\"handleOverlayDismissed\"/>\n        </v-overlay>\n    </div>\n</template>\n<script>\nimport NavBar from '@/components/NavBarView.vue'\nimport CardDetailView from '@/components/PopOverCardView.vue'\nimport DraggableView from 'vuedraggable'\nimport CardView from '@/views/CardView.vue'\nimport { ref } from 'vue'\nimport { BASE_URL } from '@/config'\nimport axios from 'axios';\n\nexport default {\n    inject: [\"eventBus\"],\n    props: [\"isExpanded\"],\n    components: {\n        NavBar, CardView, CardDetailView, DraggableView\n    }, \n    setup() {\n        var isSideBarExpanded = ref(true)\n        var board = ref([])\n        var isCardTapped = ref(false)\n        var newCardName = ref(\"\")\n        var newListName = ref(\"\")\n        var boardId = ref(\"\")\n        var selectedCard = ref(Object)\n        var selectedList = ref(Object)\n        var allCards = ref([])\n        var isSavingCard = ref(false)\n        return { isSideBarExpanded, board, newCardName, newListName, isCardTapped , boardId, selectedCard, selectedList, allCards, isSavingCard}\n    },\n    methods: {\n        listNameTextAreaGrow(listId) {\n            let element = document.getElementById(listId) // cardNameId\n            if (element != null) {\n                element.style.height = \"24px\";\n                element.style.height = (element.scrollHeight) + \"px\";\n            }\n\n            let contId = \"headerMotherContainer_\" + listId\n            let badgeAndTitleContainer = document.getElementById(contId) \n            console.log(\"lstid: \", contId, \"element: \", badgeAndTitleContainer == null)\n            if (badgeAndTitleContainer != null ) {\n                badgeAndTitleContainer.style.height = (element.scrollHeight + 30) + \"px\";\n            }\n        },\n     async didEditListName(listName, list_id, listId) {\n        console.log(\"didEditListName: \", listName)\n        var params = {\n            list_id: list_id, \n            listName: listName, \n         }\n         var fullURL = BASE_URL + \"board/updateListName\"\n         await axios.post(fullURL, params).then((response) => {\n          if (response.data != null) {\n             let data = response.data\n             console.log(\"list update resp data: \", data)\n             let contId = \"headerMotherContainer_\" + listId\n            let badgeAndTitleContainer = document.getElementById(contId) \n            console.log(\"lstid: \", contId, \"element: \", badgeAndTitleContainer == null)\n            if (badgeAndTitleContainer != null ) {\n                badgeAndTitleContainer.style.height = \"50px\";\n            }\n            }\n          })\n        },\n        sortedCards(cards) {\n            return cards.sort((a,b)=> a.position - b.position)\n        },\n        async setListEmpty(listId) {\n         var params = {\n            listId: listId\n        }\n        var fullURL = BASE_URL + \"board/setEmptyList\"\n        await axios.post(fullURL, params).then((response) => {\n          if (response.data != null) {\n            let data = response.data\n            console.log(\"resp data: \", data)\n            if (data.statusCode == 200) {\n                console.log(\"list and card info updated: \", data.resp)\n              }\n             }\n          })\n        },\n       async updateBoardInfo(cards, cardIds, list_id, listId) {\n        var params = {\n            cards: cards, \n            cardIds: cardIds, \n            listId: listId, \n            list_id: list_id\n        }\n        var fullURL = BASE_URL + \"board/updateList\"\n        await axios.post(fullURL, params).then((response) => {\n          if (response.data != null) {\n            let data = response.data\n            if (data.statusCode == 200) {\n                console.log(\"list and card info updated: \", data.resp)\n              }\n             }\n          })\n      },\n      onCardMoved(e) {\n       console.log(\"onCardMoved: \", e) \n       let item = e.added || e.removed || e.moved; \n       if (e.removed != null) { // Removed: removed from one list to another\n        for (var listIndex in this.board.lists) {\n          var list = this.board.lists[listIndex]\n          let list_id = list._id\n          let listId = list.id\n          if (list.cards.length > 0) {\n            var cards = []\n            var cardIds = []\n             for (var cardPosition in list.cards) {\n                let card = list.cards[cardPosition]\n                card.position = cardPosition\n                cardIds.push(card.id)\n                cards.push({id: card.id, position: cardPosition})\n             }\n             this.updateBoardInfo(cards, cardIds, list_id, listId)\n          } else {\n            // set list empty\n            this.setListEmpty(list_id)\n          }\n        }\n        // this.getBoardBy(this.boardId)\n      }\n\n      if (e.moved != null) { // moved: moved within the same list\n        let listId = e.moved.element.listId\n        console.log(\"moved: \", e.moved.element, \"listId: \", listId)\n        let listIndex = this.board.lists.findIndex(x => x.id === listId);\n        let list = this.board.lists[listIndex]\n        let list_id = list._id\n        var cards = []\n        var cardIds = []\n        for (var cardPosition in list.cards) {\n            let card = list.cards[cardPosition]\n            card.position = cardPosition\n            cardIds.push(card.id)\n            cards.push({id: card.id, position: cardPosition})\n        }\n        this.updateBoardInfo(cards, cardIds, list_id, listId)\n      }\n      \n\n    },\n        handleOverlayDismissed() {\n            this.isCardTapped = false \n            // let path = \"/board/\" + this.boardId\n            // this.$router.push({path: path})\n            this.$router.go(-1)\n            // this.getBoardBy(this.boardId)\n        },\n        handleCardTapped(card, list) {\n            // this.isCardTapped = true \n            // this.eventBus.emit('cardOpened', card)\n            // this.selectedCard = card\n            // this.selectedList = list\n            // emitter.emit('cardOpened', card);\n            // EventBus.$emit('cardOpened', card);\n            // 'b/:id/c/:id'\n            let path = \"/b/\" + this.boardId\n            this.$router.push(\n                {\n                    path: path, \n                    query: {\n                        card: card._id\n                    }\n                })\n\n        },\n      async createANewList(list, index) {\n        // Create List\n        var params = {\n          listName: this.newListName,\n          boardId: this.boardId,\n          isAddCard: true, \n          isCreateList: false,\n          headerType: \"showListName\",\n          id: Date.now(), \n          owner: \"1721545684258\"\n        }\n        var fullURL = BASE_URL + \"board/newList\"\n        console.log(\"full url: \", fullURL, \"params: \", params)\n        await axios.post(fullURL, params).then((response) => {\n          if (response.data != null) {\n            let data = response.data\n            console.log(\"resp data: \", data)\n            if (data.statusCode == 200) {\n                console.log(\"created new list: \", data.resp)\n                this.getBoardBy(this.boardId)\n              }\n             }\n          })\n          this.newListName = \"\"\n    },\n        handleAddList(list, index) {\n            list.isCreateList = true \n            list.headerType = \"creatingList\"\n            this.board.lists[index] = list\n        },\n        dynamicTextArea(index) {\n            let element = document.getElementById(\"createNewListField_id\")\n            element.style.height = \"15px\";\n            element.style.height = (element.scrollHeight) + \"px\";\n        },\n        autoGrow(index) {\n            let element = document.getElementById(`newCardField_` + index)\n            element.style.height = \"15px\";\n            element.style.height = (element.scrollHeight) + \"px\";\n        },\n       async handleCreateCard(list, index) {\n          var params = {\n             cardName: this.newCardName,\n             boardId: this.boardId,\n             listId: list.id,\n             id: Date.now(), \n             owner: \"1721545684258\"\n         }\n         var fullURL = BASE_URL + \"board/newCard\"\n         console.log(\"full url: \", fullURL, \"params: \", params)\n         await axios.post(fullURL, params).then((response) => {\n          if (response.data != null) {\n            let data = response.data\n            console.log(\"card resp data: \", data)\n            if (data.statusCode == 200) {\n                console.log(\"created new card: \", data.resp)\n                this.getBoardBy(this.boardId)\n              }\n             }\n          })\n          this.newCardName = \"\"\n        },\n        handleAddCard(list, index) {\n            list.isCreateCard = true \n            this.board[index] = list\n        }, \n     async getBoardBy(boardId) {\n        var params = {\n            boardId: boardId\n        }\n        var fullURL = BASE_URL + \"board/byId\"\n        await axios.post(fullURL, params).then((response) => {\n          if (response.data != null) {\n            let data = response.data\n            if (data != null && data.statusCode == 200) {\n                let apiBoard = data.resp\n                console.log(\"apiBoard: \", apiBoard)\n                // apiBoard.lists.push({ id: \"listPlaceholder\", listName: \"Add New List\", headerType: \"addList\", footerType: \"add\", isAddCard: false, isCreateList: false, cards: []})\n                // apiBoard.lists.sort((a,b)=> new Date(a.createdAt) - new Date(b.createdAt))\n                // for (var listIndex in apiBoard.lists) {\n                //     let cards = this.sortedCards(apiBoard.lists[listIndex].cards)\n                //     apiBoard.lists[listIndex].cards = cards\n                //     this.allCards.push(cards)\n                // }\n                this.board = apiBoard\n              }\n             }\n          })\n        }, \n     async getCardBy(card_id) {\n        var params = {\n            card_id: card_id\n        }\n        var fullURL = BASE_URL + \"board/getCardDetail\"\n        await axios.post(fullURL, params).then((response) => {\n          if (response.data != null) {\n            let data = response.data\n            console.log(\"card data: \", data)\n            if (data.statusCode == 200) {\n                let resp = data.resp\n                if (resp != null) {\n                   this.selectedCard = resp.card\n                   this.selectedList = resp.list\n                   this.isCardTapped = true \n                   this.$emit('cardDetailInfo', resp)\n                }\n                \n              }\n             }\n          })\n        }\n    },\n    watch: { \n        isExpanded: function(newVal, oldVal) {\n            console.log('Prop changed isSideBarExpanwded: ', newVal)\n            this.isSideBarExpanded = newVal\n        }, \n        '$route' () {\n          console.log(\"routed called\")\n        }\n    },  \n    mounted() {\n        let query = this.$route.query\n        let routeParams = this.$route.params\n        console.log(\"routeParams: \", routeParams)\n        console.log(\"query: \", query)\n        this.boardId = routeParams.id\n        this.getBoardBy(this.boardId)\n        if (query.card != null) {\n            // Fetch card info\n            this.getCardBy(query.card)\n        }\n    }, \n    created() {\n        console.log(\"updated\")\n    },\n    updated() {\n        let query = this.$route.query\n        if (query.card != null) {\n            // Fetch card info\n            this.getCardBy(query.card)\n        }\n    }\n}\n</script>\n<style scoped>\n.drag {\n  transform: rotate(5deg);\n}\n \n.ghost {\n  background: lightgray;\n  border-radius: 6px;\n}\n.ghost {\n  visibility: hidden;\n}\n\n.boardInfoView label {\n    font-weight: 500;\n    font-size: 10px;\n    margin-right: 8px;\n    margin-left: 1px;\n}\n.boardIcon {\n    width: 15px;\n    height: 15px;\n}\n.boardInfoView {\n    display: flex;\n    width: 120px;\n    height: 50px;\n    justify-content: space-evenly;\n    margin-top: 5px;\n}\n\n.cardNameLabel {\n    width: 200px;\n    margin-top: 8px;\n    margin-left: 10px;\n    margin-right: 10px;\n    font-weight: 700;\n    font-size: 13px;\n    text-align: left;\n    white-space: pre-wrap;\n}\n\n.footerTitleContainer {\n    width: auto;\n    height: 24px;\n    margin-top: 12px;\n    overflow: hidden;\n}\n#addIcon {\n    padding: 0;\n    margin: 0;\n    margin-top: 12px;\n    font-weight: 700;\n}\n\n.addCardLabel {\n    margin: 0;\n    padding: 0;\n    font-weight: 600;\n    font-size: 15px;\n    margin-left: 4px;\n}\n.cardAndFooterContainer {\n    height: 100%;\n    width: 100%;\n    overflow-y: scroll;\n    -webkit-overflow-scrolling: touch;\n    padding-bottom: 50px;\n    -ms-overflow-style: none;  /* Internet Explorer 10+ */\n    scrollbar-width: none;  /* Firefox */\n    padding-top: 8px;\n}\n.listFooterView {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    height: 50px;\n    width: 100%;\n    border-radius: var(--border-radius-1);\n    border: 1px solid var(--color-light);\n    z-index: 9999;\n    overflow: hidden;\n    background-color: white;\n    /* margin-top: -8px; */\n}\n\n.addListBtn {\n    display: block;\n    width: 100px;\n    height: 34px;\n    background-color: #FC6363;\n    color: white;\n    border-radius: var(--border-radius-1);\n    margin-left: 8px;\n    font-size: 14px;\n    font-weight: 600;\n    margin-top: 10px;\n    margin-bottom: 10px;\n}\n.addListInputField, .createNewListField {\n  padding: 8px;\n  width: 200px;\n  margin-left: 8px;\n  margin-right: 8px;\n  border: 1px solid var(--color-light);\n  border-radius: var(--border-radius-1);\n  text-align: left;\n  resize: none;\n  overflow: hidden;\n  height: 40px;\n  max-height: 500px;\n  max-lines: 200;\n  font-weight: 500;\n  font-size: 14px;\n}\n\n.createListContainer {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    /* height: 140px; */\n    width: 98%;\n    padding-top: 10px;\n    z-index: 9999;\n    overflow: hidden;\n    background-color: white;\n    align-items: center;\n    margin-top: 10px;\n    margin-right: auto;\n    margin-left: auto;\n    border-radius: var(--border-radius-1)\n}\n\n.createNewList {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    /* height: 140px; */\n    width: 98%;\n    padding-top: 10px;\n    z-index: 9999;\n    overflow: hidden;\n    background-color: white;\n    align-items: center;\n    margin-right: auto;\n    margin-left: auto;\n    border-radius: var(--border-radius-1)\n}\n\n\n.cardCell {\n    overflow: hidden;\n    width: 220px;\n    min-height: 50px;\n    margin-bottom: 10px;\n    border: 1px solid var(--color-light);\n    background-color: white;\n    display: flex;\n    flex-direction: column;\n    border-radius: var(--border-radius-1);\n    /* border-bottom-right-radius: var(--border-radius-2);\n    border-bottom-left-radius: var(--border-radius-2); */\n}\n\n.badgeAndTitleContainer {\n    display: flex;\n    flex-direction: row;\n}\n\n.badgeAndTitleContainer label {\n    margin-left: 10px;\n}\n\n.cardNameField {\n    display: flex;\n    width: 165px;\n    min-height: 30px;\n    margin-top: 13px;\n    font-size: 15px;\n    font-weight: 600;\n    resize: none;\n    color: var(--color-dark);\n    margin-bottom: 8px;\n    margin-left: 8px;\n}\n\n.listNameLabel {\n    height: 24px;\n    font-weight: 600;\n    font-size: 15px;\n    margin-top: auto;\n    margin-bottom: auto;\n}\n.colorBadge {\n    width: 4px;\n    height: 20px;\n    background-color: orange;\n    border-radius: var(--border-radius-1);\n    margin-top: auto;\n    margin-bottom: auto;\n    margin-left: 15px;\n}\n\n.listHeaderView {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    height: 50px;\n    width: 100%;\n    border-radius:  var(--border-radius-1);;\n    /* border-top-right-radius: var(--border-radius-2);\n    border-top-left-radius: var(--border-radius-2); */\n    border: 1px solid var(--color-light);\n    padding-right: 15px;\n    background-color: white;\n}\n\n\n.boardListsContainer {\n    width: 100%;\n    height: calc(100vh - 160px);\n    white-space: nowrap;\n    overflow-x: auto;\n    overflow-y: hidden;\n    -webkit-overflow-scrolling: touch;\n    padding-right: 20px;\n}\n\n.listContainer {\n    width: 220px;\n    /* background-color: #eee; */\n    float: none;\n    height: 100%;\n    margin: 0 0.50%;\n    display: inline-block;\n    zoom: 1;\n    /* overflow: hidden; */\n    /* overflow-y: scroll; */\n    overflow: hidden;\n}\n\n.mainBoardConentView {\n    width: calc(100% - 10px);\n    height: calc(100% - 130px);\n    margin-left: auto;\n    margin-right: auto;\n    padding-top: 20px;\n}\n\n.boardBNavBar {\n    width: calc(100% - 30px);\n    height: 50px;\n    background-color: white;\n    margin-left: auto;\n    margin-right: auto;\n    margin-top: 15px;\n    border-radius: var(--border-radius-1);\n}\n    \n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}