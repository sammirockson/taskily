{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, createTextVNode as _createTextVNode, normalizeStyle as _normalizeStyle, withCtx as _withCtx, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nimport _imports_0 from '@/assets/three_dots.png';\nconst _withScopeId = n => (_pushScopeId(\"data-v-48804fb0\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"mainBoardConentView\"\n};\nconst _hoisted_2 = {\n  class: \"boardListsContainer\",\n  id: \"boardListsContainer\"\n};\nconst _hoisted_3 = [\"onInput\"];\nconst _hoisted_4 = {\n  key: 0,\n  class: \"addListBtn buttonload\"\n};\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa fa-circle-o-notch fa-spin\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_6 = [\"onClick\"];\nconst _hoisted_7 = [\"onClick\"];\nconst _hoisted_8 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", {\n  id: \"addIcon\",\n  class: \"material-symbols-outlined\"\n}, \"add\", -1 /* HOISTED */));\nconst _hoisted_9 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"footerTitleContainer\"\n}, [/*#__PURE__*/_createElementVNode(\"button\", {\n  class: \"addCardLabel\"\n}, \"New List\")], -1 /* HOISTED */));\nconst _hoisted_10 = [_hoisted_8, _hoisted_9];\nconst _hoisted_11 = [\"id\"];\nconst _hoisted_12 = {\n  class: \"badgeAndTitleContainer\"\n};\nconst _hoisted_13 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"colorBadge\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_14 = [\"onBlur\", \"onInput\", \"id\", \"onUpdate:modelValue\"];\nconst _hoisted_15 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"img\", {\n  src: _imports_0,\n  class: \"listNameLabel\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_16 = [\"id\"];\nconst _hoisted_17 = {\n  class: \"cardAndFooterContainer\"\n};\nconst _hoisted_18 = {\n  key: 0,\n  class: \"createListContainer\"\n};\nconst _hoisted_19 = [\"onInput\", \"id\"];\nconst _hoisted_20 = {\n  key: 0,\n  class: \"addListBtn buttonload\"\n};\nconst _hoisted_21 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa fa-circle-o-notch fa-spin\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_22 = [\"onClick\"];\nconst _hoisted_23 = [\"id\"];\nconst _hoisted_24 = {\n  key: 0,\n  class: \"createListTipFooterView\"\n};\nconst _hoisted_25 = [\"onClick\"];\nconst _hoisted_26 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", {\n  id: \"addIcon\",\n  class: \"material-symbols-outlined\"\n}, \"add\", -1 /* HOISTED */));\nconst _hoisted_27 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"footerTitleContainer\"\n}, [/*#__PURE__*/_createElementVNode(\"button\", {\n  class: \"addCardLabel\"\n}, \"New Card\")], -1 /* HOISTED */));\nconst _hoisted_28 = [_hoisted_26, _hoisted_27];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_BoardNavItemsView = _resolveComponent(\"BoardNavItemsView\");\n  const _component_CardView = _resolveComponent(\"CardView\");\n  const _component_DraggableView = _resolveComponent(\"DraggableView\");\n  const _component_RouterView = _resolveComponent(\"RouterView\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createCommentVNode(\" <NavBar :isExpanded=\\\"this.isSideBarExpanded\\\"/> \"), _createVNode(_component_BoardNavItemsView, {\n    class: \"boardBNavBar\",\n    boardId: this.board.id,\n    boardName: this.board.name,\n    onHandleSearchBoard: $options.handleSearchBoard\n  }, null, 8 /* PROPS */, [\"boardId\", \"boardName\", \"onHandleSearchBoard\"]), _createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [this.board != null ? (_openBlock(true), _createElementBlock(_Fragment, {\n    key: 0\n  }, _renderList(this.board.lists, (list, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"listContainer\",\n      id: \"listContainer\",\n      key: list.id\n    }, [_createElementVNode(\"div\", {\n      class: \"createNewList\",\n      style: _normalizeStyle({\n        display: list.headerType == `creatingList` ? 'flex' : 'none'\n      })\n    }, [_withDirectives(_createElementVNode(\"textarea\", {\n      name: \"text\",\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.newListName = $event),\n      onInput: $event => $options.dynamicTextArea(index),\n      placeholder: \"Create New List\",\n      class: \"createNewListField\",\n      id: \"createNewListField_id\"\n    }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_3), [[_vModelText, $setup.newListName]]), $setup.isSavingCard ? (_openBlock(), _createElementBlock(\"button\", _hoisted_4, [_hoisted_5, _createTextVNode(\" Creating... \")])) : (_openBlock(), _createElementBlock(\"button\", {\n      key: 1,\n      class: \"addListBtn\",\n      onClick: $event => $options.createANewList(list, index)\n    }, \"Create List\", 8 /* PROPS */, _hoisted_6))], 4 /* STYLE */), _createElementVNode(\"div\", {\n      class: \"listFooterView\",\n      onClick: $event => $options.handleAddList(list, index),\n      style: _normalizeStyle({\n        display: list.headerType == `addList` ? 'flex' : 'none'\n      })\n    }, [..._hoisted_10], 12 /* STYLE, PROPS */, _hoisted_7), _createElementVNode(\"div\", {\n      class: \"listHeaderView\",\n      id: `headerMotherContainer_` + list.id,\n      style: _normalizeStyle({\n        display: list.headerType == `showListName` ? 'flex' : 'none'\n      })\n    }, [_createElementVNode(\"div\", _hoisted_12, [_hoisted_13, _withDirectives(_createElementVNode(\"textarea\", {\n      type: \"text\",\n      onBlur: $event => $options.didEditListName(list.listName, list._id, list.id),\n      onInput: $event => $options.listNameTextAreaGrow(list.id),\n      class: \"cardNameField\",\n      id: list.id,\n      \"onUpdate:modelValue\": $event => list.listName = $event\n    }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_14), [[_vModelText, list.listName]])]), _hoisted_15], 12 /* STYLE, PROPS */, _hoisted_11), this.isBtmViewVisible(list) ? (_openBlock(), _createElementBlock(\"div\", {\n      key: 0,\n      class: \"listBackgroundView\",\n      id: 'listBgView' + list._id\n    }, [_createElementVNode(\"div\", _hoisted_17, [_createCommentVNode(\" <RouterLink :to=\\\"`/b` + this.board._id + `/c` +  card._id\\\"  style=\\\"text-decoration: none; color: inherit;\\\"> \"), _createVNode(_component_DraggableView, {\n      modelValue: list.cards,\n      \"onUpdate:modelValue\": $event => list.cards = $event,\n      group: \"allCards\",\n      \"item-key\": \"id\",\n      \"drag-class\": \"drag\",\n      \"ghost-class\": \"ghost\",\n      onChange: $options.onCardMoved\n    }, {\n      item: _withCtx(({\n        element\n      }) => [_createVNode(_component_CardView, {\n        card: element,\n        boardId: this.board.id,\n        allMembers: this.allMembers,\n        tags: this.getCardTags(element)\n      }, null, 8 /* PROPS */, [\"card\", \"boardId\", \"allMembers\", \"tags\"])]),\n      _: 2 /* DYNAMIC */\n    }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"modelValue\", \"onUpdate:modelValue\", \"onChange\"]), _createCommentVNode(\" </RouterLink> \"), list.isCreateCard == true ? (_openBlock(), _createElementBlock(\"div\", _hoisted_18, [_withDirectives(_createElementVNode(\"textarea\", {\n      name: \"text\",\n      \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.newCardName = $event),\n      onInput: $event => $options.autoGrow(index),\n      placeholder: \"Give your card a name\",\n      class: \"addListInputField\",\n      id: `newCardField_` + index\n    }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_19), [[_vModelText, $setup.newCardName]]), $setup.isSavingCard ? (_openBlock(), _createElementBlock(\"button\", _hoisted_20, [_hoisted_21, _createTextVNode(\" Adding... \")])) : (_openBlock(), _createElementBlock(\"button\", {\n      key: 1,\n      class: \"addListBtn\",\n      onClick: $event => $options.handleCreateCard(list, index)\n    }, \"Add Card\", 8 /* PROPS */, _hoisted_22))])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" <div v-else v-if=\\\"list.cards != null && list.cards.length > 0 || list.isAddCard == true\\\" class=\\\"listFooterView\\\" @click=\\\"handleAddCard(list, index)\\\">\\n                        <span id=\\\"addIcon\\\" class=\\\"material-symbols-outlined\\\">add</span>\\n                        <div class=\\\"footerTitleContainer\\\">\\n                            <button class=\\\"addCardLabel\\\">New Card</button>\\n                        </div>\\n                       </div> \")])], 8 /* PROPS */, _hoisted_16)) : _createCommentVNode(\"v-if\", true), this.isBtmViewVisible(list) || list.isCreateCard ? (_openBlock(), _createElementBlock(\"div\", {\n      key: 1,\n      class: \"bottomView\",\n      id: 'bottomView_' + list._id\n    }, [list.isCreateCard == true ? (_openBlock(), _createElementBlock(\"div\", _hoisted_24, [_createCommentVNode(\" <textarea name=\\\"text\\\" v-model=\\\"newCardName\\\" @input=\\\"autoGrow(index, list)\\\" placeholder=\\\"Give your card a name\\\" class=\\\"addListInputField\\\" :id=\\\"`newCardField_` + index\\\"></textarea>\\n                            <button v-if=\\\"isSavingCard\\\" class=\\\"addListBtn buttonload\\\">\\n                               <i class=\\\"fa fa-circle-o-notch fa-spin\\\"></i> Adding... \\n                            </button>\\n                           <button v-else class=\\\"addListBtn\\\" @click=\\\"handleCreateCard(list, index)\\\">Add Card</button> \")])) : (_openBlock(), _createElementBlock(_Fragment, {\n      key: 1\n    }, [list.cards != null && list.cards.length > 0 || list.isAddCard == true || list.isCreateCard == true ? (_openBlock(), _createElementBlock(\"div\", {\n      key: 0,\n      class: \"listFooterView\",\n      onClick: $event => $options.handleAddCard(list, index)\n    }, [..._hoisted_28], 8 /* PROPS */, _hoisted_25)) : _createCommentVNode(\"v-if\", true)], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))], 8 /* PROPS */, _hoisted_23)) : _createCommentVNode(\"v-if\", true)]);\n  }), 128 /* KEYED_FRAGMENT */)) : _createCommentVNode(\"v-if\", true)])]), _createVNode(_component_RouterView)]);\n}","map":{"version":3,"names":["_imports_0","class","id","key","_createElementVNode","_hoisted_8","_hoisted_9","src","_hoisted_26","_hoisted_27","_createElementBlock","_createCommentVNode","_createVNode","_component_BoardNavItemsView","boardId","board","boardName","name","onHandleSearchBoard","$options","handleSearchBoard","_hoisted_1","_hoisted_2","_Fragment","_renderList","lists","list","index","style","_normalizeStyle","display","headerType","_cache","$event","$setup","newListName","onInput","dynamicTextArea","placeholder","_hoisted_3","isSavingCard","_hoisted_4","_hoisted_5","_createTextVNode","onClick","createANewList","_hoisted_6","handleAddList","_hoisted_10","_hoisted_7","_hoisted_12","_hoisted_13","type","onBlur","didEditListName","listName","_id","listNameTextAreaGrow","_hoisted_14","_hoisted_15","_hoisted_11","isBtmViewVisible","_hoisted_17","_component_DraggableView","modelValue","cards","group","onChange","onCardMoved","item","_withCtx","element","_component_CardView","card","allMembers","tags","getCardTags","_","isCreateCard","_hoisted_18","newCardName","autoGrow","_hoisted_19","_hoisted_20","_hoisted_21","handleCreateCard","_hoisted_22","_hoisted_16","_hoisted_24","length","isAddCard","handleAddCard","_hoisted_28","_hoisted_25","_hoisted_23","_component_RouterView"],"sources":["/Users/Sam.Agyemang/Desktop/Dev/taskily/src/components/BoardContentView.vue"],"sourcesContent":["<template>\n    <div>\n        <!-- <NavBar :isExpanded=\"this.isSideBarExpanded\"/> -->\n        <BoardNavItemsView class=\"boardBNavBar\" :boardId=\"this.board.id\" :boardName=\"this.board.name\" @handleSearchBoard=\"handleSearchBoard\"></BoardNavItemsView>\n        <div class=\"mainBoardConentView\">\n            <div class=\"boardListsContainer\" id=\"boardListsContainer\">\n                 <div v-if=\"this.board != null\" class=\"listContainer\" id=\"listContainer\"v-for=\"(list, index) in this.board.lists\" :key=\"list.id\">\n                    <div class=\"createNewList\" :style=\"{display: list.headerType ==  `creatingList` ? 'flex' : 'none'}\">\n                            <textarea name=\"text\" v-model=\"newListName\" @input=\"dynamicTextArea(index)\" placeholder=\"Create New List\" class=\"createNewListField\" id=\"createNewListField_id\"></textarea>\n                            <button v-if=\"isSavingCard\" class=\"addListBtn buttonload\">\n                               <i class=\"fa fa-circle-o-notch fa-spin\"></i> Creating... \n                            </button>\n                           <button v-else class=\"addListBtn\" @click=\"createANewList(list, index)\">Create List</button>\n                    </div>\n                    <div class=\"listFooterView\" @click=\"handleAddList(list, index)\" :style=\"{display: list.headerType ==  `addList` ? 'flex' : 'none'}\">\n                        <span id=\"addIcon\" class=\"material-symbols-outlined\">add</span>\n                        <div class=\"footerTitleContainer\">\n                            <button class=\"addCardLabel\">New List</button>\n                        </div>\n                     </div>\n                     <div class=\"listHeaderView\" :id=\"`headerMotherContainer_` + list.id\" :style=\"{display: list.headerType ==  `showListName` ? 'flex' : 'none'}\">\n                         <div class=\"badgeAndTitleContainer\">\n                            <div class=\"colorBadge\"></div>\n                            <textarea type=\"text\" v-on:blur=\"didEditListName(list.listName, list._id, list.id)\"  @input=\"listNameTextAreaGrow(list.id)\" class=\"cardNameField\" :id=\"list.id\" v-model=\"list.listName\"></textarea>\n                         </div>\n                         <img src=\"@/assets/three_dots.png\" class=\"listNameLabel\"></img>\n                     </div>\n                     <div class=\"listBackgroundView\" :id=\"'listBgView' + list._id\" v-if=\"this.isBtmViewVisible(list)\">\n                     <div class=\"cardAndFooterContainer\">\n                        <!-- <RouterLink :to=\"`/b` + this.board._id + `/c` +  card._id\"  style=\"text-decoration: none; color: inherit;\"> -->\n                        <DraggableView v-model=\"list.cards\" \n                             group=\"allCards\" \n                             item-key=\"id\"\n                             drag-class=\"drag\"\n                             ghost-class=\"ghost\"\n                             @change=\"onCardMoved\">\n                           <template #item=\"{element}\">\n                            <CardView :card=\"element\" :boardId=\"this.board.id\" :allMembers=\"this.allMembers\" :tags=\"this.getCardTags(element)\"></CardView>\n                           </template>\n                       </DraggableView>\n                      <!-- </RouterLink> -->\n                        <div v-if=\"list.isCreateCard == true\" class=\"createListContainer\">\n                            <textarea name=\"text\" v-model=\"newCardName\" @input=\"autoGrow(index)\" placeholder=\"Give your card a name\" class=\"addListInputField\" :id=\"`newCardField_` + index\"></textarea>\n                            <button v-if=\"isSavingCard\" class=\"addListBtn buttonload\">\n                               <i class=\"fa fa-circle-o-notch fa-spin\"></i> Adding... \n                            </button>\n                           <button v-else class=\"addListBtn\" @click=\"handleCreateCard(list, index)\">Add Card</button>\n                        </div>\n                      <!-- <div v-else v-if=\"list.cards != null && list.cards.length > 0 || list.isAddCard == true\" class=\"listFooterView\" @click=\"handleAddCard(list, index)\">\n                        <span id=\"addIcon\" class=\"material-symbols-outlined\">add</span>\n                        <div class=\"footerTitleContainer\">\n                            <button class=\"addCardLabel\">New Card</button>\n                        </div>\n                       </div> -->\n                        \n                      \n                    </div>\n                    \n                 </div>\n                   <div class=\"bottomView\" :id=\"'bottomView_' + list._id\" v-if=\"this.isBtmViewVisible(list) || list.isCreateCard\">\n                       <div v-if=\"list.isCreateCard == true\" class=\"createListTipFooterView\">\n                            <!-- <textarea name=\"text\" v-model=\"newCardName\" @input=\"autoGrow(index, list)\" placeholder=\"Give your card a name\" class=\"addListInputField\" :id=\"`newCardField_` + index\"></textarea>\n                            <button v-if=\"isSavingCard\" class=\"addListBtn buttonload\">\n                               <i class=\"fa fa-circle-o-notch fa-spin\"></i> Adding... \n                            </button>\n                           <button v-else class=\"addListBtn\" @click=\"handleCreateCard(list, index)\">Add Card</button> -->\n                        </div>\n                      <div v-else v-if=\"list.cards != null && list.cards.length > 0 || list.isAddCard == true || list.isCreateCard == true\" class=\"listFooterView\" @click=\"handleAddCard(list, index)\">\n                        <span id=\"addIcon\" class=\"material-symbols-outlined\">add</span>\n                        <div class=\"footerTitleContainer\">\n                            <button class=\"addCardLabel\">New Card</button>\n                        </div>\n                       </div>\n                   </div>\n                </div>\n\n                \n           </div>\n        </div>\n        <RouterView/>\n    </div>\n</template>\n<script>\nimport NavBar from '@/components/NavBarView.vue'\nimport DraggableView from 'vuedraggable'\nimport CardView from '@/views/CardView.vue'\nimport BoardNavItemsView from './BoardNavItemsView.vue'\nimport APIService from '@/APIService';\n\nimport { ref } from 'vue'\nimport CryptoJS from 'crypto-js'\nimport { BASE_URL, USER_CACHE_KEY } from '@/config'\nimport axios from 'axios';\n\nexport default {\n    inject: [\"eventBus\", \"cryptojs\"],\n    props: [\"isExpanded\"],\n    components: {\n        NavBar, CardView, DraggableView, BoardNavItemsView\n    }, \n    setup() {\n        var isSideBarExpanded = ref(true)\n        var board = ref([])\n        var isCardTapped = ref(false)\n        var newCardName = ref(\"\")\n        var newListName = ref(\"\")\n        var boardId = ref(\"\")\n        var selectedCard = ref(Object)\n        var selectedList = ref(Object)\n        var allCards = ref([])\n        var isSavingCard = ref(false)\n        var allBoardTags = ref([])\n        var isRefreshBoard = ref(true)\n        var currentUser = ref(null)\n        var dblists = ref([])\n        var allLists = ref([])\n        var allMembers = ref([])\n        return { \n            isSideBarExpanded, board, dblists, allLists, newCardName, newListName, isCardTapped, currentUser,\n            boardId, selectedCard, selectedList, allCards, isSavingCard, allBoardTags, isRefreshBoard, allMembers\n        }\n    },\n    methods: {\n        async getAllMembers() {\n          let routeParams = this.$route.params\n          let params = {\n            boardId: routeParams.boardId\n          }\n          let allMembers = await APIService.getBoardMembers(params)\n          console.log(\"all card members: \", allMembers)\n          if (allMembers != null) {\n            this.allMembers = allMembers;\n          }\n        },\n        handleSearchBoard(searchText) {\n            if (searchText.length > 0) {\n               var searchLists = []\n               let searchKey = searchText.toLowerCase()\n               searchLists = this.allLists\n               for (var index in searchLists) {\n                  let list = searchLists[index]\n                  if (list != undefined) {\n                    console.log('list: ', list)\n                  let cards = list.cards\n                  let cardFilter = cards.filter(card => card.cardName.toLowerCase().includes(searchKey))\n                  if (cardFilter.length > 0) {\n                    searchLists[index].cards = cardFilter\n                  } else {\n                    searchLists = searchLists.filter(x => x._id !== list._id)\n                  }\n                  }\n               }\n               console.log(\"handle search: \", searchText.length, 'searchLists card count: ')\n               this.board.lists = searchLists\n            } else {\n                this.getBoardBy(this.boardId) \n            }\n        },\n        isBtmViewVisible(list) {\n            return list.headerType ==  'addList'  || list.headerType == 'creatingList' ? false : true\n        },\n        getCardTags(card) {\n            let tagIds = card.selectedTags\n            return this.allBoardTags.filter( tag => tagIds.includes(tag.id));\n        },\n        listNameTextAreaGrow(listId) {\n            let element = document.getElementById(listId) // cardNameId\n            if (element != null) {\n                element.style.height = (element.scrollHeight) + \"px\";\n            }\n\n            let contId = \"headerMotherContainer_\" + listId\n            let badgeAndTitleContainer = document.getElementById(contId) \n            if (badgeAndTitleContainer != null ) {\n                badgeAndTitleContainer.style.height = (element.scrollHeight + 30) + \"px\";\n            }\n        },\n     async didEditListName(listName, list_id, listId) {\n        console.log(\"didEditListName: \", listName)\n        var params = {\n            list_id: list_id, \n            listName: listName, \n         }\n         var fullURL = BASE_URL + \"board/updateListName\"\n         await axios.post(fullURL, params).then((response) => {\n          if (response.data != null) {\n             let data = response.data\n             console.log(\"list update resp data: \", data)\n             let contId = \"headerMotherContainer_\" + listId\n            let badgeAndTitleContainer = document.getElementById(contId) \n            console.log(\"lstid: \", contId, \"element: \", badgeAndTitleContainer == null)\n            if (badgeAndTitleContainer != null ) {\n                badgeAndTitleContainer.style.height = \"60px\";\n            }\n            }\n          })\n        },\n        sortedCards(cards) {\n            return cards.sort((a,b)=> a.position - b.position)\n        },\n        async setListEmpty(listId) {\n         var params = {\n            listId: listId\n        }\n        var fullURL = BASE_URL + \"board/setEmptyList\"\n        await axios.post(fullURL, params).then((response) => {\n          if (response.data != null) {\n            let data = response.data\n            console.log(\"resp data: \", data)\n            if (data.statusCode == 200) {\n                console.log(\"list and card info updated: \", data.resp)\n              }\n             }\n          })\n        },\n       async updateBoardInfo(cards, cardIds, list_id, listId) {\n        var params = {\n            cards: cards, \n            cardIds: cardIds, \n            listId: listId, \n            list_id: list_id\n        }\n        var fullURL = BASE_URL + \"board/updateList\"\n        await axios.post(fullURL, params).then((response) => {\n          if (response.data != null) {\n            let data = response.data\n            if (data.statusCode == 200) {\n                console.log(\"list and card info updated: \", data.resp)\n              }\n             }\n          })\n      },\n      onCardMoved(e) {\n       console.log(\"onCardMoved: \", e) \n       let item = e.added || e.removed || e.moved; \n       if (e.removed != null) { // Removed: removed from one list to another\n        for (var listIndex in this.board.lists) {\n          var list = this.board.lists[listIndex]\n          let list_id = list._id\n          let listId = list.id\n          if (list.cards.length > 0) {\n            var cards = []\n            var cardIds = []\n             for (var cardPosition in list.cards) {\n                let card = list.cards[cardPosition]\n                card.position = cardPosition\n                cardIds.push(card.id)\n                cards.push({id: card.id, position: cardPosition})\n             }\n             this.updateBoardInfo(cards, cardIds, list_id, listId)\n          } else {\n            // set list empty\n            this.setListEmpty(list_id)\n          }\n        }\n        // this.getBoardBy(this.boardId)\n      }\n\n      if (e.moved != null) { // moved: moved within the same list\n        let listId = e.moved.element.listId\n        console.log(\"moved: \", e.moved.element, \"listId: \", listId)\n        let listIndex = this.board.lists.findIndex(x => x.id === listId);\n        let list = this.board.lists[listIndex]\n        let list_id = list._id\n        var cards = []\n        var cardIds = []\n        for (var cardPosition in list.cards) {\n            let card = list.cards[cardPosition]\n            card.position = cardPosition\n            cardIds.push(card.id)\n            cards.push({id: card.id, position: cardPosition})\n        }\n        this.updateBoardInfo(cards, cardIds, list_id, listId)\n      }\n    },\n        handleOverlayDismissed() {\n            this.isRefreshBoard = true\n            this.$router.go(-1)\n            // this.getBoardBy(this.boardId)\n        },\n        handleCardTapped(card, list) {\n            let path = \"/b/\" + this.boardId\n            this.$router.push(\n                {\n                    path: path, \n                    query: {\n                        card: card._id\n                    }\n                })\n        },\n      async createANewList(list, index) {\n        // Create List\n        var params = {\n          listName: this.newListName,\n          boardId: this.boardId,\n          isAddCard: true, \n          isCreateList: false,\n          headerType: \"showListName\",\n          id: Date.now(), \n          owner: this.currentUser.id \n        }\n        var fullURL = BASE_URL + \"board/newList\"\n        console.log(\"full url: \", fullURL, \"params: \", params)\n        await axios.post(fullURL, params).then((response) => {\n          if (response.data != null) {\n            let data = response.data\n            console.log(\"resp data: \", data)\n            if (data.statusCode == 200) {\n                console.log(\"created new list: \", data.resp)\n                this.getBoardBy(this.boardId)\n              }\n             }\n          })\n          this.newListName = \"\"\n    },\n        handleAddList(list, index) {\n            list.isCreateList = true \n            list.headerType = \"creatingList\"\n            this.board.lists[index] = list\n        },\n        dynamicTextArea(index) {\n            let element = document.getElementById(\"createNewListField_id\")\n            element.style.height = \"15px\";\n            element.style.height = (element.scrollHeight) + \"px\";\n        },\n        autoGrow(index, list) {\n            let element = document.getElementById(`newCardField_` + index)\n            element.style.height = \"15px\";\n            element.style.height = (element.scrollHeight) + \"px\";\n        },\n       async handleCreateCard(list, index) {\n          var params = {\n             cardName: this.newCardName,\n             boardId: this.boardId,\n             listId: list.id,\n             id: Date.now(), \n             owner: this.currentUser.id  // Change ASAP\n         }\n         var fullURL = BASE_URL + \"board/newCard\"\n         console.log(\"full url: \", fullURL, \"params: \", params)\n         await axios.post(fullURL, params).then((response) => {\n          if (response.data != null) {\n            let data = response.data\n            console.log(\"card resp data: \", data)\n            if (data.statusCode == 200) {\n                console.log(\"created new card: \", data.resp)\n                this.getBoardBy(this.boardId)\n              }\n             }\n          })\n          this.newCardName = \"\"\n        },\n        handleAddCard(list, index) {\n            list.isCreateCard = true \n            this.board[index] = list\n\n            // let bottomViewId = 'bottomView_' + list._id\n            // let bottomView = document.getElementById(bottomViewId)\n            // let bottomViewHeight = element.scrollHeight + 100\n            // bottomView.style.height = (300) + \"px\";\n\n            setTimeout(()=>{\n                let listBgViewId = \"listBgView\" + list._id\n                var myDiv = document.getElementById(listBgViewId);\n                myDiv.scrollTop = myDiv.scrollHeight + 200;\n            }, 500)\n        }, \n     async getBoardBy(boardId) {\n        console.log(\"my current current current current user: \", this.currentUser)\n        if (this.currentUser == null) {\n            this.$router.push({path: '/home'}) \n        } else {\n        let userId = this.currentUser.id\n        this.isCardTapped = false\n        var params = {\n            boardId: boardId\n        }\n        let boardResp = await APIService.getBoardById(params)\n        let apiBoard = boardResp.board\n        this.allBoardTags = boardResp.tags\n        console.log(\"apiBoard apiBoard apiBoard: \", apiBoard)\n        if (apiBoard === undefined) {\n            console.log('go home because undefined', apiBoard)\n            this.$router.push({path: '/boards'}) \n        } else {\n            let members = apiBoard.members.filter(member => member == userId)\n            console.log(\"members: \", members, \"userId: \", userId)\n            if (members.length > 0 ) {\n                apiBoard.lists.push({ id: \"listPlaceholder\", listName: \"Add New List\", headerType: \"addList\", footerType: \"add\", isAddCard: false, isCreateList: false, cards: []})\n                apiBoard.lists.sort((a,b)=> new Date(a.createdAt) - new Date(b.createdAt))\n               for (var listIndex in apiBoard.lists) {\n                 let cards = this.sortedCards(apiBoard.lists[listIndex].cards)\n                 apiBoard.lists[listIndex].cards = cards\n                 this.allCards.push(cards)\n                }\n               this.allLists = apiBoard.lists\n               this.dblists = apiBoard.lists\n               this.board = apiBoard\n            } else {\n                console.log(\"You're not part of this board, request invitation from the owner\")\n                this.$router.push({path: '/boards'}) \n            }\n        }\n      }\n    }, \n     async getCardBy(card_id) {\n        var params = {\n            card_id: card_id\n        }\n        var fullURL = BASE_URL + \"board/getCardDetail\"\n        await axios.post(fullURL, params).then((response) => {\n          if (response.data != null) {\n            let data = response.data\n            console.log(\"card data: \", data)\n            if (data.statusCode == 200) {\n                let resp = data.resp\n                if (resp != null) {\n                   this.selectedCard = resp.card\n                   this.selectedList = resp.list\n                   this.cardTags = resp.tags\n                   this.isCardTapped = true \n                   this.$emit('cardDetailInfo', resp)\n                }\n              }\n             }\n          })\n        }\n    },\n    watch: { \n        '$route' () {\n          console.log(\"routed called\")\n          this.getBoardBy(this.boardId)\n          this.getAllMembers()\n        }\n    },  \n    mounted() {\n        APIService.init()\n        let routeParams = this.$route.params\n        console.log(\"main routeParams: \", routeParams)\n       let userCacheString = localStorage.getItem(USER_CACHE_KEY)\n       if (userCacheString != null && userCacheString.length > 0) {\n        let userCache = JSON.parse(userCacheString)\n        let decryptionToken = userCache.token\n        let encryptedUserData = userCache.user\n        let decryptedData = CryptoJS.AES.decrypt(encryptedUserData, decryptionToken).toString(CryptoJS.enc.Utf8)\n        let cacheInfoObject = JSON.parse(decryptedData)\n        this.currentUser = cacheInfoObject.user\n       }\n       \n        this.boardId = routeParams.boardId\n        this.getBoardBy(this.boardId)\n        this.getAllMembers()\n    },\n}\n</script>\n<style scoped>\n.drag {\n  transform: rotate(5deg);\n}\n \n.ghost {\n  background: lightgray;\n  border-radius: 6px;\n}\n.ghost {\n  visibility: hidden;\n}\n\n.boardInfoView label {\n    font-weight: 500;\n    font-size: 10px;\n    margin-right: 8px;\n    margin-left: 1px;\n}\n.boardIcon {\n    width: 15px;\n    height: 15px;\n}\n.boardInfoView {\n    display: flex;\n    width: 120px;\n    height: 50px;\n    justify-content: space-evenly;\n    margin-top: 5px;\n}\n\n.cardNameLabel {\n    width: 200px;\n    margin-top: 8px;\n    margin-left: 10px;\n    margin-right: 10px;\n    font-weight: 700;\n    font-size: 13px;\n    text-align: left;\n    white-space: pre-wrap;\n}\n\n.footerTitleContainer {\n    width: auto;\n    height: 24px;\n    margin-top: 12px;\n    overflow: hidden;\n}\n#addIcon {\n    padding: 0;\n    margin: 0;\n    margin-top: 12px;\n    font-weight: 700;\n    color: var(--color-card-title);\n}\n\n.addCardLabel {\n    margin: 0;\n    padding: 0;\n    font-weight: 600;\n    font-size: 15px;\n    margin-left: 4px;\n    color: var(--color-card-title);\n}\n.cardAndFooterContainer {\n    height: 100%;\n    width: 100%;\n    overflow-y: scroll;\n    -webkit-overflow-scrolling: touch;\n    /* padding-bottom: 50px; */\n    -ms-overflow-style: none;  /* Internet Explorer 10+ */\n    scrollbar-width: none;  /* Firefox */\n    padding-top: 8px;\n}\n.listFooterView {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    height: 50px;\n    width: 240px;\n    border-radius: var(--border-radius-2);\n    border: 1px solid var(--color-light);\n    z-index: 9999;\n    overflow: hidden;\n    background-color: var(--color-card-background);\n    /* margin-top: -8px; */\n}\n\n.addListBtn {\n    display: block;\n    width: 100px;\n    height: 34px;\n    background-color: #FC6363;\n    color: white;\n    border-radius: var(--border-radius-1);\n    margin-left: 8px;\n    font-size: 14px;\n    font-weight: 600;\n    margin-top: 10px;\n    margin-bottom: 10px;\n}\n.addListInputField, .createNewListField {\n  padding: 8px;\n  width: 200px;\n  margin-left: 8px;\n  margin-right: 8px;\n  border: 1px solid var(--color-light);\n  border-radius: var(--border-radius-1);\n  text-align: left;\n  resize: none;\n  overflow: hidden;\n  height: 40px;\n  max-height: 500px;\n  max-lines: 200;\n  font-weight: 500;\n  font-size: 14px;\n  color: var(--color-dark-blue);\n}\n\n.createListContainer  {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    /* height: 140px; */\n    width: 98%;\n    padding-top: 10px;\n    z-index: 9999;\n    overflow: hidden;\n    background-color: var(--color-card-background);\n    align-items: center;\n    margin-top: 10px;\n    margin-right: auto;\n    margin-left: auto;\n    border-radius: var(--border-radius-2)\n}\n\n.createNewList {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    /* height: 140px; */\n    width: 98%;\n    padding-top: 10px;\n    z-index: 999999;\n    overflow: hidden;\n    background-color: white;\n    align-items: center;\n    margin-right: auto;\n    margin-left: auto;\n    border-radius: var(--border-radius-2)\n}\n\n\n.cardCell {\n    overflow: hidden;\n    width: 220px;\n    min-height: 50px;\n    margin-bottom: 10px;\n    border: 1px solid var(--color-light);\n    background-color: white;\n    display: flex;\n    flex-direction: column;\n    border-radius: var(--border-radius-1);\n    /* border-bottom-right-radius: var(--border-radius-2);\n    border-bottom-left-radius: var(--border-radius-2); */\n}\n\n.badgeAndTitleContainer {\n    display: flex;\n    flex-direction: row;\n}\n\n.badgeAndTitleContainer label {\n    margin-left: 10px;\n}\n\n.cardNameField {\n    display: flex;\n    width: 165px;\n    min-height: 30px;\n    margin-top: 17px;\n    font-size: 15px;\n    font-weight: 600;\n    resize: none;\n    color: var(--color-dark);\n    margin-bottom: 20px;\n    margin-left: 8px;\n}\n\n.listNameLabel {\n    height: 24px;\n    font-weight: 600;\n    font-size: 15px;\n    margin-top: auto;\n    margin-bottom: auto;\n}\n.colorBadge {\n    width: 4px;\n    height: 20px;\n    background-color: orange;\n    border-radius: var(--border-radius-1);\n    margin-top: auto;\n    margin-bottom: auto;\n    margin-left: 15px;\n}\n\n.listHeaderView {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    height: 60px;\n    width: 100%;\n    border-radius:  var(--border-radius-2);;\n    /* border-top-right-radius: var(--border-radius-2);\n    border-top-left-radius: var(--border-radius-2); */\n    border: 1px solid var(--color-light);\n    padding-right: 15px;\n    background-color: var(--color-card-background);\n}\n\n\n.boardListsContainer {\n    width: 100%;\n    height: 100%;\n    white-space: nowrap;\n    overflow-x: auto;\n    overflow-y: hidden;\n    -webkit-overflow-scrolling: touch;\n    padding-right: 20px;\n}\n\n.listContainer {\n    width: 220px;\n    float: none;\n    max-height: 100%;\n    position: relative;\n    margin: 0 0.50%;\n    display: inline-block;\n    zoom: 1;\n    overflow: hidden;\n    display: table-cell;\n    vertical-align: top;\n    padding-left: 15px;\n}\n\n.listBackgroundView {\n    width: 100%;\n    background-color: var(--color-background);\n    max-height: calc(100vh - 180px);\n    /* max-height: calc(100vh - 230px); */\n    overflow-y: scroll;\n    margin-top: -10px;\n    /* border-bottom-left-radius: var(--border-radius-2);\n    border-bottom-right-radius: var(--border-radius-2); */\n}\n\n.bottomView {\n    min-height: 50px;\n    width: 100%;\n    background-color: var(--color-background);\n    border-bottom-left-radius: var(--border-radius-2);\n    border-bottom-right-radius: var(--border-radius-2);\n    background-color: green;\n}\n\n.mainBoardConentView {\n    /* width: calc(100% - 10px); */\n    width: 100%;\n    height: calc(100% - 50px);\n    margin-left: auto;\n    margin-right: auto;\n    padding-top: 10px;\n}\n\n.boardBNavBar {\n    width: 100%;\n    height: 50px;\n    background-color: rgba(0, 0, 0, 0.2);\n}\n    \n</style>"],"mappings":";OAyB8BA,UAA6B;;;EArB9CC,KAAK,EAAC;AAAqB;;EACvBA,KAAK,EAAC,qBAAqB;EAACC,EAAE,EAAC;;mBALhD;;EAAAC,GAAA;EASwDF,KAAK,EAAC;;gEAC/BG,mBAAA,CAA4C;EAAzCH,KAAK,EAAC;AAA8B;mBAVtE;mBAAA;gEAewBG,mBAAA,CAA+D;EAAzDF,EAAE,EAAC,SAAS;EAACD,KAAK,EAAC;GAA4B,KAAG;gEACxDG,mBAAA,CAEM;EAFDH,KAAK,EAAC;AAAsB,I,aAC7BG,mBAAA,CAA8C;EAAtCH,KAAK,EAAC;AAAc,GAAC,UAAQ,E;qBAFzCI,UAA+D,EAC/DC,UAEM,C;oBAlB9B;;EAqB8BL,KAAK,EAAC;AAAwB;iEAChCG,mBAAA,CAA8B;EAAzBH,KAAK,EAAC;AAAY;oBAtBnD;iEAyByBG,mBAAA,CAAyD;EAApDG,GAA6B,EAA7BP,UAA6B;EAACC,KAAK,EAAC;;oBAzBlE;;EA4B0BA,KAAK,EAAC;AAAwB;;EA5BxDE,GAAA;EAyC8DF,KAAK,EAAC;;oBAzCpE;;EAAAE,GAAA;EA2CwDF,KAAK,EAAC;;iEAC/BG,mBAAA,CAA4C;EAAzCH,KAAK,EAAC;AAA8B;oBA5CtE;oBAAA;;EAAAE,GAAA;EA4D6DF,KAAK,EAAC;;oBA5DnE;iEAoEwBG,mBAAA,CAA+D;EAAzDF,EAAE,EAAC,SAAS;EAACD,KAAK,EAAC;GAA4B,KAAG;iEACxDG,mBAAA,CAEM;EAFDH,KAAK,EAAC;AAAsB,I,aAC7BG,mBAAA,CAA8C;EAAtCH,KAAK,EAAC;AAAc,GAAC,UAAQ,E;qBAFzCO,WAA+D,EAC/DC,WAEM,C;;;;;;uBAtE1BC,mBAAA,CA+EM,cA9EFC,mBAAA,sDAAuD,EACvDC,YAAA,CAAyJC,4BAAA;IAAtIZ,KAAK,EAAC,cAAc;IAAEa,OAAO,OAAOC,KAAK,CAACb,EAAE;IAAGc,SAAS,OAAOD,KAAK,CAACE,IAAI;IAAGC,mBAAiB,EAAEC,QAAA,CAAAC;4EAClHhB,mBAAA,CA0EM,OA1ENiB,UA0EM,GAzEFjB,mBAAA,CAwEK,OAxELkB,UAwEK,G,KAvEgBP,KAAK,Y,kBAArBL,mBAAA,CAoEKa,SAAA;IA1EtBpB,GAAA;EAAA,GAAAqB,WAAA,MAMqHT,KAAK,CAACU,KAAK,EANhI,CAMgGC,IAAI,EAAEC,KAAK;yBAA1FjB,mBAAA,CAoEK;MApE0BT,KAAK,EAAC,eAAe;MAACC,EAAE,EAAC,eAAe;MAA2CC,GAAG,EAAEuB,IAAI,CAACxB;QACzHE,mBAAA,CAMM;MANDH,KAAK,EAAC,eAAe;MAAE2B,KAAK,EAPrDC,eAAA;QAAAC,OAAA,EAOiEJ,IAAI,CAACK,UAAU;MAAA;wBACpD3B,mBAAA,CAA2K;MAAjKa,IAAI,EAAC,MAAM;MARjD,uBAAAe,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAQ2DC,MAAA,CAAAC,WAAW,GAAAF,MAAA;MAAGG,OAAK,EAAAH,MAAA,IAAEd,QAAA,CAAAkB,eAAe,CAACV,KAAK;MAAGW,WAAW,EAAC,iBAAiB;MAACrC,KAAK,EAAC,oBAAoB;MAACC,EAAE,EAAC;6CARpKqC,UAAA,I,cAQ2DL,MAAA,CAAAC,WAAW,E,GAC5BD,MAAA,CAAAM,YAAY,I,cAA1B9B,mBAAA,CAES,UAFT+B,UAES,GADNC,UAA4C,EAV3EC,gBAAA,CAU2E,eAC/C,E,oBACDjC,mBAAA,CAA2F;MAZtHP,GAAA;MAY0CF,KAAK,EAAC,YAAY;MAAE2C,OAAK,EAAAX,MAAA,IAAEd,QAAA,CAAA0B,cAAc,CAACnB,IAAI,EAAEC,KAAK;OAAG,aAAW,iBAZ7GmB,UAAA,G,kBAcoB1C,mBAAA,CAKO;MALFH,KAAK,EAAC,gBAAgB;MAAE2C,OAAK,EAAAX,MAAA,IAAEd,QAAA,CAAA4B,aAAa,CAACrB,IAAI,EAAEC,KAAK;MAAIC,KAAK,EAd1FC,eAAA;QAAAC,OAAA,EAcsGJ,IAAI,CAACK,UAAU;MAAA;OAdrH,IAAAiB,WAAA,0BAAAC,UAAA,GAoBqB7C,mBAAA,CAMM;MANDH,KAAK,EAAC,gBAAgB;MAAEC,EAAE,6BAA6BwB,IAAI,CAACxB,EAAE;MAAG0B,KAAK,EApBhGC,eAAA;QAAAC,OAAA,EAoB4GJ,IAAI,CAACK,UAAU;MAAA;QAClG3B,mBAAA,CAGM,OAHN8C,WAGM,GAFHC,WAA8B,E,gBAC9B/C,mBAAA,CAAmM;MAAzLgD,IAAI,EAAC,MAAM;MAAMC,MAAI,EAAApB,MAAA,IAAEd,QAAA,CAAAmC,eAAe,CAAC5B,IAAI,CAAC6B,QAAQ,EAAE7B,IAAI,CAAC8B,GAAG,EAAE9B,IAAI,CAACxB,EAAE;MAAKkC,OAAK,EAAAH,MAAA,IAAEd,QAAA,CAAAsC,oBAAoB,CAAC/B,IAAI,CAACxB,EAAE;MAAGD,KAAK,EAAC,eAAe;MAAEC,EAAE,EAAEwB,IAAI,CAACxB,EAAE;MAvB1L,uBAAA+B,MAAA,IAuBqMP,IAAI,CAAC6B,QAAQ,GAAAtB;6CAvBlNyB,WAAA,I,cAuBqMhC,IAAI,CAAC6B,QAAQ,E,KAEzLI,WAAyD,C,yBAzBlFC,WAAA,G,KA2B8FC,gBAAgB,CAACnC,IAAI,K,cAA9FhB,mBAAA,CA+BE;MA1DvBP,GAAA;MA2B0BF,KAAK,EAAC,oBAAoB;MAAEC,EAAE,iBAAiBwB,IAAI,CAAC8B;QACzDpD,mBAAA,CA4BK,OA5BL0D,WA4BK,GA3BFnD,mBAAA,qHAAoH,EACpHC,YAAA,CASemD,wBAAA;MAvCvCC,UAAA,EA8BgDtC,IAAI,CAACuC,KAAK;MA9B1D,uBAAAhC,MAAA,IA8BgDP,IAAI,CAACuC,KAAK,GAAAhC,MAAA;MAC7BiC,KAAK,EAAC,UAAU;MAChB,UAAQ,EAAC,IAAI;MACb,YAAU,EAAC,MAAM;MACjB,aAAW,EAAC,OAAO;MAClBC,QAAM,EAAEhD,QAAA,CAAAiD;;MACAC,IAAI,EAAAC,QAAA,CACd,CAA8H;QAD7GC;MAAO,OACxB3D,YAAA,CAA8H4D,mBAAA;QAAnHC,IAAI,EAAEF,OAAO;QAAGzD,OAAO,OAAOC,KAAK,CAACb,EAAE;QAAGwE,UAAU,OAAOA,UAAU;QAAGC,IAAI,OAAOC,WAAW,CAACL,OAAO;;MArC5IM,CAAA;4FAwCsBlE,mBAAA,mBAAsB,EACTe,IAAI,CAACoD,YAAY,Y,cAA5BpE,mBAAA,CAMM,OANNqE,WAMM,G,gBALF3E,mBAAA,CAA4K;MAAlKa,IAAI,EAAC,MAAM;MA1CjD,uBAAAe,MAAA,QAAAA,MAAA,MAAAC,MAAA,IA0C2DC,MAAA,CAAA8C,WAAW,GAAA/C,MAAA;MAAGG,OAAK,EAAAH,MAAA,IAAEd,QAAA,CAAA8D,QAAQ,CAACtD,KAAK;MAAGW,WAAW,EAAC,uBAAuB;MAACrC,KAAK,EAAC,mBAAmB;MAAEC,EAAE,oBAAoByB;6CA1CtLuD,WAAA,I,cA0C2DhD,MAAA,CAAA8C,WAAW,E,GAC5B9C,MAAA,CAAAM,YAAY,I,cAA1B9B,mBAAA,CAES,UAFTyE,WAES,GADNC,WAA4C,EA5C3EzC,gBAAA,CA4C2E,aAC/C,E,oBACDjC,mBAAA,CAA0F;MA9CrHP,GAAA;MA8C0CF,KAAK,EAAC,YAAY;MAAE2C,OAAK,EAAAX,MAAA,IAAEd,QAAA,CAAAkE,gBAAgB,CAAC3D,IAAI,EAAEC,KAAK;OAAG,UAAQ,iBA9C5G2D,WAAA,G,KAAA3E,mBAAA,gBAgDsBA,mBAAA,wcAKW,C,mBArDjC4E,WAAA,KAAA5E,mBAAA,gB,KA2DqFkD,gBAAgB,CAACnC,IAAI,KAAKA,IAAI,CAACoD,YAAY,I,cAA7GpE,mBAAA,CAcM;MAzEzBP,GAAA;MA2DwBF,KAAK,EAAC,YAAY;MAAEC,EAAE,kBAAkBwB,IAAI,CAAC8B;QACnC9B,IAAI,CAACoD,YAAY,Y,cAA5BpE,mBAAA,CAMO,OANP8E,WAMO,GALF7E,mBAAA,4hBAI6F,C,oBAEnGD,mBAAA,CAKOa,SAAA;MAxE7BpB,GAAA;IAAA,IAmEwCuB,IAAI,CAACuC,KAAK,YAAYvC,IAAI,CAACuC,KAAK,CAACwB,MAAM,QAAQ/D,IAAI,CAACgE,SAAS,YAAYhE,IAAI,CAACoD,YAAY,Y,cAA5GpE,mBAAA,CAKO;MAxE7BP,GAAA;MAmE4IF,KAAK,EAAC,gBAAgB;MAAE2C,OAAK,EAAAX,MAAA,IAAEd,QAAA,CAAAwE,aAAa,CAACjE,IAAI,EAAEC,KAAK;OAnEpM,IAAAiE,WAAA,kBAAAC,WAAA,KAAAlF,mBAAA,e,mEAAAmF,WAAA,KAAAnF,mBAAA,e;mCAAAA,mBAAA,e,KA+EQC,YAAA,CAAamF,qBAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}