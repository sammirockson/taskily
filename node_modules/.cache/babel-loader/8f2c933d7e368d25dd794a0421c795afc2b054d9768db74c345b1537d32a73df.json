{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref } from 'vue';\nexport default {\n  components: {},\n  methods: {\n    handleBoardTapped(board) {\n      console.log(\"board: \", board);\n      let path = \"/board/\" + board; // this.currentUser._id + \"/product/\" + product._id\n      this.$router.push({\n        path: path\n      });\n    },\n    handleBoardTypeTapped(item) {\n      this.selectedTaskBoardType = item;\n    },\n    setup() {\n      var isSideBarExpanded = ref(false);\n      var selectedTaskBoardType = ref(\"All Team\");\n      var boards = ref([]);\n      return {\n        isSideBarExpanded,\n        boards,\n        selectedTaskBoardType\n      };\n    },\n    watch: {\n      // isExpanded: function(newVal, oldVal) {\n      //     console.log('Prop changed isSideBarExpanwded: ', newVal)\n      //     this.isSideBarExpanded = newVal\n      // }\n    },\n    async fetchBoards() {\n      var params = {\n        owner: \"1721545684258\"\n      };\n      var fullURL = BASE_URL + \"board/my\";\n      console.log(\"full url: \", fullURL, \"params: \", params);\n      await axios.post(fullURL, params).then(response => {\n        console.log(\"board response: \", response);\n        if (response.data != null) {\n          let data = response.data;\n          if (data.statusCode == 200) {\n            let allBoard = data.resp;\n            console.log(\"boards: \", allBoard);\n            this.boards = allBoard;\n          }\n        }\n      });\n    }\n  },\n  mounted() {\n    this.fetchBoards();\n  }\n};","map":{"version":3,"names":["ref","components","methods","handleBoardTapped","board","console","log","path","$router","push","handleBoardTypeTapped","item","selectedTaskBoardType","setup","isSideBarExpanded","boards","watch","fetchBoards","params","owner","fullURL","BASE_URL","axios","post","then","response","data","statusCode","allBoard","resp","mounted"],"sources":["/Users/samuelrockon/Desktop/Dev/taskily/src/views/AllTaskboardsView.vue"],"sourcesContent":["<template>\n     <div class=\"allBoards\">\n            <div class=\"boardContentView\">\n                <v-row style=\"overflow: hidden;\">\n             <v-col v-for=\"board in boards\" :key=\"board\" cols=\"auto\"> \n               <div class=\"productGridCellWithBorder\"  @click=\"handleBoardTapped(board)\">\n                  <img src=\"@/assets/board_placeholder.png\" class=\"productCellImage\">\n                  <label class=\"productNameLabel\">{{ board }}</label>\n               </div>\n              </v-col>\n            </v-row>\n           </div>\n        </div>\n</template>\n<script>\nimport { ref } from 'vue'\nexport default {\n    components: {\n        \n    }, \n    methods: {\n        handleBoardTapped(board) {\n            console.log(\"board: \", board)\n            let path = \"/board/\" + board // this.currentUser._id + \"/product/\" + product._id\n            this.$router.push({path: path})\n        },\n        handleBoardTypeTapped(item) {\n            this.selectedTaskBoardType = item\n        },\n        setup() {\n        var isSideBarExpanded = ref(false)\n        var selectedTaskBoardType = ref(\"All Team\")\n        var boards = ref([])\n        return { isSideBarExpanded, boards, selectedTaskBoardType}\n    },\n    watch: { \n        // isExpanded: function(newVal, oldVal) {\n        //     console.log('Prop changed isSideBarExpanwded: ', newVal)\n        //     this.isSideBarExpanded = newVal\n        // }\n    }, \n    async fetchBoards() {\n        var params = {\n            owner: \"1721545684258\"\n        }\n        var fullURL = BASE_URL + \"board/my\"\n        console.log(\"full url: \", fullURL, \"params: \", params)\n        await axios.post(fullURL, params).then((response) => {\n          console.log(\"board response: \", response)\n          if (response.data != null) {\n            let data = response.data\n            if (data.statusCode == 200) {\n                let allBoard = data.resp\n                console.log(\"boards: \", allBoard)\n                this.boards = allBoard\n              }\n             }\n          })\n        }\n    },\n    mounted() {\n        this.fetchBoards()\n    } \n}\n</script>\n<style scoped>\n    .productCellImage {\n    height: 200px;\n    width: 232px;\n    margin-right: auto;\n    margin-left: auto;\n    background-color: var(--color-light);\n    object-fit: cover;\n}\n\n.productGridCellWithBorder {\n    border: 2px solid var(--color-light);\n}\n.productGridCell, .productGridCellWithBorder {\n    display: block;\n    height: 280px;\n    overflow: hidden;\n    width: 232px;\n    background-color: white;\n    border-radius: var(--border-radius-2);\n}\n\n.boardContentView {\n    width: 99%;\n    height: 96%;\n    display: flex;\n    justify-content: left;\n    align-items: start;\n    margin: auto;\n    padding: 30px;\n}\n\n.allBoards {\n    width: 100vw;\n    height: 100vh;\n    background-color: white;\n}\n</style>"],"mappings":";AAeA,SAASA,GAAE,QAAS,KAAI;AACxB,eAAe;EACXC,UAAU,EAAE,CAEZ,CAAC;EACDC,OAAO,EAAE;IACLC,iBAAiBA,CAACC,KAAK,EAAE;MACrBC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEF,KAAK;MAC5B,IAAIG,IAAG,GAAI,SAAQ,GAAIH,KAAI,EAAE;MAC7B,IAAI,CAACI,OAAO,CAACC,IAAI,CAAC;QAACF,IAAI,EAAEA;MAAI,CAAC;IAClC,CAAC;IACDG,qBAAqBA,CAACC,IAAI,EAAE;MACxB,IAAI,CAACC,qBAAoB,GAAID,IAAG;IACpC,CAAC;IACDE,KAAKA,CAAA,EAAG;MACR,IAAIC,iBAAgB,GAAId,GAAG,CAAC,KAAK;MACjC,IAAIY,qBAAoB,GAAIZ,GAAG,CAAC,UAAU;MAC1C,IAAIe,MAAK,GAAIf,GAAG,CAAC,EAAE;MACnB,OAAO;QAAEc,iBAAiB;QAAEC,MAAM;QAAEH;MAAqB;IAC7D,CAAC;IACDI,KAAK,EAAE;MACH;MACA;MACA;MACA;IAAA,CACH;IACD,MAAMC,WAAWA,CAAA,EAAG;MAChB,IAAIC,MAAK,GAAI;QACTC,KAAK,EAAE;MACX;MACA,IAAIC,OAAM,GAAIC,QAAO,GAAI,UAAS;MAClChB,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEc,OAAO,EAAE,UAAU,EAAEF,MAAM;MACrD,MAAMI,KAAK,CAACC,IAAI,CAACH,OAAO,EAAEF,MAAM,CAAC,CAACM,IAAI,CAAEC,QAAQ,IAAK;QACnDpB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEmB,QAAQ;QACxC,IAAIA,QAAQ,CAACC,IAAG,IAAK,IAAI,EAAE;UACzB,IAAIA,IAAG,GAAID,QAAQ,CAACC,IAAG;UACvB,IAAIA,IAAI,CAACC,UAAS,IAAK,GAAG,EAAE;YACxB,IAAIC,QAAO,GAAIF,IAAI,CAACG,IAAG;YACvBxB,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEsB,QAAQ;YAChC,IAAI,CAACb,MAAK,GAAIa,QAAO;UACvB;QACD;MACH,CAAC;IACH;EACJ,CAAC;EACDE,OAAOA,CAAA,EAAG;IACN,IAAI,CAACb,WAAW,CAAC;EACrB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}