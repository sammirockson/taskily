{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport NavBar from '@/components/NavBarView.vue';\nimport CardDetailView from '@/components/CardDetailView.vue';\nimport DraggableView from 'vuedraggable';\nimport CardView from '@/components/CardView.vue';\nimport { ref } from 'vue';\nimport { BASE_URL } from '@/config';\nimport axios from 'axios';\nexport default {\n  props: [\"isExpanded\"],\n  components: {\n    NavBar,\n    CardView,\n    CardDetailView,\n    DraggableView\n  },\n  setup() {\n    var isSideBarExpanded = ref(true);\n    var board = ref([]);\n    // var isCreateCard = ref(false)\n    var isCardTapped = ref(false);\n    var newCardName = ref(\"\");\n    var newListName = ref(\"\");\n    var boardId = ref(\"\");\n    var selectedCard = ref(Object);\n    var selectedList = ref(Object);\n    var allCards = ref([]);\n    return {\n      isSideBarExpanded,\n      board,\n      newCardName,\n      newListName,\n      isCardTapped,\n      boardId,\n      selectedCard,\n      selectedList,\n      allCards\n    };\n  },\n  methods: {\n    sortedCards(cards) {\n      return cards.sort((a, b) => a.position - b.position);\n    },\n    async setListEmpty(listId) {\n      var params = {\n        listId: listId\n      };\n      var fullURL = BASE_URL + \"board/setEmptyList\";\n      await axios.post(fullURL, params).then(response => {\n        if (response.data != null) {\n          let data = response.data;\n          console.log(\"resp data: \", data);\n          if (data.statusCode == 200) {\n            console.log(\"list and card info updated: \", data.resp);\n          }\n        }\n      });\n    },\n    async updateBoardInfo(cards, cardIds, list_id, listId) {\n      var params = {\n        cards: cards,\n        cardIds: cardIds,\n        listId: listId,\n        list_id: list_id\n      };\n      var fullURL = BASE_URL + \"board/updateList\";\n      await axios.post(fullURL, params).then(response => {\n        if (response.data != null) {\n          let data = response.data;\n          if (data.statusCode == 200) {\n            console.log(\"list and card info updated: \", data.resp);\n          }\n        }\n      });\n    },\n    onCardMoved(e) {\n      console.log(\"onCardMoved: \", e);\n      let item = e.added || e.removed || e.moved;\n      if (e.removed != null) {\n        // Removed: removed from one list to another\n        for (var listIndex in this.board.lists) {\n          var list = this.board.lists[listIndex];\n          let list_id = list._id;\n          let listId = list.id;\n          if (list.cards.length > 0) {\n            var cards = [];\n            var cardIds = [];\n            for (var cardPosition in list.cards) {\n              let card = list.cards[cardPosition];\n              card.position = cardPosition;\n              cardIds.push(card.id);\n              cards.push({\n                id: card.id,\n                position: cardPosition\n              });\n            }\n            this.updateBoardInfo(cards, cardIds, list_id, listId);\n          } else {\n            // set list empty\n            this.setListEmpty(list_id);\n          }\n        }\n        // this.getBoardBy(this.boardId)\n      }\n      if (e.moved != null) {\n        // moved: moved within the same list\n        let listId = e.moved.element.listId;\n        console.log(\"moved: \", e.moved.element, \"listId: \", listId);\n        let listIndex = this.board.lists.findIndex(x => x.id === listId);\n        let list = this.board.lists[listIndex];\n        let list_id = list._id;\n        var cards = [];\n        var cardIds = [];\n        for (var cardPosition in list.cards) {\n          let card = list.cards[cardPosition];\n          card.position = cardPosition;\n          cardIds.push(card.id);\n          cards.push({\n            id: card.id,\n            position: cardPosition\n          });\n        }\n        this.updateBoardInfo(cards, cardIds, list_id, listId);\n      }\n    },\n    handleOverlayDismissed() {\n      this.isCardTapped = false;\n    },\n    handleCardTapped(card, list) {\n      console.log(\"selectedCard: \", this.selectedCard, this.selectedList);\n      this.selectedCard = card;\n      this.selectedList = list;\n      this.isCardTapped = true;\n    },\n    async createANewList(list, index) {\n      // Create List\n      var params = {\n        listName: this.newListName,\n        boardId: this.boardId,\n        isAddCard: true,\n        isCreateList: false,\n        headerType: \"showListName\",\n        id: Date.now(),\n        owner: \"1721545684258\"\n      };\n      var fullURL = BASE_URL + \"board/newList\";\n      console.log(\"full url: \", fullURL, \"params: \", params);\n      await axios.post(fullURL, params).then(response => {\n        if (response.data != null) {\n          let data = response.data;\n          console.log(\"resp data: \", data);\n          if (data.statusCode == 200) {\n            console.log(\"created new list: \", data.resp);\n            this.getBoardBy(this.boardId);\n          }\n        }\n      });\n      this.newListName = \"\";\n    },\n    handleAddList(list, index) {\n      list.isCreateList = true;\n      list.headerType = \"creatingList\";\n      this.board.lists[index] = list;\n    },\n    dynamicTextArea(index) {\n      let element = document.getElementById(\"createNewListField_id\");\n      element.style.height = \"15px\";\n      element.style.height = element.scrollHeight + \"px\";\n    },\n    autoGrow(index) {\n      let element = document.getElementById(`newCardField_` + index);\n      element.style.height = \"15px\";\n      element.style.height = element.scrollHeight + \"px\";\n    },\n    async handleCreateCard(list, index) {\n      var params = {\n        cardName: this.newCardName,\n        boardId: this.boardId,\n        listId: list.id,\n        id: Date.now(),\n        owner: \"1721545684258\"\n      };\n      var fullURL = BASE_URL + \"board/newCard\";\n      console.log(\"full url: \", fullURL, \"params: \", params);\n      await axios.post(fullURL, params).then(response => {\n        if (response.data != null) {\n          let data = response.data;\n          console.log(\"card resp data: \", data);\n          if (data.statusCode == 200) {\n            console.log(\"created new card: \", data.resp);\n            this.getBoardBy(this.boardId);\n          }\n        }\n      });\n      this.newCardName = \"\";\n    },\n    handleAddCard(list, index) {\n      list.isCreateCard = true;\n      this.board[index] = list;\n    },\n    async getBoardBy(boardId) {\n      var params = {\n        boardId: boardId\n      };\n      var fullURL = BASE_URL + \"board/byId\";\n      console.log(\"full url: \", fullURL, \"params: \", params);\n      await axios.post(fullURL, params).then(response => {\n        if (response.data != null) {\n          let data = response.data;\n          console.log(\"resp data: \", data);\n          if (data.statusCode == 200) {\n            let apiBoard = data.resp;\n            console.log(\"board info: \", apiBoard, \"list length: \", \"lists: \", apiBoard.lists);\n            apiBoard.lists.push({\n              id: \"listPlaceholder\",\n              listName: \"Add New List\",\n              headerType: \"addList\",\n              footerType: \"add\",\n              isAddCard: false,\n              isCreateList: false,\n              cards: []\n            });\n            apiBoard.lists.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));\n            for (var listIndex in apiBoard.lists) {\n              let cards = this.sortedCards(apiBoard.lists[listIndex].cards);\n              apiBoard.lists[listIndex].cards = cards;\n              this.allCards.push(cards);\n            }\n            this.board = apiBoard;\n          }\n        }\n      });\n    }\n  },\n  watch: {\n    isExpanded: function (newVal, oldVal) {\n      console.log('Prop changed isSideBarExpanwded: ', newVal);\n      this.isSideBarExpanded = newVal;\n    }\n  },\n  mounted() {\n    let routeParams = this.$route.params;\n    let boardId = routeParams.id;\n    this.boardId = boardId;\n    console.log(\"params id: \", boardId);\n    this.getBoardBy(boardId);\n\n    //     this.board = { id: \"board1\", lists: [\n    //         { id: \"listTwo\", listName: \"TASK\", headerType: \"showListName\", cards: [\n    //             {id: \"cardOne\", cardName: \"[FGE TEAM] Upcoming Tasks and Bugs (Week 28, July 8 - July 12, 2024)\", description: \"\", imgURL: \"google.com\", isAddCard: false, isCreateList: false, progress: 0, attachments: [File]}, \n    //         ]\n    //        },  \n    //        { id: \"listPlaceholder\", listName: \"Add New List\", headerType: \"addList\", footerType: \"add\", isAddCard: false, isCreateList: false, cards: []}\n    //      ] \n    //    }\n  }\n};","map":{"version":3,"names":["NavBar","CardDetailView","DraggableView","CardView","ref","BASE_URL","axios","props","components","setup","isSideBarExpanded","board","isCardTapped","newCardName","newListName","boardId","selectedCard","Object","selectedList","allCards","methods","sortedCards","cards","sort","a","b","position","setListEmpty","listId","params","fullURL","post","then","response","data","console","log","statusCode","resp","updateBoardInfo","cardIds","list_id","onCardMoved","e","item","added","removed","moved","listIndex","lists","list","_id","id","length","cardPosition","card","push","element","findIndex","x","handleOverlayDismissed","handleCardTapped","createANewList","index","listName","isAddCard","isCreateList","headerType","Date","now","owner","getBoardBy","handleAddList","dynamicTextArea","document","getElementById","style","height","scrollHeight","autoGrow","handleCreateCard","cardName","handleAddCard","isCreateCard","apiBoard","footerType","createdAt","watch","isExpanded","newVal","oldVal","mounted","routeParams","$route"],"sources":["/Users/Sam.Agyemang/Desktop/Dev/taskily/src/components/BoardContentView.vue"],"sourcesContent":["<template>\n    <div>\n        <NavBar :isExpanded=\"this.isSideBarExpanded\"/>\n        <div class=\"boardBNavBar\">\n\n        </div>\n        <div class=\"mainBoardConentView\">\n            <div class=\"boardListsContainer\">\n                 <div class=\"listContainer\" v-for=\"(list, index) in this.board.lists\" :key=\"list.id\">\n                    <div class=\"createNewList\" :style=\"{display: list.headerType ==  `creatingList` ? 'flex' : 'none'}\">\n                            <textarea name=\"text\" v-model=\"newListName\" @input=\"dynamicTextArea(index)\" placeholder=\"Create New List\" class=\"createNewListField\" id=\"createNewListField_id\"></textarea>\n                            <button v-if=\"isSavingCard\" class=\"addListBtn buttonload\">\n                               <i class=\"fa fa-circle-o-notch fa-spin\"></i> Creating... \n                            </button>\n                           <button v-else class=\"addListBtn\" @click=\"createANewList(list, index)\">Create List</button>\n                    </div>\n                    <div class=\"listFooterView\" @click=\"handleAddList(list, index)\" :style=\"{display: list.headerType ==  `addList` ? 'flex' : 'none'}\">\n                        <span id=\"addIcon\" class=\"material-symbols-outlined\">add</span>\n                        <div class=\"footerTitleContainer\">\n                            <button class=\"addCardLabel\">New List</button>\n                        </div>\n                     </div>\n                     <div class=\"listHeaderView\" :style=\"{display: list.headerType ==  `showListName` ? 'flex' : 'none'}\">\n                         <div class=\"badgeAndTitleContainer\">\n                            <div class=\"colorBadge\"></div>\n                            <label class=\"listNameLabel\">{{ list.listName }}</label>\n                         </div>\n                         <label class=\"listNameLabel\">•••</label>\n                     </div>\n                     <div class=\"cardAndFooterContainer\">\n                        <DraggableView v-model=\"list.cards\" \n                             group=\"allCards\" \n                             item-key=\"id\"\n                             drag-class=\"drag\"\n                             ghost-class=\"ghost\"\n                             @change=\"onCardMoved\">\n                           <template #item=\"{element}\">\n                            <CardView :card=\"element\" @click=\"handleCardTapped(element, list)\"></CardView>\n                           </template>\n                       </DraggableView>\n                        <div v-if=\"list.isCreateCard == true\" class=\"createListContainer\">\n                            <textarea name=\"text\" v-model=\"newCardName\" @input=\"autoGrow(index)\" placeholder=\"Give your card a name\" class=\"addListInputField\" :id=\"`newCardField_` + index\"></textarea>\n                            <button v-if=\"isSavingCard\" class=\"addListBtn buttonload\">\n                               <i class=\"fa fa-circle-o-notch fa-spin\"></i> Adding... \n                            </button>\n                           <button v-else class=\"addListBtn\" @click=\"handleCreateCard(list, index)\">Add Card</button>\n                        </div>\n                      <div v-else v-if=\"list.cards != null && list.cards.length > 0 || list.isAddCard == true\" class=\"listFooterView\" @click=\"handleAddCard(list, index)\">\n                        <span id=\"addIcon\" class=\"material-symbols-outlined\">add</span>\n                        <div class=\"footerTitleContainer\">\n                            <button class=\"addCardLabel\">New Card</button>\n                        </div>\n                       </div>\n                      \n                    </div>\n                    \n                 </div>\n\n           </div>\n        </div>\n        <v-overlay  v-model=\"isCardTapped\" class=\"align-center justify-center overLayContainer\" contained>\n            <CardDetailView :card=\"selectedCard\" :list=\"selectedList\" @overlayDismissed=\"handleOverlayDismissed\"/>\n        </v-overlay>\n    </div>\n</template>\n<script>\nimport NavBar from '@/components/NavBarView.vue'\nimport CardDetailView from '@/components/CardDetailView.vue'\nimport DraggableView from 'vuedraggable'\nimport CardView from '@/components/CardView.vue'\nimport { ref } from 'vue'\n\nimport { BASE_URL } from '@/config'\nimport axios from 'axios';\n\nexport default {\n    props: [\"isExpanded\"],\n    components: {\n        NavBar, CardView, CardDetailView, DraggableView\n    }, \n    setup() {\n        var isSideBarExpanded = ref(true)\n        var board = ref([])\n        // var isCreateCard = ref(false)\n        var isCardTapped = ref(false)\n        var newCardName = ref(\"\")\n        var newListName = ref(\"\")\n        var boardId = ref(\"\")\n        var selectedCard = ref(Object)\n        var selectedList = ref(Object)\n        var allCards = ref([])\n        return { isSideBarExpanded, board, newCardName, newListName, isCardTapped , boardId, selectedCard, selectedList, allCards}\n    },\n    methods: {\n        sortedCards(cards) {\n            return cards.sort((a,b)=> a.position - b.position)\n        },\n        async setListEmpty(listId) {\n         var params = {\n            listId: listId\n        }\n        var fullURL = BASE_URL + \"board/setEmptyList\"\n        await axios.post(fullURL, params).then((response) => {\n          if (response.data != null) {\n            let data = response.data\n            console.log(\"resp data: \", data)\n            if (data.statusCode == 200) {\n                console.log(\"list and card info updated: \", data.resp)\n              }\n             }\n          })\n        },\n       async updateBoardInfo(cards, cardIds, list_id, listId) {\n        var params = {\n            cards: cards, \n            cardIds: cardIds, \n            listId: listId, \n            list_id: list_id\n        }\n        var fullURL = BASE_URL + \"board/updateList\"\n        await axios.post(fullURL, params).then((response) => {\n          if (response.data != null) {\n            let data = response.data\n            if (data.statusCode == 200) {\n                console.log(\"list and card info updated: \", data.resp)\n              }\n             }\n          })\n      },\n      onCardMoved(e) {\n       console.log(\"onCardMoved: \", e) \n       let item = e.added || e.removed || e.moved; \n    if (e.removed != null) { // Removed: removed from one list to another\n        for (var listIndex in this.board.lists) {\n          var list = this.board.lists[listIndex]\n          let list_id = list._id\n          let listId = list.id\n          if (list.cards.length > 0) {\n            var cards = []\n            var cardIds = []\n             for (var cardPosition in list.cards) {\n                let card = list.cards[cardPosition]\n                card.position = cardPosition\n                cardIds.push(card.id)\n                cards.push({id: card.id, position: cardPosition})\n             }\n             this.updateBoardInfo(cards, cardIds, list_id, listId)\n          } else {\n            // set list empty\n            this.setListEmpty(list_id)\n          }\n        }\n        // this.getBoardBy(this.boardId)\n      }\n\n      if (e.moved != null) { // moved: moved within the same list\n        let listId = e.moved.element.listId\n        console.log(\"moved: \", e.moved.element, \"listId: \", listId)\n        let listIndex = this.board.lists.findIndex(x => x.id === listId);\n        let list = this.board.lists[listIndex]\n        let list_id = list._id\n        var cards = []\n        var cardIds = []\n        for (var cardPosition in list.cards) {\n            let card = list.cards[cardPosition]\n            card.position = cardPosition\n            cardIds.push(card.id)\n            cards.push({id: card.id, position: cardPosition})\n        }\n        this.updateBoardInfo(cards, cardIds, list_id, listId)\n      }\n      \n\n    },\n        handleOverlayDismissed() {\n            this.isCardTapped = false \n        },\n        handleCardTapped(card, list) {\n            console.log(\"selectedCard: \", this.selectedCard, this.selectedList)\n            this.selectedCard = card\n            this.selectedList = list\n            this.isCardTapped = true \n        },\n      async createANewList(list, index) {\n        // Create List\n        var params = {\n          listName: this.newListName,\n          boardId: this.boardId,\n          isAddCard: true, \n          isCreateList: false,\n          headerType: \"showListName\",\n          id: Date.now(), \n          owner: \"1721545684258\"\n        }\n        var fullURL = BASE_URL + \"board/newList\"\n        console.log(\"full url: \", fullURL, \"params: \", params)\n        await axios.post(fullURL, params).then((response) => {\n          if (response.data != null) {\n            let data = response.data\n            console.log(\"resp data: \", data)\n            if (data.statusCode == 200) {\n                console.log(\"created new list: \", data.resp)\n                this.getBoardBy(this.boardId)\n              }\n             }\n          })\n          this.newListName = \"\"\n    },\n        handleAddList(list, index) {\n            list.isCreateList = true \n            list.headerType = \"creatingList\"\n            this.board.lists[index] = list\n        },\n        dynamicTextArea(index) {\n            let element = document.getElementById(\"createNewListField_id\")\n            element.style.height = \"15px\";\n            element.style.height = (element.scrollHeight) + \"px\";\n        },\n        autoGrow(index) {\n            let element = document.getElementById(`newCardField_` + index)\n            element.style.height = \"15px\";\n            element.style.height = (element.scrollHeight) + \"px\";\n        },\n       async handleCreateCard(list, index) {\n          var params = {\n             cardName: this.newCardName,\n             boardId: this.boardId,\n             listId: list.id,\n             id: Date.now(), \n             owner: \"1721545684258\"\n         }\n         var fullURL = BASE_URL + \"board/newCard\"\n         console.log(\"full url: \", fullURL, \"params: \", params)\n         await axios.post(fullURL, params).then((response) => {\n          if (response.data != null) {\n            let data = response.data\n            console.log(\"card resp data: \", data)\n            if (data.statusCode == 200) {\n                console.log(\"created new card: \", data.resp)\n                this.getBoardBy(this.boardId)\n              }\n             }\n          })\n          this.newCardName = \"\"\n        },\n        handleAddCard(list, index) {\n            list.isCreateCard = true \n            this.board[index] = list\n        }, \n     async getBoardBy(boardId) {\n        var params = {\n            boardId: boardId\n        }\n        var fullURL = BASE_URL + \"board/byId\"\n        console.log(\"full url: \", fullURL, \"params: \", params)\n        await axios.post(fullURL, params).then((response) => {\n          if (response.data != null) {\n            let data = response.data\n            console.log(\"resp data: \", data)\n            if (data.statusCode == 200) {\n                let apiBoard = data.resp\n                console.log(\"board info: \", apiBoard, \"list length: \", \"lists: \", apiBoard.lists)\n                apiBoard.lists.push({ id: \"listPlaceholder\", listName: \"Add New List\", headerType: \"addList\", footerType: \"add\", isAddCard: false, isCreateList: false, cards: []})\n                apiBoard.lists.sort((a,b)=> new Date(a.createdAt) - new Date(b.createdAt))\n                for (var listIndex in apiBoard.lists) {\n                    let cards = this.sortedCards(apiBoard.lists[listIndex].cards)\n                    apiBoard.lists[listIndex].cards = cards\n                    this.allCards.push(cards)\n                }\n                this.board = apiBoard\n              }\n             }\n          })\n        }\n    },\n    watch: { \n        isExpanded: function(newVal, oldVal) {\n            console.log('Prop changed isSideBarExpanwded: ', newVal)\n            this.isSideBarExpanded = newVal\n        }\n    },  \n    mounted() {\n        let routeParams = this.$route.params\n        let boardId = routeParams.id\n        this.boardId = boardId\n        console.log(\"params id: \", boardId)\n        this.getBoardBy(boardId)\n\n    //     this.board = { id: \"board1\", lists: [\n    //         { id: \"listTwo\", listName: \"TASK\", headerType: \"showListName\", cards: [\n    //             {id: \"cardOne\", cardName: \"[FGE TEAM] Upcoming Tasks and Bugs (Week 28, July 8 - July 12, 2024)\", description: \"\", imgURL: \"google.com\", isAddCard: false, isCreateList: false, progress: 0, attachments: [File]}, \n    //         ]\n    //        },  \n    //        { id: \"listPlaceholder\", listName: \"Add New List\", headerType: \"addList\", footerType: \"add\", isAddCard: false, isCreateList: false, cards: []}\n    //      ] \n    //    }\n    }\n}\n</script>\n<style scoped>\n.drag {\n  transform: rotate(5deg);\n}\n \n.ghost {\n  background: lightgray;\n  border-radius: 6px;\n}\n.ghost {\n  visibility: hidden;\n}\n\n.boardInfoView label {\n    font-weight: 500;\n    font-size: 10px;\n    margin-right: 8px;\n    margin-left: 1px;\n}\n.boardIcon {\n    width: 15px;\n    height: 15px;\n}\n.boardInfoView {\n    display: flex;\n    width: 120px;\n    height: 50px;\n    justify-content: space-evenly;\n    margin-top: 5px;\n}\n\n.cardNameLabel {\n    width: 200px;\n    margin-top: 8px;\n    margin-left: 10px;\n    margin-right: 10px;\n    font-weight: 700;\n    font-size: 13px;\n    text-align: left;\n    white-space: pre-wrap;\n}\n\n.footerTitleContainer {\n    width: auto;\n    height: 24px;\n    margin-top: 12px;\n    overflow: hidden;\n}\n#addIcon {\n    padding: 0;\n    margin: 0;\n    margin-top: 12px;\n    font-weight: 700;\n}\n\n.addCardLabel {\n    margin: 0;\n    padding: 0;\n    font-weight: 600;\n    font-size: 15px;\n    margin-left: 4px;\n}\n.cardAndFooterContainer {\n    height: 100%;\n    width: 100%;\n    overflow-y: scroll;\n    -webkit-overflow-scrolling: touch;\n    padding-bottom: 50px;\n    -ms-overflow-style: none;  /* Internet Explorer 10+ */\n    scrollbar-width: none;  /* Firefox */\n    padding-top: 8px;\n}\n.listFooterView {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    height: 50px;\n    width: 100%;\n    border-radius: var(--border-radius-1);\n    border: 1px solid var(--color-light);\n    z-index: 9999;\n    overflow: hidden;\n    background-color: white;\n    /* margin-top: -8px; */\n}\n\n.addListBtn {\n    display: block;\n    width: 100px;\n    height: 34px;\n    background-color: #FC6363;\n    color: white;\n    border-radius: var(--border-radius-1);\n    margin-left: 8px;\n    font-size: 14px;\n    font-weight: 600;\n    margin-top: 10px;\n    margin-bottom: 10px;\n}\n.addListInputField, .createNewListField {\n  padding: 8px;\n  width: 200px;\n  margin-left: 8px;\n  margin-right: 8px;\n  border: 1px solid var(--color-light);\n  border-radius: var(--border-radius-1);\n  text-align: left;\n  resize: none;\n  overflow: hidden;\n  height: 40px;\n  max-height: 500px;\n  max-lines: 200;\n  font-weight: 500;\n  font-size: 14px;\n}\n\n.createListContainer {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    /* height: 140px; */\n    width: 98%;\n    padding-top: 10px;\n    z-index: 9999;\n    overflow: hidden;\n    background-color: white;\n    align-items: center;\n    margin-top: 10px;\n    margin-right: auto;\n    margin-left: auto;\n    border-radius: var(--border-radius-1)\n}\n\n.createNewList {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    /* height: 140px; */\n    width: 98%;\n    padding-top: 10px;\n    z-index: 9999;\n    overflow: hidden;\n    background-color: white;\n    align-items: center;\n    margin-right: auto;\n    margin-left: auto;\n    border-radius: var(--border-radius-1)\n}\n\n\n.cardCell {\n    overflow: hidden;\n    width: 220px;\n    min-height: 50px;\n    margin-bottom: 10px;\n    border: 1px solid var(--color-light);\n    background-color: white;\n    display: flex;\n    flex-direction: column;\n    border-radius: var(--border-radius-1);\n    /* border-bottom-right-radius: var(--border-radius-2);\n    border-bottom-left-radius: var(--border-radius-2); */\n}\n\n.badgeAndTitleContainer {\n    display: flex;\n    flex-direction: row;\n}\n\n.badgeAndTitleContainer label {\n    margin-left: 10px;\n}\n\n.listNameLabel {\n    height: 24px;\n    font-weight: 600;\n    font-size: 15px;\n    margin-top: auto;\n    margin-bottom: auto;\n}\n.colorBadge {\n    width: 28px;\n    height: 28px;\n    background-color: orange;\n    border-radius: var(--border-radius-1);\n    margin-top: auto;\n    margin-bottom: auto;\n    margin-left: 15px;\n}\n\n.listHeaderView {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    height: 50px;\n    width: 100%;\n    border-radius:  var(--border-radius-1);;\n    /* border-top-right-radius: var(--border-radius-2);\n    border-top-left-radius: var(--border-radius-2); */\n    border: 1px solid var(--color-light);\n    padding-right: 15px;\n    background-color: white;\n}\n\n\n.boardListsContainer {\n    width: 100%;\n    height: calc(100vh - 160px);\n    white-space: nowrap;\n    overflow-x: auto;\n    overflow-y: hidden;\n    -webkit-overflow-scrolling: touch;\n    padding-right: 20px;\n}\n\n.listContainer {\n    width: 220px;\n    /* background-color: #eee; */\n    float: none;\n    height: 100%;\n    margin: 0 0.50%;\n    display: inline-block;\n    zoom: 1;\n    /* overflow: hidden; */\n    /* overflow-y: scroll; */\n    overflow: hidden;\n}\n\n.mainBoardConentView {\n    width: calc(100% - 10px);\n    height: calc(100% - 130px);\n    margin-left: auto;\n    margin-right: auto;\n    padding-top: 20px;\n}\n\n.boardBNavBar {\n    width: calc(100% - 30px);\n    height: 50px;\n    background-color: white;\n    margin-left: auto;\n    margin-right: auto;\n    margin-top: 15px;\n    border-radius: var(--border-radius-1);\n}\n    \n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}