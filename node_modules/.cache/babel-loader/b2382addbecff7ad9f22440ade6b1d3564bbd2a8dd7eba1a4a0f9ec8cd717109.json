{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// src/eventbus/index.ts\nfunction EventBus() {\n  const allHandlers = /* @__PURE__ */new Map();\n  return {\n    on(type, handler) {\n      let handlers = allHandlers.get(type);\n      if (!handlers) handlers = [handler];else handlers.push(handler);\n      allHandlers.set(type, handlers);\n      return this;\n    },\n    off(type, handler) {\n      let handlers = allHandlers.get(type);\n      if (handlers) {\n        handlers.splice(handlers.indexOf(handler) >>> 0, 1);\n      }\n      return this;\n    },\n    emit(type, evt) {\n      let handlers = allHandlers.get(type);\n      if (handlers) {\n        handlers.slice().map(handler => {\n          handler(evt);\n        });\n      }\n    },\n    clear() {\n      allHandlers.clear();\n    }\n  };\n}\nexport { EventBus };","map":{"version":3,"names":["EventBus","allHandlers","Map","on","type","handler","handlers","get","push","set","off","splice","indexOf","emit","evt","slice","map","clear"],"sources":["../../src/eventbus/index.ts"],"sourcesContent":["export interface EventBusOptions {\n    on(type: string, handler: Function): void;\n    off(type: string, handler: Function): void;\n    emit(type: string, evt?: any): void;\n    clear(): void;\n}\n\nexport function EventBus(): EventBusOptions {\n    const allHandlers = new Map<string, Function[]>();\n\n    return {\n        on(type: string, handler: Function) {\n            let handlers = allHandlers.get(type);\n\n            if (!handlers) handlers = [handler];\n            else handlers.push(handler);\n\n            allHandlers.set(type, handlers);\n\n            return this;\n        },\n        off(type: string, handler: Function) {\n            let handlers = allHandlers.get(type);\n\n            if (handlers) {\n                handlers.splice(handlers.indexOf(handler) >>> 0, 1);\n            }\n\n            return this;\n        },\n        emit(type: string, evt?: any) {\n            let handlers = allHandlers.get(type);\n\n            if (handlers) {\n                handlers.slice().map((handler) => {\n                    handler(evt);\n                });\n            }\n        },\n        clear() {\n            allHandlers.clear();\n        }\n    };\n}\n"],"mappings":";;AAOO,SAASA,SAAA,EAA4B;EACxC,MAAMC,WAAA,GAAc,mBAAIC,GAAA,CAAwB;EAEhD,OAAO;IACHC,GAAGC,IAAA,EAAcC,OAAA,EAAmB;MAChC,IAAIC,QAAA,GAAWL,WAAA,CAAYM,GAAA,CAAIH,IAAI;MAEnC,IAAI,CAACE,QAAA,EAAUA,QAAA,GAAW,CAACD,OAAO,OAC7BC,QAAA,CAASE,IAAA,CAAKH,OAAO;MAE1BJ,WAAA,CAAYQ,GAAA,CAAIL,IAAA,EAAME,QAAQ;MAE9B,OAAO;IACX;IACAI,IAAIN,IAAA,EAAcC,OAAA,EAAmB;MACjC,IAAIC,QAAA,GAAWL,WAAA,CAAYM,GAAA,CAAIH,IAAI;MAEnC,IAAIE,QAAA,EAAU;QACVA,QAAA,CAASK,MAAA,CAAOL,QAAA,CAASM,OAAA,CAAQP,OAAO,MAAM,GAAG,CAAC;MACtD;MAEA,OAAO;IACX;IACAQ,KAAKT,IAAA,EAAcU,GAAA,EAAW;MAC1B,IAAIR,QAAA,GAAWL,WAAA,CAAYM,GAAA,CAAIH,IAAI;MAEnC,IAAIE,QAAA,EAAU;QACVA,QAAA,CAASS,KAAA,CAAM,EAAEC,GAAA,CAAKX,OAAA,IAAY;UAC9BA,OAAA,CAAQS,GAAG;QACf,CAAC;MACL;IACJ;IACAG,MAAA,EAAQ;MACJhB,WAAA,CAAYgB,KAAA,CAAM;IACtB;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}