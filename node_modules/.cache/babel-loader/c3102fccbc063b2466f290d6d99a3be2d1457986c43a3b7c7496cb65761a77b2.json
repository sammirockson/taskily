{"ast":null,"code":"import axios from \"axios\";\nimport { BASE_URL } from '@/config';\nimport _ from 'lodash';\nclass APIService {\n  init() {\n    console.log(\"APIService has been initiated\");\n  }\n  async saveDesc(cardDesc, card_id) {\n    var params = {\n      card_id: card_id,\n      cardDesc: cardDesc\n    };\n    await this.baseRequest(\"board/addDueDescriptionToCard\", params);\n  }\n  async getBoardMembers(params) {\n    let path = \"board/getBoardMembers\";\n    return await this.baseRequest(path, params);\n  }\n  async login(params) {\n    let path = \"auth/login\";\n    return await this.baseRequest(path, params);\n  }\n  async signUp(params) {\n    let path = \"auth/signUp\";\n    return await this.baseRequest(path, params);\n  }\n  async getBoardById(params) {\n    let path = \"board/byId\";\n    return await this.baseRequest(path, params);\n  }\n  async confirmInvitation(params) {\n    let path = \"board/addInviteeToBoard\";\n    return await this.baseRequest(path, params);\n  }\n  async getInvitationInfo(params) {\n    let path = \"board/getInviteInfo\";\n    return await this.baseRequest(path, params);\n  }\n  async updateCardMembership(params) {\n    let path = \"board/updateCardMembership\";\n    return await this.baseRequest(path, params);\n  }\n  async baseRequest(path, params) {\n    let header = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    };\n    let options = {\n      method: 'POST',\n      headers: header,\n      body: JSON.stringify(params)\n    };\n    let fullURL = BASE_URL + path;\n    try {\n      const response = await fetch(fullURL, options);\n      let jsonResp = await response.json();\n      return jsonResp.resp;\n    } catch (err) {\n      console.log(\"error occurred: \", err);\n    }\n  }\n}\nexport default new APIService();","map":{"version":3,"names":["axios","BASE_URL","_","APIService","init","console","log","saveDesc","cardDesc","card_id","params","baseRequest","getBoardMembers","path","login","signUp","getBoardById","confirmInvitation","getInvitationInfo","updateCardMembership","header","options","method","headers","body","JSON","stringify","fullURL","response","fetch","jsonResp","json","resp","err"],"sources":["/Users/Sam.Agyemang/Desktop/Dev/taskily/src/APIService.js"],"sourcesContent":["import axios from \"axios\";\nimport { BASE_URL } from '@/config'\nimport _ from 'lodash'\n\n\nclass APIService {\n\n    init() {\n        console.log(\"APIService has been initiated\")\n    }\n\n    async saveDesc(cardDesc, card_id) {\n        var params = {\n            card_id: card_id,\n            cardDesc: cardDesc\n        }\n        await this.baseRequest(\"board/addDueDescriptionToCard\", params)\n    }\n\n\n    async getBoardMembers(params) {\n        let path = \"board/getBoardMembers\"\n        return await this.baseRequest(path, params)\n    }\n\n    async login(params) {\n        let path = \"auth/login\"\n        return await this.baseRequest(path, params)\n    }\n\n    async signUp(params) {\n        let path = \"auth/signUp\"\n        return await this.baseRequest(path, params)\n    }\n\n    async getBoardById(params) {\n        let path = \"board/byId\"\n        return await this.baseRequest(path, params)\n    }\n\n    async confirmInvitation(params) {\n        let path = \"board/addInviteeToBoard\"\n        return await this.baseRequest(path, params)\n    }\n\n    async getInvitationInfo(params) {\n        let path = \"board/getInviteInfo\"\n        return await this.baseRequest(path, params)\n    }\n\n    async updateCardMembership(params) {\n        let path = \"board/updateCardMembership\"\n        return await this.baseRequest(path, params)\n    }\n\n    \n    async baseRequest(path, params) {\n        let header = {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        }\n        let options = {\n            method: 'POST',\n            headers: header,\n            body: JSON.stringify(params)\n        }\n        let fullURL = BASE_URL + path\n        try {\n            const response = await fetch(fullURL, options)\n            let jsonResp = await response.json()\n            return jsonResp.resp\n        } catch (err) {\n            console.log(\"error occurred: \", err)\n        }\n    }\n}\n\n\n\n\n\n\nexport default new APIService()\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,UAAU;AACnC,OAAOC,CAAC,MAAM,QAAQ;AAGtB,MAAMC,UAAU,CAAC;EAEbC,IAAIA,CAAA,EAAG;IACHC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;EAChD;EAEA,MAAMC,QAAQA,CAACC,QAAQ,EAAEC,OAAO,EAAE;IAC9B,IAAIC,MAAM,GAAG;MACTD,OAAO,EAAEA,OAAO;MAChBD,QAAQ,EAAEA;IACd,CAAC;IACD,MAAM,IAAI,CAACG,WAAW,CAAC,+BAA+B,EAAED,MAAM,CAAC;EACnE;EAGA,MAAME,eAAeA,CAACF,MAAM,EAAE;IAC1B,IAAIG,IAAI,GAAG,uBAAuB;IAClC,OAAO,MAAM,IAAI,CAACF,WAAW,CAACE,IAAI,EAAEH,MAAM,CAAC;EAC/C;EAEA,MAAMI,KAAKA,CAACJ,MAAM,EAAE;IAChB,IAAIG,IAAI,GAAG,YAAY;IACvB,OAAO,MAAM,IAAI,CAACF,WAAW,CAACE,IAAI,EAAEH,MAAM,CAAC;EAC/C;EAEA,MAAMK,MAAMA,CAACL,MAAM,EAAE;IACjB,IAAIG,IAAI,GAAG,aAAa;IACxB,OAAO,MAAM,IAAI,CAACF,WAAW,CAACE,IAAI,EAAEH,MAAM,CAAC;EAC/C;EAEA,MAAMM,YAAYA,CAACN,MAAM,EAAE;IACvB,IAAIG,IAAI,GAAG,YAAY;IACvB,OAAO,MAAM,IAAI,CAACF,WAAW,CAACE,IAAI,EAAEH,MAAM,CAAC;EAC/C;EAEA,MAAMO,iBAAiBA,CAACP,MAAM,EAAE;IAC5B,IAAIG,IAAI,GAAG,yBAAyB;IACpC,OAAO,MAAM,IAAI,CAACF,WAAW,CAACE,IAAI,EAAEH,MAAM,CAAC;EAC/C;EAEA,MAAMQ,iBAAiBA,CAACR,MAAM,EAAE;IAC5B,IAAIG,IAAI,GAAG,qBAAqB;IAChC,OAAO,MAAM,IAAI,CAACF,WAAW,CAACE,IAAI,EAAEH,MAAM,CAAC;EAC/C;EAEA,MAAMS,oBAAoBA,CAACT,MAAM,EAAE;IAC/B,IAAIG,IAAI,GAAG,4BAA4B;IACvC,OAAO,MAAM,IAAI,CAACF,WAAW,CAACE,IAAI,EAAEH,MAAM,CAAC;EAC/C;EAGA,MAAMC,WAAWA,CAACE,IAAI,EAAEH,MAAM,EAAE;IAC5B,IAAIU,MAAM,GAAG;MACT,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE;IACpB,CAAC;IACD,IAAIC,OAAO,GAAG;MACVC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAEH,MAAM;MACfI,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAChB,MAAM;IAC/B,CAAC;IACD,IAAIiB,OAAO,GAAG1B,QAAQ,GAAGY,IAAI;IAC7B,IAAI;MACA,MAAMe,QAAQ,GAAG,MAAMC,KAAK,CAACF,OAAO,EAAEN,OAAO,CAAC;MAC9C,IAAIS,QAAQ,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MACpC,OAAOD,QAAQ,CAACE,IAAI;IACxB,CAAC,CAAC,OAAOC,GAAG,EAAE;MACV5B,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE2B,GAAG,CAAC;IACxC;EACJ;AACJ;AAOA,eAAe,IAAI9B,UAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}