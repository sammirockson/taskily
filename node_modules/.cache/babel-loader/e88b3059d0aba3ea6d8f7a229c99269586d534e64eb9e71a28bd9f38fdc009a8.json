{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref } from 'vue';\nimport CryptoJS from 'crypto-js';\nimport { BASE_URL, USER_CACHE_KEY } from '@/config';\nimport axios from 'axios';\nexport default {\n  inject: [\"cryptojs\"],\n  components: {},\n  setup() {\n    var isSideBarExpanded = ref(false);\n    var selectedTaskBoardType = ref(\"All Team\");\n    var boards = ref([]);\n    var currentUser = ref({});\n    return {\n      isSideBarExpanded,\n      boards,\n      selectedTaskBoardType,\n      currentUser\n    };\n  },\n  methods: {\n    handleMount() {\n      let userCacheString = localStorage.getItem(USER_CACHE_KEY);\n      console.log(\"userCacheString: \", userCacheString);\n      if (userCacheString == null || userCacheString.length == 0) {\n        this.$router.push({\n          path: \"/home\"\n        });\n      } else {\n        let userCache = JSON.parse(userCacheString);\n        let decryptionToken = userCache.token;\n        let encryptedUserData = userCache.user;\n        let decryptedData = CryptoJS.AES.decrypt(encryptedUserData, decryptionToken).toString(CryptoJS.enc.Utf8);\n        let cacheInfoObject = JSON.parse(decryptedData);\n        this.currentUser = cacheInfoObject.user;\n        console.log(\"parsed credentials: \", userCache);\n        this.fetchBoards();\n      }\n    },\n    handleBoardTapped(board) {\n      console.log(\"board: \", board);\n      let path = \"/b/\" + board.id;\n      this.$router.push({\n        path: path\n      });\n    },\n    handleBoardTypeTapped(item) {\n      this.selectedTaskBoardType = item;\n    },\n    watch: {\n      // isExpanded: function(newVal, oldVal) {\n      //     console.log('Prop changed isSideBarExpanwded: ', newVal)\n      //     this.isSideBarExpanded = newVal\n      // }\n    },\n    async fetchBoards() {\n      var params = {\n        owner: this.currentUser.id\n      };\n      var fullURL = BASE_URL + \"board/my\";\n      console.log(\"full url: \", fullURL, \"params: \", params);\n      await axios.post(fullURL, params).then(response => {\n        console.log(\"board response: \", response);\n        if (response.data != null) {\n          let data = response.data;\n          console.log(\"resp data: \", data);\n          if (data.statusCode == 200) {\n            let allBoard = data.resp;\n            console.log(\"boards: \", allBoard);\n            this.boards = allBoard;\n          }\n        }\n      });\n    }\n  },\n  mounted() {\n    this.handleMount();\n  }\n};","map":{"version":3,"names":["ref","CryptoJS","BASE_URL","USER_CACHE_KEY","axios","inject","components","setup","isSideBarExpanded","selectedTaskBoardType","boards","currentUser","methods","handleMount","userCacheString","localStorage","getItem","console","log","length","$router","push","path","userCache","JSON","parse","decryptionToken","token","encryptedUserData","user","decryptedData","AES","decrypt","toString","enc","Utf8","cacheInfoObject","fetchBoards","handleBoardTapped","board","id","handleBoardTypeTapped","item","watch","params","owner","fullURL","post","then","response","data","statusCode","allBoard","resp","mounted"],"sources":["/Users/Sam.Agyemang/Desktop/Dev/taskily/src/views/AllBoardsView.vue"],"sourcesContent":["<template>\n     <div class=\"allBoards\">\n     <label class=\"title-label\">My Boards</label>\n        <div class=\"boardContentView\">\n            <v-row style=\"overflow: hidden;\">\n             <v-col v-for=\"board in boards\" :key=\"board\" cols=\"auto\"> \n               <div class=\"productGridCellWithBorder\"  @click=\"handleBoardTapped(board)\">\n                  <img src=\"@/assets/board_placeholder.png\" class=\"productCellImage\">\n                  <label class=\"productNameLabel\">{{ board.name }}</label>\n               </div>\n              </v-col>\n            </v-row>\n           </div>\n        </div>\n</template>\n<script>\nimport { ref } from 'vue'\nimport CryptoJS from 'crypto-js'\nimport { BASE_URL, USER_CACHE_KEY } from '@/config'\nimport axios from 'axios';\n\nexport default {\n  inject: [\"cryptojs\"],\n    components: {\n        \n    }, \n    setup() {\n        var isSideBarExpanded = ref(false)\n        var selectedTaskBoardType = ref(\"All Team\")\n        var boards = ref([])\n        var currentUser = ref({})\n        return { isSideBarExpanded, boards, selectedTaskBoardType, currentUser}\n    },\n    methods: {\n      handleMount() {\n        let userCacheString = localStorage.getItem(USER_CACHE_KEY)\n        console.log(\"userCacheString: \", userCacheString)\n        if (userCacheString == null || userCacheString.length == 0) {\n              this.$router.push({path: \"/home\"})\n            } else {\n             let userCache = JSON.parse(userCacheString)\n             let decryptionToken = userCache.token\n             let encryptedUserData = userCache.user\n             let decryptedData = CryptoJS.AES.decrypt(encryptedUserData, decryptionToken).toString(CryptoJS.enc.Utf8)\n             let cacheInfoObject = JSON.parse(decryptedData)\n             this.currentUser = cacheInfoObject.user\n             console.log(\"parsed credentials: \", userCache)\n             this.fetchBoards()\n       }\n      },\n      handleBoardTapped(board) {\n        console.log(\"board: \", board)\n        let path = \"/b/\" + board.id\n        this.$router.push({path: path})\n      },\n      handleBoardTypeTapped(item) {\n        this.selectedTaskBoardType = item\n      },\n    watch: { \n        // isExpanded: function(newVal, oldVal) {\n        //     console.log('Prop changed isSideBarExpanwded: ', newVal)\n        //     this.isSideBarExpanded = newVal\n        // }\n    }, \n    async fetchBoards() {\n        var params = {\n            owner: this.currentUser.id\n        }\n        var fullURL = BASE_URL + \"board/my\"\n        console.log(\"full url: \", fullURL, \"params: \", params)\n        await axios.post(fullURL, params).then((response) => {\n          console.log(\"board response: \", response)\n          if (response.data != null) {\n            let data = response.data\n            console.log(\"resp data: \", data)\n            if (data.statusCode == 200) {\n                let allBoard = data.resp\n                console.log(\"boards: \", allBoard)\n                this.boards = allBoard\n              }\n             }\n          })\n        }\n    },\n    mounted() {\n      this.handleMount()\n    } \n}\n</script>\n<style lang=\"scss\" scoped>\n    .productCellImage {\n    height: 200px;\n    width: 232px;\n    margin-right: auto;\n    margin-left: auto;\n    background-color: var(--color-light);\n    object-fit: cover;\n}\n\n.productGridCellWithBorder {\n    border: 2px solid var(--color-light);\n}\n.productGridCell, .productGridCellWithBorder {\n    display: block;\n    height: 280px;\n    overflow: hidden;\n    width: 232px;\n    background-color: white;\n    border-radius: var(--border-radius-2);\n}\n\n.boardContentView {\n    width: 80%;\n    height: 400px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin: auto;\n    padding: 30px;\n    background-color: orange;\n}\n\n.allBoards {\n    width: 100vw;\n    height: 100vh;\n    background-color: white;\n    .title-label {\n      display: flex;\n      text-align: left;\n      font-weight: 700;\n      font-size: 34px;\n      margin-left: 10%;\n      padding-top: 100px;\n    }\n}\n</style>"],"mappings":";AAgBA,SAASA,GAAE,QAAS,KAAI;AACxB,OAAOC,QAAO,MAAO,WAAU;AAC/B,SAASC,QAAQ,EAAEC,cAAa,QAAS,UAAS;AAClD,OAAOC,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,MAAM,EAAE,CAAC,UAAU,CAAC;EAClBC,UAAU,EAAE,CAEZ,CAAC;EACDC,KAAKA,CAAA,EAAG;IACJ,IAAIC,iBAAgB,GAAIR,GAAG,CAAC,KAAK;IACjC,IAAIS,qBAAoB,GAAIT,GAAG,CAAC,UAAU;IAC1C,IAAIU,MAAK,GAAIV,GAAG,CAAC,EAAE;IACnB,IAAIW,WAAU,GAAIX,GAAG,CAAC,CAAC,CAAC;IACxB,OAAO;MAAEQ,iBAAiB;MAAEE,MAAM;MAAED,qBAAqB;MAAEE;IAAW;EAC1E,CAAC;EACDC,OAAO,EAAE;IACPC,WAAWA,CAAA,EAAG;MACZ,IAAIC,eAAc,GAAIC,YAAY,CAACC,OAAO,CAACb,cAAc;MACzDc,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEJ,eAAe;MAChD,IAAIA,eAAc,IAAK,IAAG,IAAKA,eAAe,CAACK,MAAK,IAAK,CAAC,EAAE;QACtD,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC;UAACC,IAAI,EAAE;QAAO,CAAC;MACnC,OAAO;QACN,IAAIC,SAAQ,GAAIC,IAAI,CAACC,KAAK,CAACX,eAAe;QAC1C,IAAIY,eAAc,GAAIH,SAAS,CAACI,KAAI;QACpC,IAAIC,iBAAgB,GAAIL,SAAS,CAACM,IAAG;QACrC,IAAIC,aAAY,GAAI7B,QAAQ,CAAC8B,GAAG,CAACC,OAAO,CAACJ,iBAAiB,EAAEF,eAAe,CAAC,CAACO,QAAQ,CAAChC,QAAQ,CAACiC,GAAG,CAACC,IAAI;QACvG,IAAIC,eAAc,GAAIZ,IAAI,CAACC,KAAK,CAACK,aAAa;QAC9C,IAAI,CAACnB,WAAU,GAAIyB,eAAe,CAACP,IAAG;QACtCZ,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEK,SAAS;QAC7C,IAAI,CAACc,WAAW,CAAC;MACvB;IACD,CAAC;IACDC,iBAAiBA,CAACC,KAAK,EAAE;MACvBtB,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEqB,KAAK;MAC5B,IAAIjB,IAAG,GAAI,KAAI,GAAIiB,KAAK,CAACC,EAAC;MAC1B,IAAI,CAACpB,OAAO,CAACC,IAAI,CAAC;QAACC,IAAI,EAAEA;MAAI,CAAC;IAChC,CAAC;IACDmB,qBAAqBA,CAACC,IAAI,EAAE;MAC1B,IAAI,CAACjC,qBAAoB,GAAIiC,IAAG;IAClC,CAAC;IACHC,KAAK,EAAE;MACH;MACA;MACA;MACA;IAAA,CACH;IACD,MAAMN,WAAWA,CAAA,EAAG;MAChB,IAAIO,MAAK,GAAI;QACTC,KAAK,EAAE,IAAI,CAAClC,WAAW,CAAC6B;MAC5B;MACA,IAAIM,OAAM,GAAI5C,QAAO,GAAI,UAAS;MAClCe,OAAO,CAACC,GAAG,CAAC,YAAY,EAAE4B,OAAO,EAAE,UAAU,EAAEF,MAAM;MACrD,MAAMxC,KAAK,CAAC2C,IAAI,CAACD,OAAO,EAAEF,MAAM,CAAC,CAACI,IAAI,CAAEC,QAAQ,IAAK;QACnDhC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE+B,QAAQ;QACxC,IAAIA,QAAQ,CAACC,IAAG,IAAK,IAAI,EAAE;UACzB,IAAIA,IAAG,GAAID,QAAQ,CAACC,IAAG;UACvBjC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEgC,IAAI;UAC/B,IAAIA,IAAI,CAACC,UAAS,IAAK,GAAG,EAAE;YACxB,IAAIC,QAAO,GAAIF,IAAI,CAACG,IAAG;YACvBpC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEkC,QAAQ;YAChC,IAAI,CAAC1C,MAAK,GAAI0C,QAAO;UACvB;QACD;MACH,CAAC;IACH;EACJ,CAAC;EACDE,OAAOA,CAAA,EAAG;IACR,IAAI,CAACzC,WAAW,CAAC;EACnB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}